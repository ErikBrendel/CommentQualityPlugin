# id;timestamp;commentText;codeText;commentWords;codeWords
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1444297686;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1447780907;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1452884884;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1461669017;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1475517578;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1477509530;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1495653033;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesEdges();1501532946;Sets the CSV reader for the Edges file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesEdges() {_		this.edgeReader.ignoreInvalidLines()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,edges,this,edge,reader,ignore,invalid,lines,return,this
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1444297686;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1447780907;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1452884884;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1461669017;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1475517578;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		DataSet<Tuple2<K, VV>> vertices___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,data,set,tuple2,k,vv,vertices,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1477509530;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			DataSet<Tuple2<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())___			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,data,set,tuple2,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1495653033;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			DataSet<Tuple2<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())___			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,data,set,tuple2,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings("unchecked") 	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue, 			Class<EV> edgeValue);1501532946;Creates a Graph from CSV input with vertex values and edge values._The vertex values are specified through a vertices input file or a user-defined map function.__@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@param edgeValue the type of the edge values_@return a Graph with vertex and edge values.;@SuppressWarnings("unchecked")_	public <K, VV, EV> Graph<K, VV, EV> types(Class<K> vertexKey, Class<VV> vertexValue,_			Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		_		if (vertexReader != null) {_			DataSet<Tuple2<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())___			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,with,vertex,values,and,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,param,edge,value,the,type,of,the,edge,values,return,a,graph,with,vertex,and,edge,values;suppress,warnings,unchecked,public,k,vv,ev,graph,k,vv,ev,types,class,k,vertex,key,class,vv,vertex,value,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,if,vertex,reader,null,data,set,tuple2,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1444297686;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1447780907;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1452884884;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1461669017;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1475517578;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1477509530;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1495653033;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(long mask);1501532946;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(long mask) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,long,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1444297686;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {_		_		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K,K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> input) {_						return new Tuple3<K, K, NullValue>(input.f0, input.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,input,return,new,tuple3,k,k,null,value,input,f0,input,f1,null,value,get,instance,with,forwarded,fields,f0,f1,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1447780907;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {_		_		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K,K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> input) {_						return new Tuple3<K, K, NullValue>(input.f0, input.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,input,return,new,tuple3,k,k,null,value,input,f0,input,f1,null,value,get,instance,with,forwarded,fields,f0,f1,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1452884884;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {_		_		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K,K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> input) {_						return new Tuple3<K, K, NullValue>(input.f0, input.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,input,return,new,tuple3,k,k,null,value,input,f0,input,f1,null,value,get,instance,with,forwarded,fields,f0,f1,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1461669017;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {_		_		DataSet<Tuple2<K, VV>> vertices = null___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K,K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> input) {_						return new Tuple3<K, K, NullValue>(input.f0, input.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,data,set,tuple2,k,vv,vertices,null,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,input,return,new,tuple3,k,k,null,value,input,f0,input,f1,null,value,get,instance,with,forwarded,fields,f0,f1,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1475517578;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {_		_		DataSet<Tuple2<K, VV>> vertices___		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K,K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> input) {_						return new Tuple3<>(input.f0, input.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		_		if (vertexReader != null) {_			vertices = vertexReader.types(vertexKey, vertexValue)__			return Graph.fromTupleDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromTupleDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,data,set,tuple2,k,vv,vertices,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,input,return,new,tuple3,input,f0,input,f1,null,value,get,instance,with,forwarded,fields,f0,f1,if,vertex,reader,null,vertices,vertex,reader,types,vertex,key,vertex,value,return,graph,from,tuple,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,tuple,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1477509530;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<K>())_				.name("To Edge")___		_		if (vertexReader != null) {_			DataSet<Vertex<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())_				.map(new Tuple2ToVertexMap<K, VV>())_					.name("Type conversion")___			return Graph.fromDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,k,name,to,edge,if,vertex,reader,null,data,set,vertex,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,map,new,tuple2to,vertex,map,k,vv,name,type,conversion,return,graph,from,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1495653033;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<K>())_				.name("To Edge")___		_		if (vertexReader != null) {_			DataSet<Vertex<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())_				.map(new Tuple2ToVertexMap<K, VV>())_					.name("Type conversion")___			return Graph.fromDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,k,name,to,edge,if,vertex,reader,null,data,set,vertex,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,map,new,tuple2to,vertex,map,k,vv,name,type,conversion,return,graph,from,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> @SuppressWarnings({ "serial", "unchecked" }) 	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue);1501532946;Creates a Graph from CSV input without edge values._The vertex values are specified through a vertices input file or a user-defined map function._If no vertices input file is provided, the vertex IDs are automatically created from the edges_input file._@param vertexKey the type of the vertex IDs_@param vertexValue the type of the vertex values_@return a Graph where the vertex IDs and vertex values.;@SuppressWarnings({ "serial", "unchecked" })_	public <K, VV> Graph<K, VV, NullValue> vertexTypes(Class<K> vertexKey, Class<VV> vertexValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<>())_				.name("To Edge")___		_		if (vertexReader != null) {_			DataSet<Vertex<K, VV>> vertices = vertexReader_				.types(vertexKey, vertexValue)_					.name(GraphCsvReader.class.getName())_				.map(new Tuple2ToVertexMap<>())_					.name("Type conversion")___			return Graph.fromDataSet(vertices, edges, executionContext)__		}_		else if (mapper != null) {_			return Graph.fromDataSet(edges, (MapFunction<K, VV>) mapper, executionContext)__		}_		else {_			throw new RuntimeException("Vertex values have to be specified through a vertices input file"_					+ "or a user-defined map function.")__		}_	};creates,a,graph,from,csv,input,without,edge,values,the,vertex,values,are,specified,through,a,vertices,input,file,or,a,user,defined,map,function,if,no,vertices,input,file,is,provided,the,vertex,ids,are,automatically,created,from,the,edges,input,file,param,vertex,key,the,type,of,the,vertex,ids,param,vertex,value,the,type,of,the,vertex,values,return,a,graph,where,the,vertex,ids,and,vertex,values;suppress,warnings,serial,unchecked,public,k,vv,graph,k,vv,null,value,vertex,types,class,k,vertex,key,class,vv,vertex,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,name,to,edge,if,vertex,reader,null,data,set,vertex,k,vv,vertices,vertex,reader,types,vertex,key,vertex,value,name,graph,csv,reader,class,get,name,map,new,tuple2to,vertex,map,name,type,conversion,return,graph,from,data,set,vertices,edges,execution,context,else,if,mapper,null,return,graph,from,data,set,edges,map,function,k,vv,mapper,execution,context,else,throw,new,runtime,exception,vertex,values,have,to,be,specified,through,a,vertices,input,file,or,a,user,defined,map,function
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1444297686;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1447780907;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1452884884;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1461669017;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1475517578;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1477509530;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1495653033;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if (this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterVertices(String delimiter);1501532946;Configures the Delimiter that separates rows for the CSV reader used to read the vertices_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterVertices(String delimiter) {_		if (this.vertexReader != null) {_			this.vertexReader.lineDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,vertices,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1444297686;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1447780907;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1452884884;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1461669017;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1475517578;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1477509530;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if(this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1495653033;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if (this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterVertices(String delimiter);1501532946;Configures the Delimiter that separates fields in a row for the CSV reader used to read the vertices_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterVertices(String delimiter) {_		if (this.vertexReader != null) {_			this.vertexReader.fieldDelimiter(delimiter)__		}_		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,vertices,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,vertices,string,delimiter,if,this,vertex,reader,null,this,vertex,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1444297686;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1447780907;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1452884884;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1461669017;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1475517578;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1477509530;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1495653033;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(boolean ... edgeFields);1501532946;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param edgeFields The array of flags that describes which fields are to be included from the CSV file for edges._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(boolean ... edgeFields) {_		this.edgeReader.includeFields(edgeFields)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,edge,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,edges,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,boolean,edge,fields,this,edge,reader,include,fields,edge,fields,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1444297686;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1447780907;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1452884884;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1461669017;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1475517578;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1477509530;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1495653033;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineEdges();1501532946;Sets the CSV reader for the Edges file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineEdges() {_		this.edgeReader.ignoreFirstLine()__		return this__	};sets,the,csv,reader,for,the,edges,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,edges,this,edge,reader,ignore,first,line,return,this
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1444297686;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1447780907;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1452884884;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1461669017;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1475517578;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader.types(vertexKey, vertexKey, edgeValue)___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1477509530;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader_			.types(vertexKey, vertexKey, edgeValue)_				.name(GraphCsvReader.class.getName())___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1495653033;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader_			.types(vertexKey, vertexKey, edgeValue)_				.name(GraphCsvReader.class.getName())___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue);1501532946;Creates a Graph from CSV input with edge values, but without vertex values._@param vertexKey the type of the vertex IDs_@param edgeValue the type of the edge values_@return a Graph where the edges are read from an edges CSV file (with values).;public <K, EV> Graph<K, NullValue, EV> edgeTypes(Class<K> vertexKey, Class<EV> edgeValue) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Tuple3<K, K, EV>> edges = edgeReader_			.types(vertexKey, vertexKey, edgeValue)_				.name(GraphCsvReader.class.getName())___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,with,edge,values,but,without,vertex,values,param,vertex,key,the,type,of,the,vertex,ids,param,edge,value,the,type,of,the,edge,values,return,a,graph,where,the,edges,are,read,from,an,edges,csv,file,with,values;public,k,ev,graph,k,null,value,ev,edge,types,class,k,vertex,key,class,ev,edge,value,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,tuple3,k,k,ev,edges,edge,reader,types,vertex,key,vertex,key,edge,value,name,graph,csv,reader,class,get,name,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1444297686;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1447780907;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1452884884;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1461669017;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1475517578;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1477509530;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1495653033;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(boolean ... vertexFields);1501532946;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_parser will look at the first {@code n} fields, where {@code n} is the length of the boolean_array. The parser will skip over all fields where the boolean value at the corresponding position_in the array is {@code false}. The result contains the fields where the corresponding position in_the boolean array is {@code true}._The number of fields in the result is consequently equal to the number of times that {@code true}_occurs in the fields array.__@param vertexFields The array of flags that describes which fields are to be included from the CSV file for vertices._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(boolean ... vertexFields) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(vertexFields)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,boolean,array,the,parser,will,skip,over,all,fields,where,the,boolean,value,at,the,corresponding,position,in,the,array,is,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,true,the,number,of,fields,in,the,result,is,consequently,equal,to,the,number,of,times,that,code,true,occurs,in,the,fields,array,param,vertex,fields,the,array,of,flags,that,describes,which,fields,are,to,be,included,from,the,csv,file,for,vertices,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,boolean,vertex,fields,if,this,vertex,reader,null,this,vertex,reader,include,fields,vertex,fields,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1444297686;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1447780907;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1452884884;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1461669017;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1475517578;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1477509530;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1495653033;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader ignoreInvalidLinesVertices();1501532946;Sets the CSV reader Vertices file  to ignore any invalid lines._This is useful for files that contain an empty line at the end, multiple header lines or comments. This would throw an exception otherwise.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreInvalidLinesVertices() {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreInvalidLines()__		}_		return this__	};sets,the,csv,reader,vertices,file,to,ignore,any,invalid,lines,this,is,useful,for,files,that,contain,an,empty,line,at,the,end,multiple,header,lines,or,comments,this,would,throw,an,exception,otherwise,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,invalid,lines,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,invalid,lines,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1444297686;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1447780907;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1452884884;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1461669017;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1475517578;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1477509530;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1495653033;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(String mask);1501532946;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(String mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,string,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1444297686;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1447780907;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1452884884;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1461669017;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1475517578;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1477509530;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1495653033;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsVertices(String commentPrefix);1501532946;Configures the string that starts comments for the Vertex Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsVertices(String commentPrefix) {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreComments(commentPrefix)__		}_		return this__	};configures,the,string,that,starts,comments,for,the,vertex,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,vertices,string,comment,prefix,if,this,vertex,reader,null,this,vertex,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1444297686;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1447780907;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1452884884;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1461669017;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1475517578;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1477509530;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if(this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1495653033;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsVertices(String mask);1501532946;Configures which fields of the CSV file containing vertices data should be included and which should be skipped. The_positions in the string (read from position 0 to its length) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the length of the mask string_The parser will skip over all fields where the character at the corresponding position_in the string is {@code '0'}, {@code 'F'}, or {@code 'f'} (representing the value_{@code false}). The result contains the fields where the corresponding position in_the boolean array is {@code '1'}, {@code 'T'}, or {@code 't'} (representing the value {@code true}).__@param mask The string mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsVertices(String mask) {_		if (this.vertexReader != null) {_			this.vertexReader.includeFields(mask)__		}_		return this__	};configures,which,fields,of,the,csv,file,containing,vertices,data,should,be,included,and,which,should,be,skipped,the,positions,in,the,string,read,from,position,0,to,its,length,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,length,of,the,mask,string,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,position,in,the,string,is,code,0,code,f,or,code,f,representing,the,value,code,false,the,result,contains,the,fields,where,the,corresponding,position,in,the,boolean,array,is,code,1,code,t,or,code,t,representing,the,value,code,true,param,mask,the,string,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,vertices,string,mask,if,this,vertex,reader,null,this,vertex,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1444297686;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1447780907;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1452884884;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1461669017;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1475517578;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1477509530;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1495653033;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader lineDelimiterEdges(String delimiter);1501532946;Configures the Delimiter that separates rows for the CSV reader used to read the edges_({@code '\n'}) is used by default.__@param delimiter The delimiter that separates the rows._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader lineDelimiterEdges(String delimiter) {_		edgeReader.lineDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,rows,for,the,csv,reader,used,to,read,the,edges,code,n,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,rows,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,line,delimiter,edges,string,delimiter,edge,reader,line,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1444297686;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1447780907;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1452884884;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1461669017;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1475517578;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1477509530;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1495653033;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader fieldDelimiterEdges(String delimiter);1501532946;Configures the Delimiter that separates fields in a row for the CSV reader used to read the edges_({@code ','}) is used by default.__@param delimiter The delimiter that separates the fields in a row._@return The GraphCsv reader instance itself, to allow for fluent function chaining.;public GraphCsvReader fieldDelimiterEdges(String delimiter) {_		this.edgeReader.fieldDelimiter(delimiter)__		return this__	};configures,the,delimiter,that,separates,fields,in,a,row,for,the,csv,reader,used,to,read,the,edges,code,is,used,by,default,param,delimiter,the,delimiter,that,separates,the,fields,in,a,row,return,the,graph,csv,reader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,field,delimiter,edges,string,delimiter,this,edge,reader,field,delimiter,delimiter,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1444297686;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1447780907;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1452884884;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1461669017;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1475517578;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1477509530;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if(this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1495653033;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if (this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter);1501532946;Enables quoted String parsing for Vertex Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsVertices(char quoteCharacter) {_		if (this.vertexReader != null) {_			this.vertexReader.parseQuotedStrings(quoteCharacter)__		}_		return this__	};enables,quoted,string,parsing,for,vertex,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,vertices,char,quote,character,if,this,vertex,reader,null,this,vertex,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1444297686;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1447780907;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1452884884;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1461669017;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1475517578;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1477509530;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1495653033;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter);1501532946;Enables quoted String parsing for Edge Csv Reader. Field delimiters in quoted Strings are ignored._A String is parsed as quoted if it starts and ends with a quoting character and as unquoted otherwise._Leading or tailing whitespaces are not allowed.__@param quoteCharacter The character which is used as quoting character._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader parseQuotedStringsEdges(char quoteCharacter) {_		this.edgeReader.parseQuotedStrings(quoteCharacter)__		return this__	};enables,quoted,string,parsing,for,edge,csv,reader,field,delimiters,in,quoted,strings,are,ignored,a,string,is,parsed,as,quoted,if,it,starts,and,ends,with,a,quoting,character,and,as,unquoted,otherwise,leading,or,tailing,whitespaces,are,not,allowed,param,quote,character,the,character,which,is,used,as,quoting,character,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,parse,quoted,strings,edges,char,quote,character,this,edge,reader,parse,quoted,strings,quote,character,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1444297686;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1447780907;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1452884884;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1461669017;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1475517578;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1477509530;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one._<p>_Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1495653033;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader includeFieldsEdges(long mask);1501532946;Configures which fields of the CSV file containing edges data should be included and which should be skipped. The_bits in the value (read from least significant to most significant) define whether the field at_the corresponding position in the CSV schema should be included._parser will look at the first {@code n} fields, where {@code n} is the position of the most significant_non-zero bit._The parser will skip over all fields where the character at the corresponding bit is zero, and_include the fields where the corresponding bit is one.__<p>Examples:_<ul>_<li>A mask of {@code 0x7} would include the first three fields.</li>_<li>A mask of {@code 0x26} (binary {@code 100110} would skip the first fields, include fields_two and three, skip fields four and five, and include field six.</li>_</ul>__@param mask The bit mask defining which fields to include and which to skip._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader includeFieldsEdges(long mask) {_		this.edgeReader.includeFields(mask)__		return this__	};configures,which,fields,of,the,csv,file,containing,edges,data,should,be,included,and,which,should,be,skipped,the,bits,in,the,value,read,from,least,significant,to,most,significant,define,whether,the,field,at,the,corresponding,position,in,the,csv,schema,should,be,included,parser,will,look,at,the,first,code,n,fields,where,code,n,is,the,position,of,the,most,significant,non,zero,bit,the,parser,will,skip,over,all,fields,where,the,character,at,the,corresponding,bit,is,zero,and,include,the,fields,where,the,corresponding,bit,is,one,p,examples,ul,li,a,mask,of,code,0x7,would,include,the,first,three,fields,li,li,a,mask,of,code,0x26,binary,code,100110,would,skip,the,first,fields,include,fields,two,and,three,skip,fields,four,and,five,and,include,field,six,li,ul,param,mask,the,bit,mask,defining,which,fields,to,include,and,which,to,skip,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,include,fields,edges,long,mask,this,edge,reader,include,fields,mask,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1444297686;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1447780907;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1452884884;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1461669017;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1475517578;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1477509530;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if(this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1495653033;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public GraphCsvReader ignoreFirstLineVertices();1501532946;Sets the CSV reader for the Vertices file to ignore the first line. This is useful for files that contain a header line.__@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreFirstLineVertices() {_		if (this.vertexReader != null) {_			this.vertexReader.ignoreFirstLine()__		}_		return this__	};sets,the,csv,reader,for,the,vertices,file,to,ignore,the,first,line,this,is,useful,for,files,that,contain,a,header,line,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,first,line,vertices,if,this,vertex,reader,null,this,vertex,reader,ignore,first,line,return,this
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1444297686;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		@SuppressWarnings("serial")_		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K, K>, Tuple3<K, K, NullValue>>() {__					public Tuple3<K, K, NullValue> map(Tuple2<K, K> edge) {_						return new Tuple3<K, K, NullValue>(edge.f0, edge.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")____		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,suppress,warnings,serial,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,public,tuple3,k,k,null,value,map,tuple2,k,k,edge,return,new,tuple3,k,k,null,value,edge,f0,edge,f1,null,value,get,instance,with,forwarded,fields,f0,f1,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1447780907;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		@SuppressWarnings("serial")_		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K, K>, Tuple3<K, K, NullValue>>() {__					private static final long serialVersionUID = -2981792951286476970L___					public Tuple3<K, K, NullValue> map(Tuple2<K, K> edge) {_						return new Tuple3<K, K, NullValue>(edge.f0, edge.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")____		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,suppress,warnings,serial,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,private,static,final,long,serial,version,uid,2981792951286476970l,public,tuple3,k,k,null,value,map,tuple2,k,k,edge,return,new,tuple3,k,k,null,value,edge,f0,edge,f1,null,value,get,instance,with,forwarded,fields,f0,f1,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1452884884;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K, K>, Tuple3<K, K, NullValue>>() {__					private static final long serialVersionUID = -2981792951286476970L___					public Tuple3<K, K, NullValue> map(Tuple2<K, K> edge) {_						return new Tuple3<K, K, NullValue>(edge.f0, edge.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")____		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,private,static,final,long,serial,version,uid,2981792951286476970l,public,tuple3,k,k,null,value,map,tuple2,k,k,edge,return,new,tuple3,k,k,null,value,edge,f0,edge,f1,null,value,get,instance,with,forwarded,fields,f0,f1,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1461669017;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K, K>, Tuple3<K, K, NullValue>>() {__					private static final long serialVersionUID = -2981792951286476970L___					public Tuple3<K, K, NullValue> map(Tuple2<K, K> edge) {_						return new Tuple3<K, K, NullValue>(edge.f0, edge.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")____		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,private,static,final,long,serial,version,uid,2981792951286476970l,public,tuple3,k,k,null,value,map,tuple2,k,k,edge,return,new,tuple3,k,k,null,value,edge,f0,edge,f1,null,value,get,instance,with,forwarded,fields,f0,f1,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1475517578;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edges input file cannot be null!")__		}__		DataSet<Tuple3<K, K, NullValue>> edges = edgeReader.types(vertexKey, vertexKey)_				.map(new MapFunction<Tuple2<K, K>, Tuple3<K, K, NullValue>>() {__					private static final long serialVersionUID = -2981792951286476970L___					public Tuple3<K, K, NullValue> map(Tuple2<K, K> edge) {_						return new Tuple3<>(edge.f0, edge.f1, NullValue.getInstance())__					}_				}).withForwardedFields("f0_f1")___		return Graph.fromTupleDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edges,input,file,cannot,be,null,data,set,tuple3,k,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,map,new,map,function,tuple2,k,k,tuple3,k,k,null,value,private,static,final,long,serial,version,uid,2981792951286476970l,public,tuple3,k,k,null,value,map,tuple2,k,k,edge,return,new,tuple3,edge,f0,edge,f1,null,value,get,instance,with,forwarded,fields,f0,f1,return,graph,from,tuple,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1477509530;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<K>())_				.name("Type conversion")___		return Graph.fromDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,k,name,type,conversion,return,graph,from,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1495653033;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<K>())_				.name("Type conversion")___		return Graph.fromDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,k,name,type,conversion,return,graph,from,data,set,edges,execution,context
GraphCsvReader -> public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey);1501532946;Creates a Graph from CSV input without vertex values or edge values._@param vertexKey the type of the vertex IDs_@return a Graph where the vertex IDs are read from the edges input file.;public <K> Graph<K, NullValue, NullValue> keyType(Class<K> vertexKey) {__		if (edgeReader == null) {_			throw new RuntimeException("The edge input file cannot be null!")__		}__		DataSet<Edge<K, NullValue>> edges = edgeReader_			.types(vertexKey, vertexKey)_				.name(GraphCsvReader.class.getName())_			.map(new Tuple2ToEdgeMap<>())_				.name("Type conversion")___		return Graph.fromDataSet(edges, executionContext)__	};creates,a,graph,from,csv,input,without,vertex,values,or,edge,values,param,vertex,key,the,type,of,the,vertex,ids,return,a,graph,where,the,vertex,ids,are,read,from,the,edges,input,file;public,k,graph,k,null,value,null,value,key,type,class,k,vertex,key,if,edge,reader,null,throw,new,runtime,exception,the,edge,input,file,cannot,be,null,data,set,edge,k,null,value,edges,edge,reader,types,vertex,key,vertex,key,name,graph,csv,reader,class,get,name,map,new,tuple2to,edge,map,name,type,conversion,return,graph,from,data,set,edges,execution,context
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1444297686;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1447780907;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1452884884;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1461669017;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1475517578;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1477509530;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1495653033;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
GraphCsvReader -> public GraphCsvReader ignoreCommentsEdges(String commentPrefix);1501532946;Configures the string that starts comments for the Edge Csv Reader._By default comments will be treated as invalid lines._This function only recognizes comments which start at the beginning of the line!__@param commentPrefix The string that starts the comments._@return The GraphCSVReader instance itself, to allow for fluent function chaining.;public GraphCsvReader ignoreCommentsEdges(String commentPrefix) {_		this.edgeReader.ignoreComments(commentPrefix)__		return this__	};configures,the,string,that,starts,comments,for,the,edge,csv,reader,by,default,comments,will,be,treated,as,invalid,lines,this,function,only,recognizes,comments,which,start,at,the,beginning,of,the,line,param,comment,prefix,the,string,that,starts,the,comments,return,the,graph,csvreader,instance,itself,to,allow,for,fluent,function,chaining;public,graph,csv,reader,ignore,comments,edges,string,comment,prefix,this,edge,reader,ignore,comments,comment,prefix,return,this
