# id;timestamp;commentText;codeText;commentWords;codeWords
GridGraph -> public GridGraph(ExecutionEnvironment env);1458075542;An undirected {@link Graph} connecting vertices in a regular tiling in one or more dimensions.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,link,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1484681137;An undirected {@link Graph} connecting vertices in a regular tiling in one or more dimensions.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,link,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1488305420;An undirected {@link Graph} connecting vertices in a regular tiling in one or more dimensions.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,link,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1493134568;An undirected {@link Graph} connecting vertices in a regular tiling in one or more dimensions.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,link,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1493296913;An undirected {@code Graph} connecting vertices in a regular tiling in_one or more dimensions and where the endpoints are optionally connected.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,code,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,and,where,the,endpoints,are,optionally,connected,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1494261919;An undirected {@code Graph} connecting vertices in a regular tiling in_one or more dimensions and where the endpoints are optionally connected.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,code,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,and,where,the,endpoints,are,optionally,connected,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1495653033;An undirected {@code Graph} connecting vertices in a regular tiling in_one or more dimensions and where the endpoints are optionally connected.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,code,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,and,where,the,endpoints,are,optionally,connected,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph(ExecutionEnvironment env);1501064632;An undirected {@code Graph} connecting vertices in a regular tiling in_one or more dimensions and where the endpoints are optionally connected.__@param env the Flink execution environment;public GridGraph(ExecutionEnvironment env) {_		this.env = env__	};an,undirected,code,graph,connecting,vertices,in,a,regular,tiling,in,one,or,more,dimensions,and,where,the,endpoints,are,optionally,connected,param,env,the,flink,execution,environment;public,grid,graph,execution,environment,env,this,env,env
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1458075542;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		if (size <= 1) {_			throw new IllegalArgumentException("Dimension size must be greater than 1")__		}__		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,if,size,1,throw,new,illegal,argument,exception,dimension,size,must,be,greater,than,1,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1484681137;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		if (size <= 1) {_			throw new IllegalArgumentException("Dimension size must be greater than 1")__		}__		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,if,size,1,throw,new,illegal,argument,exception,dimension,size,must,be,greater,than,1,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1488305420;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1493134568;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1493296913;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1494261919;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1495653033;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount *= size___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
GridGraph -> public GridGraph addDimension(long size, boolean wrapEndpoints);1501064632;Required configuration for each dimension of the graph.__@param size number of vertices_ dimensions of size 1 are prohibited due to having no effect_on the generated graph_@param wrapEndpoints whether to connect first and last vertices_ this has no effect on_dimensions of size 2_@return this;public GridGraph addDimension(long size, boolean wrapEndpoints) {_		Preconditions.checkArgument(size >= 2, "Dimension size must be at least 2")___		vertexCount = Math.multiplyExact(vertexCount, size)___		_		if (size == 2) {_			wrapEndpoints = false__		}__		dimensions.add(new Tuple2<>(size, wrapEndpoints))___		return this__	};required,configuration,for,each,dimension,of,the,graph,param,size,number,of,vertices,dimensions,of,size,1,are,prohibited,due,to,having,no,effect,on,the,generated,graph,param,wrap,endpoints,whether,to,connect,first,and,last,vertices,this,has,no,effect,on,dimensions,of,size,2,return,this;public,grid,graph,add,dimension,long,size,boolean,wrap,endpoints,preconditions,check,argument,size,2,dimension,size,must,be,at,least,2,vertex,count,math,multiply,exact,vertex,count,size,if,size,2,wrap,endpoints,false,dimensions,add,new,tuple2,size,wrap,endpoints,return,this
