# id;timestamp;commentText;codeText;commentWords;codeWords
VertexMetrics -> Result -> public long getNumberOfTriplets();1465316775;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1466789678;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1472047512;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1477325645;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1478616101;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1478792792;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1485867764;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1489068942;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1495819075;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1499777483;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfTriplets();1505445925;Get the number of triplets.__@return number of triplets;public long getNumberOfTriplets() {_			return tripletCount__		};get,the,number,of,triplets,return,number,of,triplets;public,long,get,number,of,triplets,return,triplet,count
VertexMetrics -> Result -> public long getNumberOfVertices();1465316775;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1466789678;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1472047512;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1477325645;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1478616101;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1478792792;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1485867764;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1489068942;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1495819075;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1499777483;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public long getNumberOfVertices();1505445925;Get the number of vertices.__@return number of vertices;public long getNumberOfVertices() {_			return vertexCount__		};get,the,number,of,vertices,return,number,of,vertices;public,long,get,number,of,vertices,return,vertex,count
VertexMetrics -> Result -> public double getDensity();1489068942;Get the density, the ratio of actual to potential edges between vertices.__A result of {@code Float.NaN} is returned for a graph with fewer than_two vertices for which the number of edges is zero.__@return density;public double getDensity() {_			return vertexCount <= 1 ? Double.NaN : edgeCount / (double)(vertexCount*(vertexCount-1)/2)__		};get,the,density,the,ratio,of,actual,to,potential,edges,between,vertices,a,result,of,code,float,na,n,is,returned,for,a,graph,with,fewer,than,two,vertices,for,which,the,number,of,edges,is,zero,return,density;public,double,get,density,return,vertex,count,1,double,na,n,edge,count,double,vertex,count,vertex,count,1,2
VertexMetrics -> Result -> public double getDensity();1495819075;Get the density, the ratio of actual to potential edges between vertices.__<p>A result of {@code Float.NaN} is returned for a graph with fewer than_two vertices for which the number of edges is zero.__@return density;public double getDensity() {_			return vertexCount <= 1 ? Double.NaN : edgeCount / (double) (vertexCount * (vertexCount - 1) / 2)__		};get,the,density,the,ratio,of,actual,to,potential,edges,between,vertices,p,a,result,of,code,float,na,n,is,returned,for,a,graph,with,fewer,than,two,vertices,for,which,the,number,of,edges,is,zero,return,density;public,double,get,density,return,vertex,count,1,double,na,n,edge,count,double,vertex,count,vertex,count,1,2
VertexMetrics -> Result -> public double getDensity();1499777483;Get the density, the ratio of actual to potential edges between vertices.__<p>A result of {@code Float.NaN} is returned for a graph with fewer than_two vertices for which the number of edges is zero.__@return density;public double getDensity() {_			return vertexCount <= 1 ? Double.NaN : edgeCount / (double) (vertexCount * (vertexCount - 1) / 2)__		};get,the,density,the,ratio,of,actual,to,potential,edges,between,vertices,p,a,result,of,code,float,na,n,is,returned,for,a,graph,with,fewer,than,two,vertices,for,which,the,number,of,edges,is,zero,return,density;public,double,get,density,return,vertex,count,1,double,na,n,edge,count,double,vertex,count,vertex,count,1,2
VertexMetrics -> Result -> public double getDensity();1505445925;Get the density, the ratio of actual to potential edges between vertices.__<p>A result of {@code Float.NaN} is returned for a graph with fewer than_two vertices for which the number of edges is zero.__@return density;public double getDensity() {_			return vertexCount <= 1 ? Double.NaN : edgeCount / (double) (vertexCount * (vertexCount - 1) / 2)__		};get,the,density,the,ratio,of,actual,to,potential,edges,between,vertices,p,a,result,of,code,float,na,n,is,returned,for,a,graph,with,fewer,than,two,vertices,for,which,the,number,of,edges,is,zero,return,density;public,double,get,density,return,vertex,count,1,double,na,n,edge,count,double,vertex,count,vertex,count,1,2
VertexMetrics -> Result -> public double getAverageDegree();1489068942;Get the average degree, the average number of edges per vertex.__A result of {@code Float.NaN} is returned for an empty graph for_which both the number of edges and number of vertices is zero.__@return average degree;public double getAverageDegree() {_			_			return vertexCount == 0 ? Double.NaN : 2 * edgeCount / (double)vertexCount__		};get,the,average,degree,the,average,number,of,edges,per,vertex,a,result,of,code,float,na,n,is,returned,for,an,empty,graph,for,which,both,the,number,of,edges,and,number,of,vertices,is,zero,return,average,degree;public,double,get,average,degree,return,vertex,count,0,double,na,n,2,edge,count,double,vertex,count
VertexMetrics -> Result -> public double getAverageDegree();1495819075;Get the average degree, the average number of edges per vertex.__<p>A result of {@code Float.NaN} is returned for an empty graph for_which both the number of edges and number of vertices is zero.__@return average degree;public double getAverageDegree() {_			_			return vertexCount == 0 ? Double.NaN : 2 * edgeCount / (double) vertexCount__		};get,the,average,degree,the,average,number,of,edges,per,vertex,p,a,result,of,code,float,na,n,is,returned,for,an,empty,graph,for,which,both,the,number,of,edges,and,number,of,vertices,is,zero,return,average,degree;public,double,get,average,degree,return,vertex,count,0,double,na,n,2,edge,count,double,vertex,count
VertexMetrics -> Result -> public double getAverageDegree();1499777483;Get the average degree, the average number of edges per vertex.__<p>A result of {@code Float.NaN} is returned for an empty graph for_which both the number of edges and number of vertices is zero.__@return average degree;public double getAverageDegree() {_			_			return vertexCount == 0 ? Double.NaN : 2 * edgeCount / (double) vertexCount__		};get,the,average,degree,the,average,number,of,edges,per,vertex,p,a,result,of,code,float,na,n,is,returned,for,an,empty,graph,for,which,both,the,number,of,edges,and,number,of,vertices,is,zero,return,average,degree;public,double,get,average,degree,return,vertex,count,0,double,na,n,2,edge,count,double,vertex,count
VertexMetrics -> Result -> public double getAverageDegree();1505445925;Get the average degree, the average number of edges per vertex.__<p>A result of {@code Float.NaN} is returned for an empty graph for_which both the number of edges and number of vertices is zero.__@return average degree;public double getAverageDegree() {_			_			return vertexCount == 0 ? Double.NaN : 2 * edgeCount / (double) vertexCount__		};get,the,average,degree,the,average,number,of,edges,per,vertex,p,a,result,of,code,float,na,n,is,returned,for,an,empty,graph,for,which,both,the,number,of,edges,and,number,of,vertices,is,zero,return,average,degree;public,double,get,average,degree,return,vertex,count,0,double,na,n,2,edge,count,double,vertex,count
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1465316775;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1466789678;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1472047512;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1477325645;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1478616101;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1478792792;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1485867764;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1489068942;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1495819075;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1499777483;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1505445925;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public VertexMetrics<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,vertex,metrics,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
VertexMetrics -> Result -> public long getMaximumDegree();1472047512;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1477325645;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1478616101;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1478792792;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1485867764;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1489068942;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1495819075;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1499777483;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getMaximumDegree();1505445925;Get the maximum degree.__@return maximum degree;public long getMaximumDegree() {_			return maximumDegree__		};get,the,maximum,degree,return,maximum,degree;public,long,get,maximum,degree,return,maximum,degree
VertexMetrics -> Result -> public long getNumberOfEdges();1465316775;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1466789678;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1472047512;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1477325645;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1478616101;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1478792792;Get the number of edges.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1485867764;Get the number of edges. Each edge is counted once even though Gelly_stores undirected edges twice, once in each direction.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,each,edge,is,counted,once,even,though,gelly,stores,undirected,edges,twice,once,in,each,direction,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1489068942;Get the number of edges. Each edge is counted once even though Gelly_stores undirected edges twice, once in each direction.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,each,edge,is,counted,once,even,though,gelly,stores,undirected,edges,twice,once,in,each,direction,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1495819075;Get the number of edges. Each edge is counted once even though Gelly_stores undirected edges twice, once in each direction.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,each,edge,is,counted,once,even,though,gelly,stores,undirected,edges,twice,once,in,each,direction,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1499777483;Get the number of edges. Each edge is counted once even though Gelly_stores undirected edges twice, once in each direction.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,each,edge,is,counted,once,even,though,gelly,stores,undirected,edges,twice,once,in,each,direction,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getNumberOfEdges();1505445925;Get the number of edges. Each edge is counted once even though Gelly_stores undirected edges twice, once in each direction.__@return number of edges;public long getNumberOfEdges() {_			return edgeCount__		};get,the,number,of,edges,each,edge,is,counted,once,even,though,gelly,stores,undirected,edges,twice,once,in,each,direction,return,number,of,edges;public,long,get,number,of,edges,return,edge,count
VertexMetrics -> Result -> public long getMaximumTriplets();1472047512;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1477325645;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1478616101;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1478792792;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1485867764;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1489068942;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1495819075;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1499777483;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> Result -> public long getMaximumTriplets();1505445925;Get the maximum triplets.__@return maximum triplets;public long getMaximumTriplets() {_			return maximumTriplets__		};get,the,maximum,triplets,return,maximum,triplets;public,long,get,maximum,triplets,return,maximum,triplets
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1465316775;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1466789678;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1472047512;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1477325645;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1478616101;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1478792792;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1485867764;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1489068942;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setParallelism(int parallelism);1495819075;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public VertexMetrics<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,vertex,metrics,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1465316775;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1466789678;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1472047512;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1477325645;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1478616101;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1478792792;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1485867764;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1489068942;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1495819075;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1499777483;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1505445925;By default only the edge set is processed for the computation of degree._When this flag is set an additional join is performed against the vertex_set in order to output vertices with a degree of zero.__@param includeZeroDegreeVertices whether to output vertices with a_degree of zero_@return this;public VertexMetrics<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};by,default,only,the,edge,set,is,processed,for,the,computation,of,degree,when,this,flag,is,set,an,additional,join,is,performed,against,the,vertex,set,in,order,to,output,vertices,with,a,degree,of,zero,param,include,zero,degree,vertices,whether,to,output,vertices,with,a,degree,of,zero,return,this;public,vertex,metrics,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
VertexMetrics -> Result -> public float getAverageDegree();1477325645;Get the average degree.__@return average degree;public float getAverageDegree() {_			return edgeCount / (float)vertexCount__		};get,the,average,degree,return,average,degree;public,float,get,average,degree,return,edge,count,float,vertex,count
VertexMetrics -> Result -> public float getAverageDegree();1478616101;Get the average degree.__@return average degree;public float getAverageDegree() {_			return edgeCount / (float)vertexCount__		};get,the,average,degree,return,average,degree;public,float,get,average,degree,return,edge,count,float,vertex,count
VertexMetrics -> Result -> public float getAverageDegree();1478792792;Get the average degree.__@return average degree;public float getAverageDegree() {_			return edgeCount / (float)vertexCount__		};get,the,average,degree,return,average,degree;public,float,get,average,degree,return,edge,count,float,vertex,count
VertexMetrics -> Result -> public float getAverageDegree();1485867764;Get the average degree, the average number of edges per vertex.__A result of {@code Float.NaN} is returned for an empty graph for_which both the number of edges and number of vertices is zero.__@return average degree;public float getAverageDegree() {_			_			return vertexCount == 0 ? Float.NaN : 2 * edgeCount / (float)vertexCount__		};get,the,average,degree,the,average,number,of,edges,per,vertex,a,result,of,code,float,na,n,is,returned,for,an,empty,graph,for,which,both,the,number,of,edges,and,number,of,vertices,is,zero,return,average,degree;public,float,get,average,degree,return,vertex,count,0,float,na,n,2,edge,count,float,vertex,count
VertexMetrics -> VertexMetricsHelper -> public VertexMetricsHelper(String id);1465316775;This helper class collects vertex metrics by scanning over and_discarding elements from the given DataSet.__The unique id is required because Flink's accumulator namespace is_among all operators.__@param id unique string used for accumulator names;public VertexMetricsHelper(String id) {_			this.id = id__		};this,helper,class,collects,vertex,metrics,by,scanning,over,and,discarding,elements,from,the,given,data,set,the,unique,id,is,required,because,flink,s,accumulator,namespace,is,among,all,operators,param,id,unique,string,used,for,accumulator,names;public,vertex,metrics,helper,string,id,this,id,id
VertexMetrics -> VertexMetricsHelper -> public VertexMetricsHelper(String id);1466789678;This helper class collects vertex metrics by scanning over and_discarding elements from the given DataSet.__The unique id is required because Flink's accumulator namespace is_among all operators.__@param id unique string used for accumulator names;public VertexMetricsHelper(String id) {_			this.id = id__		};this,helper,class,collects,vertex,metrics,by,scanning,over,and,discarding,elements,from,the,given,data,set,the,unique,id,is,required,because,flink,s,accumulator,namespace,is,among,all,operators,param,id,unique,string,used,for,accumulator,names;public,vertex,metrics,helper,string,id,this,id,id
VertexMetrics -> VertexMetricsHelper -> public VertexMetricsHelper(String id);1472047512;This helper class collects vertex metrics by scanning over and_discarding elements from the given DataSet.__The unique id is required because Flink's accumulator namespace is_shared among all operators.__@param id unique string used for accumulator names;public VertexMetricsHelper(String id) {_			this.id = id__		};this,helper,class,collects,vertex,metrics,by,scanning,over,and,discarding,elements,from,the,given,data,set,the,unique,id,is,required,because,flink,s,accumulator,namespace,is,shared,among,all,operators,param,id,unique,string,used,for,accumulator,names;public,vertex,metrics,helper,string,id,this,id,id
VertexMetrics -> VertexMetricsHelper -> public VertexMetricsHelper(String id);1477325645;This helper class collects vertex metrics by scanning over and_discarding elements from the given DataSet.__The unique id is required because Flink's accumulator namespace is_shared among all operators.__@param id unique string used for accumulator names;public VertexMetricsHelper(String id) {_			this.id = id__		};this,helper,class,collects,vertex,metrics,by,scanning,over,and,discarding,elements,from,the,given,data,set,the,unique,id,is,required,because,flink,s,accumulator,namespace,is,shared,among,all,operators,param,id,unique,string,used,for,accumulator,names;public,vertex,metrics,helper,string,id,this,id,id
