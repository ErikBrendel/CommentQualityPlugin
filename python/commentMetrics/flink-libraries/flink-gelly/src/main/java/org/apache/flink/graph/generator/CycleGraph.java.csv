# id;timestamp;commentText;codeText;commentWords;codeWords
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1458075542;An undirected {@link Graph} where all edges form a single cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,this,env,env,this,vertex,count,vertex,count
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1484681137;An undirected {@link Graph} where all edges form a single cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,this,env,env,this,vertex,count,vertex,count
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1488305420;An undirected {@link Graph} where all edges form a single cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1494261919;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to adjacent vertices v<sub>(i+1)%n</sub> and_v<sub>(i-1)%n</sub>.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,adjacent,vertices,v,sub,i,1,n,sub,and,v,sub,i,1,n,sub,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1495653033;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to adjacent vertices v<sub>(i+1)%n</sub> and_v<sub>(i-1)%n</sub>.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,adjacent,vertices,v,sub,i,1,n,sub,and,v,sub,i,1,n,sub,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
CycleGraph -> public CycleGraph(ExecutionEnvironment env, long vertexCount);1501064632;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> is connected to adjacent vertices v<sub>(i+1)%n</sub> and_v<sub>(i-1)%n</sub>.__@param env the Flink execution environment_@param vertexCount number of vertices;public CycleGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,is,connected,to,adjacent,vertices,v,sub,i,1,n,sub,and,v,sub,i,1,n,sub,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,cycle,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
