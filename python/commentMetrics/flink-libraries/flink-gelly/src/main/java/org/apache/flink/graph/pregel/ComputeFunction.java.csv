# id;timestamp;commentText;codeText;commentWords;codeWords
ComputeFunction -> public final void sendMessageToAllNeighbors(Message m);1458583829;Sends the given message to all vertices that are targets of an edge of the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__@param m The message to send.;public final void sendMessageToAllNeighbors(Message m) {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()'"_					+ "exactly once.")__		}_		_		edgesUsed = true___		outMsg.setField(m, 1)__		_		while (edges.hasNext()) {_			Tuple next = (Tuple) edges.next()__			outMsg.setField(next.getField(1), 0)__			out.collect(Either.Right(outMsg))__		}_	};sends,the,given,message,to,all,vertices,that,are,targets,of,an,edge,of,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,param,m,the,message,to,send;public,final,void,send,message,to,all,neighbors,message,m,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,out,msg,set,field,m,1,while,edges,has,next,tuple,next,tuple,edges,next,out,msg,set,field,next,get,field,1,0,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageToAllNeighbors(Message m);1458583829;Sends the given message to all vertices that adjacent to the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__@param m The message to send.;public final void sendMessageToAllNeighbors(Message m) {_		verifyEdgeUsage()__		outMsg.setField(m, 1)__		while (edges.hasNext()) {_			Tuple next = (Tuple) edges.next()__			outMsg.setField(next.getField(1), 0)__			out.collect(Either.Right(outMsg))__		}_	};sends,the,given,message,to,all,vertices,that,adjacent,to,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,param,m,the,message,to,send;public,final,void,send,message,to,all,neighbors,message,m,verify,edge,usage,out,msg,set,field,m,1,while,edges,has,next,tuple,next,tuple,edges,next,out,msg,set,field,next,get,field,1,0,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageToAllNeighbors(Message m);1475684776;Sends the given message to all vertices that adjacent to the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__@param m The message to send.;public final void sendMessageToAllNeighbors(Message m) {_		verifyEdgeUsage()__		outMsg.setField(m, 1)__		while (edges.hasNext()) {_			Tuple next = edges.next()__			outMsg.setField(next.getField(1), 0)__			out.collect(Either.Right(outMsg))__		}_	};sends,the,given,message,to,all,vertices,that,adjacent,to,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,param,m,the,message,to,send;public,final,void,send,message,to,all,neighbors,message,m,verify,edge,usage,out,msg,set,field,m,1,while,edges,has,next,tuple,next,edges,next,out,msg,set,field,next,get,field,1,0,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageToAllNeighbors(Message m);1475685606;Sends the given message to all vertices that adjacent to the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__@param m The message to send.;public final void sendMessageToAllNeighbors(Message m) {_		verifyEdgeUsage()__		outMsg.f1 = m__		while (edges.hasNext()) {_			Tuple next = edges.next()__			outMsg.f0 = next.getField(1)__			out.collect(Either.Right(outMsg))__		}_	};sends,the,given,message,to,all,vertices,that,adjacent,to,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,param,m,the,message,to,send;public,final,void,send,message,to,all,neighbors,message,m,verify,edge,usage,out,msg,f1,m,while,edges,has,next,tuple,next,edges,next,out,msg,f0,next,get,field,1,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageToAllNeighbors(Message m);1495819075;Sends the given message to all vertices that adjacent to the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__@param m The message to send.;public final void sendMessageToAllNeighbors(Message m) {_		verifyEdgeUsage()__		outMsg.f1 = m__		while (edges.hasNext()) {_			Tuple next = edges.next()__			outMsg.f0 = next.getField(1)__			out.collect(Either.Right(outMsg))__		}_	};sends,the,given,message,to,all,vertices,that,adjacent,to,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,param,m,the,message,to,send;public,final,void,send,message,to,all,neighbors,message,m,verify,edge,usage,out,msg,f1,m,while,edges,has,next,tuple,next,edges,next,out,msg,f0,next,get,field,1,out,collect,either,right,out,msg
ComputeFunction -> public final <T extends Aggregator<?>> T getIterationAggregator(String name);1458583829;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public final <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,final,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
ComputeFunction -> public final <T extends Aggregator<?>> T getIterationAggregator(String name);1458583829;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or {@code null}, if no aggregator was registered.;public final <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,code,null,if,no,aggregator,was,registered;public,final,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
ComputeFunction -> public final <T extends Aggregator<?>> T getIterationAggregator(String name);1475684776;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or {@code null}, if no aggregator was registered.;public final <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,code,null,if,no,aggregator,was,registered;public,final,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
ComputeFunction -> public final <T extends Aggregator<?>> T getIterationAggregator(String name);1475685606;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or {@code null}, if no aggregator was registered.;public final <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,code,null,if,no,aggregator,was,registered;public,final,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
ComputeFunction -> public final <T extends Aggregator<?>> T getIterationAggregator(String name);1495819075;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or {@code null}, if no aggregator was registered.;public final <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,code,null,if,no,aggregator,was,registered;public,final,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
ComputeFunction -> public void postSuperstep() throws Exception;1458583829;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ComputeFunction -> public void postSuperstep() throws Exception;1458583829;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ComputeFunction -> public void postSuperstep() throws Exception;1475684776;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ComputeFunction -> public void postSuperstep() throws Exception;1475685606;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ComputeFunction -> public void postSuperstep() throws Exception;1495819075;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ComputeFunction -> public final void sendMessageTo(K target, Message m);1458583829;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public final void sendMessageTo(K target, Message m) {__		outMsg.setField(target, 0)__		outMsg.setField(m, 1)___		out.collect(Either.Right(outMsg))__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,final,void,send,message,to,k,target,message,m,out,msg,set,field,target,0,out,msg,set,field,m,1,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageTo(K target, Message m);1458583829;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public final void sendMessageTo(K target, Message m) {__		outMsg.setField(target, 0)__		outMsg.setField(m, 1)___		out.collect(Either.Right(outMsg))__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,final,void,send,message,to,k,target,message,m,out,msg,set,field,target,0,out,msg,set,field,m,1,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageTo(K target, Message m);1475684776;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public final void sendMessageTo(K target, Message m) {__		outMsg.setField(target, 0)__		outMsg.setField(m, 1)___		out.collect(Either.Right(outMsg))__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,final,void,send,message,to,k,target,message,m,out,msg,set,field,target,0,out,msg,set,field,m,1,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageTo(K target, Message m);1475685606;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public final void sendMessageTo(K target, Message m) {__		outMsg.f0 = target__		outMsg.f1 = m___		out.collect(Either.Right(outMsg))__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,final,void,send,message,to,k,target,message,m,out,msg,f0,target,out,msg,f1,m,out,collect,either,right,out,msg
ComputeFunction -> public final void sendMessageTo(K target, Message m);1495819075;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public final void sendMessageTo(K target, Message m) {__		outMsg.f0 = target__		outMsg.f1 = m___		out.collect(Either.Right(outMsg))__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,final,void,send,message,to,k,target,message,m,out,msg,f0,target,out,msg,f1,m,out,collect,either,right,out,msg
ComputeFunction -> public final int getSuperstepNumber();1458583829;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public final int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,final,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ComputeFunction -> public final int getSuperstepNumber();1458583829;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public final int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,final,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ComputeFunction -> public final int getSuperstepNumber();1475684776;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public final int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,final,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ComputeFunction -> public final int getSuperstepNumber();1475685606;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public final int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,final,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ComputeFunction -> public final int getSuperstepNumber();1495819075;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public final int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,final,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ComputeFunction -> public final Iterable<Edge<K, EV>> getEdges();1458583829;Gets an {@link java.lang.Iterable} with all out-going edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__@return An iterator with all edges.;public final Iterable<Edge<K, EV>> getEdges() {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()' exactly once.")__		}_		edgesUsed = true__		this.edgeIterator.set((Iterator<Edge<K, EV>>) edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,out,going,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,return,an,iterator,with,all,edges;public,final,iterable,edge,k,ev,get,edges,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,this,edge,iterator,set,iterator,edge,k,ev,edges,return,this,edge,iterator
ComputeFunction -> public final Iterable<Edge<K, EV>> getEdges();1458583829;Gets an {@link java.lang.Iterable} with all out-going edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__@return An iterator with all edges.;public final Iterable<Edge<K, EV>> getEdges() {_		verifyEdgeUsage()__		this.edgeIterator.set((Iterator<Edge<K, EV>>) edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,out,going,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,return,an,iterator,with,all,edges;public,final,iterable,edge,k,ev,get,edges,verify,edge,usage,this,edge,iterator,set,iterator,edge,k,ev,edges,return,this,edge,iterator
ComputeFunction -> public final Iterable<Edge<K, EV>> getEdges();1475684776;Gets an {@link java.lang.Iterable} with all out-going edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__@return An iterator with all edges.;public final Iterable<Edge<K, EV>> getEdges() {_		verifyEdgeUsage()__		this.edgeIterator.set(edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,out,going,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,return,an,iterator,with,all,edges;public,final,iterable,edge,k,ev,get,edges,verify,edge,usage,this,edge,iterator,set,edges,return,this,edge,iterator
ComputeFunction -> public final Iterable<Edge<K, EV>> getEdges();1475685606;Gets an {@link java.lang.Iterable} with all out-going edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__@return An iterator with all edges.;public final Iterable<Edge<K, EV>> getEdges() {_		verifyEdgeUsage()__		this.edgeIterator.set(edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,out,going,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,return,an,iterator,with,all,edges;public,final,iterable,edge,k,ev,get,edges,verify,edge,usage,this,edge,iterator,set,edges,return,this,edge,iterator
ComputeFunction -> public final Iterable<Edge<K, EV>> getEdges();1495819075;Gets an {@link java.lang.Iterable} with all out-going edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__@return An iterator with all edges.;public final Iterable<Edge<K, EV>> getEdges() {_		verifyEdgeUsage()__		this.edgeIterator.set(edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,out,going,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,return,an,iterator,with,all,edges;public,final,iterable,edge,k,ev,get,edges,verify,edge,usage,this,edge,iterator,set,edges,return,this,edge,iterator
ComputeFunction -> public final void setNewVertexValue(VV newValue);1458583829;Sets the new value of this vertex.__This should be called at most once per ComputeFunction.__@param newValue The new vertex value.;public final void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true___		outVertex.setField(newValue, 1)___		out.collect(Either.Left(outVertex))__	};sets,the,new,value,of,this,vertex,this,should,be,called,at,most,once,per,compute,function,param,new,value,the,new,vertex,value;public,final,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,out,vertex,set,field,new,value,1,out,collect,either,left,out,vertex
ComputeFunction -> public final void setNewVertexValue(VV newValue);1458583829;Sets the new value of this vertex.__This should be called at most once per ComputeFunction.__@param newValue The new vertex value.;public final void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true___		outVertex.setField(newValue, 1)___		out.collect(Either.Left(outVertex))__	};sets,the,new,value,of,this,vertex,this,should,be,called,at,most,once,per,compute,function,param,new,value,the,new,vertex,value;public,final,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,out,vertex,set,field,new,value,1,out,collect,either,left,out,vertex
ComputeFunction -> public final void setNewVertexValue(VV newValue);1475684776;Sets the new value of this vertex.__This should be called at most once per ComputeFunction.__@param newValue The new vertex value.;public final void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true___		outVertex.setField(newValue, 1)___		out.collect(Either.Left(outVertex))__	};sets,the,new,value,of,this,vertex,this,should,be,called,at,most,once,per,compute,function,param,new,value,the,new,vertex,value;public,final,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,out,vertex,set,field,new,value,1,out,collect,either,left,out,vertex
ComputeFunction -> public final void setNewVertexValue(VV newValue);1475685606;Sets the new value of this vertex.__This should be called at most once per ComputeFunction.__@param newValue The new vertex value.;public final void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true___		outVertex.f1 = newValue___		out.collect(Either.Left(outVertex))__	};sets,the,new,value,of,this,vertex,this,should,be,called,at,most,once,per,compute,function,param,new,value,the,new,vertex,value;public,final,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,out,vertex,f1,new,value,out,collect,either,left,out,vertex
ComputeFunction -> public final void setNewVertexValue(VV newValue);1495819075;Sets the new value of this vertex.__<p>This should be called at most once per ComputeFunction.__@param newValue The new vertex value.;public final void setNewVertexValue(VV newValue) {_		if (setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true___		outVertex.f1 = newValue___		out.collect(Either.Left(outVertex))__	};sets,the,new,value,of,this,vertex,p,this,should,be,called,at,most,once,per,compute,function,param,new,value,the,new,vertex,value;public,final,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,out,vertex,f1,new,value,out,collect,either,left,out,vertex
ComputeFunction -> public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;1458583829;This method is invoked once per superstep, for each active vertex._A vertex is active during a superstep, if at least one message was produced for it,_in the previous superstep. During the first superstep, all vertices are active._<p>_This method can iterate over all received messages, set the new vertex value, and_send messages to other vertices (which will be delivered in the next superstep).__@param vertex The vertex executing this function_@param messages The messages that were sent to this vertex in the previous superstep_@throws Exception;public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,active,vertex,a,vertex,is,active,during,a,superstep,if,at,least,one,message,was,produced,for,it,in,the,previous,superstep,during,the,first,superstep,all,vertices,are,active,p,this,method,can,iterate,over,all,received,messages,set,the,new,vertex,value,and,send,messages,to,other,vertices,which,will,be,delivered,in,the,next,superstep,param,vertex,the,vertex,executing,this,function,param,messages,the,messages,that,were,sent,to,this,vertex,in,the,previous,superstep,throws,exception;public,abstract,void,compute,vertex,k,vv,vertex,message,iterator,message,messages,throws,exception
ComputeFunction -> public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;1458583829;This method is invoked once per superstep, for each active vertex._A vertex is active during a superstep, if at least one message was produced for it,_in the previous superstep. During the first superstep, all vertices are active._<p>_This method can iterate over all received messages, set the new vertex value, and_send messages to other vertices (which will be delivered in the next superstep).__@param vertex The vertex executing this function_@param messages The messages that were sent to this vertex in the previous superstep_@throws Exception;public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,active,vertex,a,vertex,is,active,during,a,superstep,if,at,least,one,message,was,produced,for,it,in,the,previous,superstep,during,the,first,superstep,all,vertices,are,active,p,this,method,can,iterate,over,all,received,messages,set,the,new,vertex,value,and,send,messages,to,other,vertices,which,will,be,delivered,in,the,next,superstep,param,vertex,the,vertex,executing,this,function,param,messages,the,messages,that,were,sent,to,this,vertex,in,the,previous,superstep,throws,exception;public,abstract,void,compute,vertex,k,vv,vertex,message,iterator,message,messages,throws,exception
ComputeFunction -> public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;1475684776;This method is invoked once per superstep, for each active vertex._A vertex is active during a superstep, if at least one message was produced for it,_in the previous superstep. During the first superstep, all vertices are active._<p>_This method can iterate over all received messages, set the new vertex value, and_send messages to other vertices (which will be delivered in the next superstep).__@param vertex The vertex executing this function_@param messages The messages that were sent to this vertex in the previous superstep_@throws Exception;public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,active,vertex,a,vertex,is,active,during,a,superstep,if,at,least,one,message,was,produced,for,it,in,the,previous,superstep,during,the,first,superstep,all,vertices,are,active,p,this,method,can,iterate,over,all,received,messages,set,the,new,vertex,value,and,send,messages,to,other,vertices,which,will,be,delivered,in,the,next,superstep,param,vertex,the,vertex,executing,this,function,param,messages,the,messages,that,were,sent,to,this,vertex,in,the,previous,superstep,throws,exception;public,abstract,void,compute,vertex,k,vv,vertex,message,iterator,message,messages,throws,exception
ComputeFunction -> public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;1475685606;This method is invoked once per superstep, for each active vertex._A vertex is active during a superstep, if at least one message was produced for it,_in the previous superstep. During the first superstep, all vertices are active._<p>_This method can iterate over all received messages, set the new vertex value, and_send messages to other vertices (which will be delivered in the next superstep).__@param vertex The vertex executing this function_@param messages The messages that were sent to this vertex in the previous superstep_@throws Exception;public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,active,vertex,a,vertex,is,active,during,a,superstep,if,at,least,one,message,was,produced,for,it,in,the,previous,superstep,during,the,first,superstep,all,vertices,are,active,p,this,method,can,iterate,over,all,received,messages,set,the,new,vertex,value,and,send,messages,to,other,vertices,which,will,be,delivered,in,the,next,superstep,param,vertex,the,vertex,executing,this,function,param,messages,the,messages,that,were,sent,to,this,vertex,in,the,previous,superstep,throws,exception;public,abstract,void,compute,vertex,k,vv,vertex,message,iterator,message,messages,throws,exception
ComputeFunction -> public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;1495819075;This method is invoked once per superstep, for each active vertex._A vertex is active during a superstep, if at least one message was produced for it,_in the previous superstep. During the first superstep, all vertices are active.__<p>This method can iterate over all received messages, set the new vertex value, and_send messages to other vertices (which will be delivered in the next superstep).__@param vertex The vertex executing this function_@param messages The messages that were sent to this vertex in the previous superstep_@throws Exception;public abstract void compute(Vertex<K, VV> vertex, MessageIterator<Message> messages) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,active,vertex,a,vertex,is,active,during,a,superstep,if,at,least,one,message,was,produced,for,it,in,the,previous,superstep,during,the,first,superstep,all,vertices,are,active,p,this,method,can,iterate,over,all,received,messages,set,the,new,vertex,value,and,send,messages,to,other,vertices,which,will,be,delivered,in,the,next,superstep,param,vertex,the,vertex,executing,this,function,param,messages,the,messages,that,were,sent,to,this,vertex,in,the,previous,superstep,throws,exception;public,abstract,void,compute,vertex,k,vv,vertex,message,iterator,message,messages,throws,exception
ComputeFunction -> public final <T> Collection<T> getBroadcastSet(String name);1458583829;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.VertexCentricConfiguration#addBroadcastSet(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public final <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,vertex,centric,configuration,add,broadcast,set,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,final,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
ComputeFunction -> public final <T> Collection<T> getBroadcastSet(String name);1458583829;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.pregel.VertexCentricConfiguration#addBroadcastSet(String, DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public final <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,pregel,vertex,centric,configuration,add,broadcast,set,string,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,final,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
ComputeFunction -> public final <T> Collection<T> getBroadcastSet(String name);1475684776;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.pregel.VertexCentricConfiguration#addBroadcastSet(String, DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public final <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,pregel,vertex,centric,configuration,add,broadcast,set,string,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,final,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
ComputeFunction -> public final <T> Collection<T> getBroadcastSet(String name);1475685606;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.pregel.VertexCentricConfiguration#addBroadcastSet(String, DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public final <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,pregel,vertex,centric,configuration,add,broadcast,set,string,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,final,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
ComputeFunction -> public final <T> Collection<T> getBroadcastSet(String name);1495819075;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.pregel.VertexCentricConfiguration#addBroadcastSet(String, DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public final <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,pregel,vertex,centric,configuration,add,broadcast,set,string,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,final,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
ComputeFunction -> public final <T extends Value> T getPreviousIterationAggregate(String name);1458583829;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public final <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,final,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
ComputeFunction -> public final <T extends Value> T getPreviousIterationAggregate(String name);1458583829;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public final <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,final,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
ComputeFunction -> public final <T extends Value> T getPreviousIterationAggregate(String name);1475684776;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public final <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,final,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
ComputeFunction -> public final <T extends Value> T getPreviousIterationAggregate(String name);1475685606;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public final <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,final,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
ComputeFunction -> public final <T extends Value> T getPreviousIterationAggregate(String name);1495819075;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public final <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,final,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
ComputeFunction -> public void preSuperstep() throws Exception;1458583829;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ComputeFunction -> public void preSuperstep() throws Exception;1458583829;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ComputeFunction -> public void preSuperstep() throws Exception;1475684776;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ComputeFunction -> public void preSuperstep() throws Exception;1475685606;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ComputeFunction -> public void preSuperstep() throws Exception;1495819075;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
