# id;timestamp;commentText;codeText;commentWords;codeWords
LocalClusteringCoefficient -> Result -> public void setTriangleCount(LongValue triangleCount);1498486910;Set the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@param triangleCount triangle count;public void setTriangleCount(LongValue triangleCount) {_			this.triangleCount = triangleCount__		};set,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,param,triangle,count,triangle,count;public,void,set,triangle,count,long,value,triangle,count,this,triangle,count,triangle,count
LocalClusteringCoefficient -> Result -> public void setTriangleCount(LongValue triangleCount);1498486910;Set the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@param triangleCount triangle count;public void setTriangleCount(LongValue triangleCount) {_			this.triangleCount = triangleCount__		};set,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,param,triangle,count,triangle,count;public,void,set,triangle,count,long,value,triangle,count,this,triangle,count,triangle,count
LocalClusteringCoefficient -> Result -> public void setTriangleCount(LongValue triangleCount);1500078951;Set the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@param triangleCount triangle count;public void setTriangleCount(LongValue triangleCount) {_			this.triangleCount = triangleCount__		};set,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,param,triangle,count,triangle,count;public,void,set,triangle,count,long,value,triangle,count,this,triangle,count,triangle,count
LocalClusteringCoefficient -> Result -> public void setTriangleCount(LongValue triangleCount);1501532946;Set the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@param triangleCount triangle count;public void setTriangleCount(LongValue triangleCount) {_			this.triangleCount = triangleCount__		};set,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,param,triangle,count,triangle,count;public,void,set,triangle,count,long,value,triangle,count,this,triangle,count,triangle,count
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1462819376;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1463493767;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1464172872;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1464173021;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1464291269;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1468503542;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1469043894;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1469452167;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1472831588;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1477498003;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1477509530;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1484681137;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1487885205;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1488305420;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1492096511;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double)neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1495653033;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__<p>A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double) neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,p,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1498486910;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__<p>A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double) neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,p,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1498486910;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__<p>A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double) neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,p,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1500078951;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__<p>A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double) neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,p,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public double getLocalClusteringCoefficientScore();1501532946;Get the local clustering coefficient score. This is computed as the_number of edges between neighbors, equal to the triangle count,_divided by the number of potential edges between neighbors.__<p>A score of {@code Double.NaN} is returned for a vertex with degree 1_for which both the triangle count and number of neighbors are zero.__@return local clustering coefficient score;public double getLocalClusteringCoefficientScore() {_			long degree = getDegree().getValue()__			long neighborPairs = degree * (degree - 1) / 2___			return (neighborPairs == 0) ? Double.NaN : getTriangleCount().getValue() / (double) neighborPairs__		};get,the,local,clustering,coefficient,score,this,is,computed,as,the,number,of,edges,between,neighbors,equal,to,the,triangle,count,divided,by,the,number,of,potential,edges,between,neighbors,p,a,score,of,code,double,na,n,is,returned,for,a,vertex,with,degree,1,for,which,both,the,triangle,count,and,number,of,neighbors,are,zero,return,local,clustering,coefficient,score;public,double,get,local,clustering,coefficient,score,long,degree,get,degree,get,value,long,neighbor,pairs,degree,degree,1,2,return,neighbor,pairs,0,double,na,n,get,triangle,count,get,value,double,neighbor,pairs
LocalClusteringCoefficient -> Result -> public Result();1462819376;The no-arg constructor instantiates contained objects.;public Result() {_			f1 = new Tuple2<>()__		};the,no,arg,constructor,instantiates,contained,objects;public,result,f1,new,tuple2
LocalClusteringCoefficient -> Result -> public Result();1463493767;The no-arg constructor instantiates contained objects.;public Result() {_			f1 = new Tuple2<>()__		};the,no,arg,constructor,instantiates,contained,objects;public,result,f1,new,tuple2
LocalClusteringCoefficient -> Result -> public Result();1464291269;The no-arg constructor instantiates contained objects.;public Result() {_			f1 = new Tuple2<>()__		};the,no,arg,constructor,instantiates,contained,objects;public,result,f1,new,tuple2
LocalClusteringCoefficient -> Result -> @Override 		public String toPrintableString();1498486910;Format values into a human-readable string.__@return verbose string;@Override_		public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + degree_				+ ", triangle count: " + triangleCount_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;override,public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,degree,triangle,count,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> @Override 		public String toPrintableString();1498486910;Format values into a human-readable string.__@return verbose string;@Override_		public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + degree_				+ ", triangle count: " + triangleCount_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;override,public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,degree,triangle,count,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> @Override 		public String toPrintableString();1500078951;Format values into a human-readable string.__@return verbose string;@Override_		public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + degree_				+ ", triangle count: " + triangleCount_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;override,public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,degree,triangle,count,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> @Override 		public String toPrintableString();1501532946;Format values into a human-readable string.__@return verbose string;@Override_		public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + degree_				+ ", triangle count: " + triangleCount_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;override,public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,degree,triangle,count,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1462819376;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1463493767;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1464172872;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1464173021;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1464291269;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1468503542;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1469043894;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1469452167;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1472831588;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1477498003;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1477509530;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1484681137;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1487885205;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1.f0__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1,f0
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1488305420;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1492096511;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1495653033;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return f1__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,f1
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1498486910;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return degree__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,degree
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1498486910;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return degree__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,degree
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1500078951;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return degree__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,degree
LocalClusteringCoefficient -> Result -> public LongValue getDegree();1501532946;Get the vertex degree.__@return vertex degree;public LongValue getDegree() {_			return degree__		};get,the,vertex,degree,return,vertex,degree;public,long,value,get,degree,return,degree
LocalClusteringCoefficient -> Result -> public String toVerboseString();1464172872;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1464173021;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1468503542;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1469043894;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1469452167;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1472831588;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1477498003;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1484681137;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toVerboseString();1487885205;Format values into a human-readable string.__@return verbose string;public String toVerboseString() {_			return "Vertex ID: " + f0_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,verbose,string,return,vertex,id,f0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1469043894;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1469452167;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1472831588;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1477498003;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1477509530;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1484681137;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1487885205;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1488305420;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1492096511;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1495653033;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1498486910;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1498486910;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1500078951;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1501532946;By default the vertex set is checked for zero degree vertices. When this_flag is disabled only clustering coefficient scores for vertices with_a degree of a least one will be produced.__@param includeZeroDegreeVertices whether to output scores for vertices_with a degree of zero_@return this;public LocalClusteringCoefficient<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices.set(includeZeroDegreeVertices)___		return this__	};by,default,the,vertex,set,is,checked,for,zero,degree,vertices,when,this,flag,is,disabled,only,clustering,coefficient,scores,for,vertices,with,a,degree,of,a,least,one,will,be,produced,param,include,zero,degree,vertices,whether,to,output,scores,for,vertices,with,a,degree,of,zero,return,this;public,local,clustering,coefficient,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,set,include,zero,degree,vertices,return,this
LocalClusteringCoefficient -> Result -> public void setDegree(LongValue degree);1498486910;Set the vertex degree.__@param degree vertex degree;public void setDegree(LongValue degree) {_			this.degree = degree__		};set,the,vertex,degree,param,degree,vertex,degree;public,void,set,degree,long,value,degree,this,degree,degree
LocalClusteringCoefficient -> Result -> public void setDegree(LongValue degree);1498486910;Set the vertex degree.__@param degree vertex degree;public void setDegree(LongValue degree) {_			this.degree = degree__		};set,the,vertex,degree,param,degree,vertex,degree;public,void,set,degree,long,value,degree,this,degree,degree
LocalClusteringCoefficient -> Result -> public void setDegree(LongValue degree);1500078951;Set the vertex degree.__@param degree vertex degree;public void setDegree(LongValue degree) {_			this.degree = degree__		};set,the,vertex,degree,param,degree,vertex,degree;public,void,set,degree,long,value,degree,this,degree,degree
LocalClusteringCoefficient -> Result -> public void setDegree(LongValue degree);1501532946;Set the vertex degree.__@param degree vertex degree;public void setDegree(LongValue degree) {_			this.degree = degree__		};set,the,vertex,degree,param,degree,vertex,degree;public,void,set,degree,long,value,degree,this,degree,degree
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1462819376;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1463493767;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1464172872;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1464173021;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1464291269;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1468503542;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1469043894;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1469452167;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1472831588;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1477498003;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1477509530;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1484681137;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1487885205;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1488305420;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1492096511;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1495653033;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism);1498486910;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public LocalClusteringCoefficient<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,local,clustering,coefficient,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1462819376;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1463493767;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1464172872;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1464173021;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1464291269;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1468503542;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1469043894;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1469452167;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1472831588;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1477498003;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1477509530;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f2__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f2
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1484681137;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1487885205;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f1.f1__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f1,f1
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1488305420;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f2__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f2
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1492096511;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f2__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f2
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1495653033;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return f2__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,f2
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1498486910;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return triangleCount__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,triangle,count
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1498486910;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return triangleCount__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,triangle,count
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1500078951;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return triangleCount__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,triangle,count
LocalClusteringCoefficient -> Result -> public LongValue getTriangleCount();1501532946;Get the number of triangles containing this vertex_ equivalently,_this is the number of edges between neighbors of this vertex.__@return triangle count;public LongValue getTriangleCount() {_			return triangleCount__		};get,the,number,of,triangles,containing,this,vertex,equivalently,this,is,the,number,of,edges,between,neighbors,of,this,vertex,return,triangle,count;public,long,value,get,triangle,count,return,triangle,count
LocalClusteringCoefficient -> Result -> public String toPrintableString();1477509530;Format values into a human-readable string.__@return verbose string;public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toPrintableString();1488305420;Format values into a human-readable string.__@return verbose string;public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toPrintableString();1492096511;Format values into a human-readable string.__@return verbose string;public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
LocalClusteringCoefficient -> Result -> public String toPrintableString();1495653033;Format values into a human-readable string.__@return verbose string;public String toPrintableString() {_			return "Vertex ID: " + getVertexId0()_				+ ", vertex degree: " + getDegree()_				+ ", triangle count: " + getTriangleCount()_				+ ", local clustering coefficient: " + getLocalClusteringCoefficientScore()__		};format,values,into,a,human,readable,string,return,verbose,string;public,string,to,printable,string,return,vertex,id,get,vertex,id0,vertex,degree,get,degree,triangle,count,get,triangle,count,local,clustering,coefficient,get,local,clustering,coefficient,score
