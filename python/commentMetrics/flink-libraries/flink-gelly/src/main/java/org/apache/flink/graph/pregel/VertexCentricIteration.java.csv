# id;timestamp;commentText;codeText;commentWords;codeWords
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1454411631;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1454427784;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1461669017;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1475517578;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1475589042;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1484681137;Helper method which sets up an iteration with the given vertex value__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1495653033;Helper method which sets up an iteration with the given vertex value.__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> private void setUpIteration(DeltaIteration<?, ?> iteration);1501532946;Helper method which sets up an iteration with the given vertex value.__@param iteration;private void setUpIteration(DeltaIteration<?, ?> iteration) {__		_		if (this.configuration != null) {__			iteration.name(this.configuration.getName("Vertex-centric iteration (" + computeFunction + ")"))__			iteration.parallelism(this.configuration.getParallelism())__			iteration.setSolutionSetUnManaged(this.configuration.isSolutionSetUnmanagedMemory())___			_			for (Map.Entry<String, Aggregator<?>> entry : this.configuration.getAggregators().entrySet()) {_				iteration.registerAggregator(entry.getKey(), entry.getValue())__			}_		}_		else {_			_			iteration.name("Vertex-centric iteration (" + computeFunction + ")")__		}_	};helper,method,which,sets,up,an,iteration,with,the,given,vertex,value,param,iteration;private,void,set,up,iteration,delta,iteration,iteration,if,this,configuration,null,iteration,name,this,configuration,get,name,vertex,centric,iteration,compute,function,iteration,parallelism,this,configuration,get,parallelism,iteration,set,solution,set,un,managed,this,configuration,is,solution,set,unmanaged,memory,for,map,entry,string,aggregator,entry,this,configuration,get,aggregators,entry,set,iteration,register,aggregator,entry,get,key,entry,get,value,else,iteration,name,vertex,centric,iteration,compute,function
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1475517578;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, null,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1475589042;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, null,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1484681137;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, null,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1495653033;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, null,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1501532946;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, null,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1454411631;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1454427784;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1461669017;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1475517578;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1475589042;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1484681137;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1495653033;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public VertexCentricConfiguration getIterationConfiguration();1501532946;@return the configuration parameters of this vertex-centric iteration;public VertexCentricConfiguration getIterationConfiguration() {_		return this.configuration__	};return,the,configuration,parameters,of,this,vertex,centric,iteration;public,vertex,centric,configuration,get,iteration,configuration,return,this,configuration
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1454411631;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param uf The function that updates the state of the vertices from the incoming messages._@param mf The function that turns changed vertex states into messages along the edges.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An in stance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, null,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,uf,the,function,that,updates,the,state,of,the,vertices,from,the,incoming,messages,param,mf,the,function,that,turns,changed,vertex,states,into,messages,along,the,edges,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,in,stance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1454427784;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, null,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		int maximumNumberOfIterations);1461669017;Creates a new vertex-centric iteration operator.__@param edgesWithValue The data set containing edges._@param cf The compute function__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, null,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,null,maximum,number,of,iterations
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1454411631;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1454427784;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1461669017;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1475517578;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1475589042;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1484681137;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1495653033;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> @Override 	public void setInput(DataSet<Vertex<K, VV>> inputData);1501532946;Sets the input data set for this operator. In the case of this operator this input data set represents_the set of vertices with their initial state.__@param inputData The input data set, which in the case of this operator represents the set of_vertices with their initial state.__@see org.apache.flink.api.java.operators.CustomUnaryOperation#setInput(org.apache.flink.api.java.DataSet);@Override_	public void setInput(DataSet<Vertex<K, VV>> inputData) {_		this.initialVertices = inputData__	};sets,the,input,data,set,for,this,operator,in,the,case,of,this,operator,this,input,data,set,represents,the,set,of,vertices,with,their,initial,state,param,input,data,the,input,data,set,which,in,the,case,of,this,operator,represents,the,set,of,vertices,with,their,initial,state,see,org,apache,flink,api,java,operators,custom,unary,operation,set,input,org,apache,flink,api,java,data,set;override,public,void,set,input,data,set,vertex,k,vv,input,data,this,initial,vertices,input,data
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1454411631;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param uf The function that updates the state of the vertices from the incoming messages._@param mf The function that turns changed vertex states into messages along the edges._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An in stance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, mc,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,uf,the,function,that,updates,the,state,of,the,vertices,from,the,incoming,messages,param,mf,the,function,that,turns,changed,vertex,states,into,messages,along,the,edges,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,in,stance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1454427784;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, mc,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1461669017;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static final <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<K, VV, EV, Message>(cf, edgesWithValue, mc,_				maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,final,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,k,vv,ev,message,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1475517578;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, mc,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1475589042;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, mc,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1484681137;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, mc,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1495653033;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, mc,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges( 		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf, 		MessageCombiner<K, Message> mc, int maximumNumberOfIterations);1501532946;Creates a new vertex-centric iteration operator for graphs where the edges are associated with a value (such as_a weight or distance).__@param edgesWithValue The data set containing edges._@param cf The compute function._@param mc The function that combines messages sent to a vertex during a superstep.__@param <K> The type of the vertex key (the vertex identifier)._@param <VV> The type of the vertex value (the state of the vertex)._@param <Message> The type of the message sent between vertices along the edges._@param <EV> The type of the values that are associated with the edges.__@return An instance of the vertex-centric graph computation operator.;public static <K, VV, EV, Message> VertexCentricIteration<K, VV, EV, Message> withEdges(_		DataSet<Edge<K, EV>> edgesWithValue, ComputeFunction<K, VV, EV, Message> cf,_		MessageCombiner<K, Message> mc, int maximumNumberOfIterations) {__		return new VertexCentricIteration<>(cf, edgesWithValue, mc,_			maximumNumberOfIterations)__	};creates,a,new,vertex,centric,iteration,operator,for,graphs,where,the,edges,are,associated,with,a,value,such,as,a,weight,or,distance,param,edges,with,value,the,data,set,containing,edges,param,cf,the,compute,function,param,mc,the,function,that,combines,messages,sent,to,a,vertex,during,a,superstep,param,k,the,type,of,the,vertex,key,the,vertex,identifier,param,vv,the,type,of,the,vertex,value,the,state,of,the,vertex,param,message,the,type,of,the,message,sent,between,vertices,along,the,edges,param,ev,the,type,of,the,values,that,are,associated,with,the,edges,return,an,instance,of,the,vertex,centric,graph,computation,operator;public,static,k,vv,ev,message,vertex,centric,iteration,k,vv,ev,message,with,edges,data,set,edge,k,ev,edges,with,value,compute,function,k,vv,ev,message,cf,message,combiner,k,message,mc,int,maximum,number,of,iterations,return,new,vertex,centric,iteration,cf,edges,with,value,mc,maximum,number,of,iterations
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1454411631;Creates the operator that represents this vertex-centric graph computation.__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<Tuple2<K, Message>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<Vertex<K, VV>, Tuple2<K, Message>>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_				new EitherTypeInfo<NullValue, Message>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<Tuple2<K, Either<NullValue, Message>>>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>,	Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__				setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_				new VertexComputeUdf<K, VV, EV, Message>(computeFunction, intermediateTypeInfo)_ __		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_					new MessageCombinerUdf<K, Message>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,tuple2,k,message,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,k,vv,tuple2,k,message,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,null,value,message,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,tuple2,k,either,null,value,message,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,k,vv,ev,message,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,k,message,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1454427784;Creates the operator that represents this vertex-centric graph computation._<p>_The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps._<p/>__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<Tuple2<K, Message>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<Vertex<K, VV>, Tuple2<K, Message>>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_				new EitherTypeInfo<NullValue, Message>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<Tuple2<K, Either<NullValue, Message>>>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>,	Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_				new VertexComputeUdf<K, VV, EV, Message>(computeFunction, intermediateTypeInfo)_ __		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_					new MessageCombinerUdf<K, Message>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,p,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,tuple2,k,message,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,k,vv,tuple2,k,message,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,null,value,message,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,tuple2,k,either,null,value,message,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,k,vv,ev,message,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,k,message,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1461669017;Creates the operator that represents this vertex-centric graph computation._<p>_The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps._<p/>__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<Tuple2<K, Message>>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<Vertex<K, VV>, Tuple2<K, Message>>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_				new EitherTypeInfo<NullValue, Message>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<Tuple2<K, Either<NullValue, Message>>>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>,	Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_				new VertexComputeUdf<K, VV, EV, Message>(computeFunction, intermediateTypeInfo)_ __		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_					new MessageCombinerUdf<K, Message>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,p,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,tuple2,k,message,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,k,vv,tuple2,k,message,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,null,value,message,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,tuple2,k,either,null,value,message,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,k,vv,ev,message,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,k,message,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1475517578;Creates the operator that represents this vertex-centric graph computation._<p>_The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps._<p/>__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_			new EitherTypeInfo<>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>,	Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_			new VertexComputeUdf<>(computeFunction, intermediateTypeInfo)___		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_				new MessageCombinerUdf<>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,p,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1475589042;Creates the operator that represents this vertex-centric graph computation._<p>_The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps._<p/>__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_			new EitherTypeInfo<>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>,	Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_			new VertexComputeUdf<>(computeFunction, intermediateTypeInfo)___		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_				new MessageCombinerUdf<>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,p,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1484681137;Creates the operator that represents this vertex-centric graph computation._<p>_The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps._<p/>__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_			new EitherTypeInfo<>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>, Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_			new VertexComputeUdf<>(computeFunction, intermediateTypeInfo)___		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_				new MessageCombinerUdf<>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,p,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1495653033;Creates the operator that represents this vertex-centric graph computation.__<p>The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps.__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_			new EitherTypeInfo<>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>, Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<K, VV, Message>())_				.returns(new TupleTypeInfo<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>>(_						vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_			new VertexComputeUdf<>(computeFunction, intermediateTypeInfo)___		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_				new ProjectNewVertexValue<K, VV, Message>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_				new ProjectMessages<K, VV, Message>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_				new MessageCombinerUdf<>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,k,vv,message,returns,new,tuple,type,info,tuple2,vertex,k,vv,either,null,value,message,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,k,vv,message,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,k,vv,message,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> @Override 	public DataSet<Vertex<K, VV>> createResult();1501532946;Creates the operator that represents this vertex-centric graph computation.__<p>The Pregel iteration is mapped to delta iteration as follows._The solution set consists of the set of active vertices and the workset contains the set of messages_send to vertices during the previous superstep. Initially, the workset contains a null message for each vertex._In the beginning of a superstep, the solution set is joined with the workset to produce_a dataset containing tuples of vertex state and messages (vertex inbox)._The superstep compute UDF is realized with a coGroup between the vertices with inbox and the graph edges._The output of the compute UDF contains both the new vertex values and the new messages produced._These are directed to the solution set delta and new workset, respectively, with subsequent flatMaps.__@return The operator that represents this vertex-centric graph computation.;@Override_	public DataSet<Vertex<K, VV>> createResult() {_		if (this.initialVertices == null) {_			throw new IllegalStateException("The input data set has not been set.")__		}__		_		TypeInformation<K> keyType = ((TupleTypeInfo<?>) initialVertices.getType()).getTypeAt(0)__		TypeInformation<Tuple2<K, Message>> messageTypeInfo =_			new TupleTypeInfo<>(keyType, messageType)__		TypeInformation<Vertex<K, VV>> vertexType = initialVertices.getType()__		TypeInformation<Either<Vertex<K, VV>, Tuple2<K, Message>>> intermediateTypeInfo =_			new EitherTypeInfo<>(vertexType, messageTypeInfo)__		TypeInformation<Either<NullValue, Message>> nullableMsgTypeInfo =_			new EitherTypeInfo<>(TypeExtractor.getForClass(NullValue.class), messageType)__		TypeInformation<Tuple2<K, Either<NullValue, Message>>> workSetTypeInfo =_			new TupleTypeInfo<>(keyType, nullableMsgTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> initialWorkSet = initialVertices.map(_				new InitializeWorkSet<K, VV, Message>()).returns(workSetTypeInfo)___		final DeltaIteration<Vertex<K, VV>, Tuple2<K, Either<NullValue, Message>>> iteration =_				initialVertices.iterateDelta(initialWorkSet, this.maximumNumberOfIterations, 0)__		setUpIteration(iteration)___		_		DataSet<Tuple2<Vertex<K, VV>, Either<NullValue, Message>>> verticesWithMsgs =_				iteration.getSolutionSet().join(iteration.getWorkset())_				.where(0).equalTo(0)_				.with(new AppendVertexState<>())_				.returns(new TupleTypeInfo<>(_					vertexType, nullableMsgTypeInfo))___		VertexComputeUdf<K, VV, EV, Message> vertexUdf =_			new VertexComputeUdf<>(computeFunction, intermediateTypeInfo)___		CoGroupOperator<?, ?, Either<Vertex<K, VV>, Tuple2<K, Message>>> superstepComputation =_				verticesWithMsgs.coGroup(edgesWithValue)_				.where("f0.f0").equalTo(0)_				.with(vertexUdf)___		_		DataSet<Vertex<K, VV>> solutionSetDelta = superstepComputation.flatMap(_			new ProjectNewVertexValue<>()).returns(vertexType)___		_		DataSet<Tuple2<K, Either<NullValue, Message>>> allMessages = superstepComputation.flatMap(_			new ProjectMessages<>()).returns(workSetTypeInfo)___		DataSet<Tuple2<K, Either<NullValue, Message>>> newWorkSet = allMessages___		_		if (combineFunction != null) {__			MessageCombinerUdf<K, Message> combinerUdf =_				new MessageCombinerUdf<>(combineFunction, workSetTypeInfo)___			DataSet<Tuple2<K, Either<NullValue, Message>>> combinedMessages = allMessages_					.groupBy(0).reduceGroup(combinerUdf)_					.setCombinable(true)___			newWorkSet = combinedMessages__		}__		_		superstepComputation = superstepComputation.name("Compute Function")__		if (this.configuration != null) {_			for (Tuple2<String, DataSet<?>> e : this.configuration.getBcastVars()) {_				superstepComputation = superstepComputation.withBroadcastSet(e.f1, e.f0)__			}_		}__		return iteration.closeWith(solutionSetDelta, newWorkSet)__	};creates,the,operator,that,represents,this,vertex,centric,graph,computation,p,the,pregel,iteration,is,mapped,to,delta,iteration,as,follows,the,solution,set,consists,of,the,set,of,active,vertices,and,the,workset,contains,the,set,of,messages,send,to,vertices,during,the,previous,superstep,initially,the,workset,contains,a,null,message,for,each,vertex,in,the,beginning,of,a,superstep,the,solution,set,is,joined,with,the,workset,to,produce,a,dataset,containing,tuples,of,vertex,state,and,messages,vertex,inbox,the,superstep,compute,udf,is,realized,with,a,co,group,between,the,vertices,with,inbox,and,the,graph,edges,the,output,of,the,compute,udf,contains,both,the,new,vertex,values,and,the,new,messages,produced,these,are,directed,to,the,solution,set,delta,and,new,workset,respectively,with,subsequent,flat,maps,return,the,operator,that,represents,this,vertex,centric,graph,computation;override,public,data,set,vertex,k,vv,create,result,if,this,initial,vertices,null,throw,new,illegal,state,exception,the,input,data,set,has,not,been,set,type,information,k,key,type,tuple,type,info,initial,vertices,get,type,get,type,at,0,type,information,tuple2,k,message,message,type,info,new,tuple,type,info,key,type,message,type,type,information,vertex,k,vv,vertex,type,initial,vertices,get,type,type,information,either,vertex,k,vv,tuple2,k,message,intermediate,type,info,new,either,type,info,vertex,type,message,type,info,type,information,either,null,value,message,nullable,msg,type,info,new,either,type,info,type,extractor,get,for,class,null,value,class,message,type,type,information,tuple2,k,either,null,value,message,work,set,type,info,new,tuple,type,info,key,type,nullable,msg,type,info,data,set,tuple2,k,either,null,value,message,initial,work,set,initial,vertices,map,new,initialize,work,set,k,vv,message,returns,work,set,type,info,final,delta,iteration,vertex,k,vv,tuple2,k,either,null,value,message,iteration,initial,vertices,iterate,delta,initial,work,set,this,maximum,number,of,iterations,0,set,up,iteration,iteration,data,set,tuple2,vertex,k,vv,either,null,value,message,vertices,with,msgs,iteration,get,solution,set,join,iteration,get,workset,where,0,equal,to,0,with,new,append,vertex,state,returns,new,tuple,type,info,vertex,type,nullable,msg,type,info,vertex,compute,udf,k,vv,ev,message,vertex,udf,new,vertex,compute,udf,compute,function,intermediate,type,info,co,group,operator,either,vertex,k,vv,tuple2,k,message,superstep,computation,vertices,with,msgs,co,group,edges,with,value,where,f0,f0,equal,to,0,with,vertex,udf,data,set,vertex,k,vv,solution,set,delta,superstep,computation,flat,map,new,project,new,vertex,value,returns,vertex,type,data,set,tuple2,k,either,null,value,message,all,messages,superstep,computation,flat,map,new,project,messages,returns,work,set,type,info,data,set,tuple2,k,either,null,value,message,new,work,set,all,messages,if,combine,function,null,message,combiner,udf,k,message,combiner,udf,new,message,combiner,udf,combine,function,work,set,type,info,data,set,tuple2,k,either,null,value,message,combined,messages,all,messages,group,by,0,reduce,group,combiner,udf,set,combinable,true,new,work,set,combined,messages,superstep,computation,superstep,computation,name,compute,function,if,this,configuration,null,for,tuple2,string,data,set,e,this,configuration,get,bcast,vars,superstep,computation,superstep,computation,with,broadcast,set,e,f1,e,f0,return,iteration,close,with,solution,set,delta,new,work,set
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1454411631;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1454427784;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1461669017;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1475517578;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1475589042;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1484681137;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1495653033;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
VertexCentricIteration -> public void configure(VertexCentricConfiguration parameters);1501532946;Configures this vertex-centric iteration with the provided parameters.__@param parameters the configuration parameters;public void configure(VertexCentricConfiguration parameters) {_		this.configuration = parameters__	};configures,this,vertex,centric,iteration,with,the,provided,parameters,param,parameters,the,configuration,parameters;public,void,configure,vertex,centric,configuration,parameters,this,configuration,parameters
