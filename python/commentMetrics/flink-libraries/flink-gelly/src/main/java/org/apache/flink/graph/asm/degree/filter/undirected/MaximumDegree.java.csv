# id;timestamp;commentText;codeText;commentWords;codeWords
MaximumDegree -> public MaximumDegree(long maximumDegree);1465304601;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1467398142;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1473368789;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1473368789;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1495819075;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1499282568;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1499777483;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree(long maximumDegree);1502111816;Filter out vertices with degree greater than the given maximum.__@param maximumDegree maximum degree;public MaximumDegree(long maximumDegree) {_		Preconditions.checkArgument(maximumDegree > 0, "Maximum degree must be greater than zero")___		this.maximumDegree = maximumDegree__	};filter,out,vertices,with,degree,greater,than,the,given,maximum,param,maximum,degree,maximum,degree;public,maximum,degree,long,maximum,degree,preconditions,check,argument,maximum,degree,0,maximum,degree,must,be,greater,than,zero,this,maximum,degree,maximum,degree
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1465304601;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId = reduceOnTargetId___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1467398142;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1473368789;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1473368789;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1495819075;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1499282568;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1499777483;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId);1502111816;The degree can be counted from either the edge source or target IDs._By default the source IDs are counted. Reducing on target IDs may_optimize the algorithm if the input edge list is sorted by target ID.__@param reduceOnTargetId set to {@code true} if the input edge list_is sorted by target ID_@return this;public MaximumDegree<K, VV, EV> setReduceOnTargetId(boolean reduceOnTargetId) {_		this.reduceOnTargetId.set(reduceOnTargetId)___		return this__	};the,degree,can,be,counted,from,either,the,edge,source,or,target,ids,by,default,the,source,ids,are,counted,reducing,on,target,ids,may,optimize,the,algorithm,if,the,input,edge,list,is,sorted,by,target,id,param,reduce,on,target,id,set,to,code,true,if,the,input,edge,list,is,sorted,by,target,id,return,this;public,maximum,degree,k,vv,ev,set,reduce,on,target,id,boolean,reduce,on,target,id,this,reduce,on,target,id,set,reduce,on,target,id,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1465304601;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices = broadcastHighDegreeVertices___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1467398142;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1473368789;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1473368789;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1495819075;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1499282568;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1499777483;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices);1502111816;After filtering high-degree vertices this algorithm must perform joins_on the original graph's vertex set and on both the source and target IDs_of the edge set. These joins can be performed without shuffling data_over the network if the high-degree vertices are distributed by a_broadcast-hash.__@param broadcastHighDegreeVertices set to {@code true} if the high-degree_vertices should be broadcast when joining_@return this;public MaximumDegree<K, VV, EV> setBroadcastHighDegreeVertices(boolean broadcastHighDegreeVertices) {_		this.broadcastHighDegreeVertices.set(broadcastHighDegreeVertices)___		return this__	};after,filtering,high,degree,vertices,this,algorithm,must,perform,joins,on,the,original,graph,s,vertex,set,and,on,both,the,source,and,target,ids,of,the,edge,set,these,joins,can,be,performed,without,shuffling,data,over,the,network,if,the,high,degree,vertices,are,distributed,by,a,broadcast,hash,param,broadcast,high,degree,vertices,set,to,code,true,if,the,high,degree,vertices,should,be,broadcast,when,joining,return,this;public,maximum,degree,k,vv,ev,set,broadcast,high,degree,vertices,boolean,broadcast,high,degree,vertices,this,broadcast,high,degree,vertices,set,broadcast,high,degree,vertices,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1465304601;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1467398142;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1473368789;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1473368789;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1495819075;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
MaximumDegree -> public MaximumDegree<K, VV, EV> setParallelism(int parallelism);1499282568;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public MaximumDegree<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,maximum,degree,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
