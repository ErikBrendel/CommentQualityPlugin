# id;timestamp;commentText;codeText;commentWords;codeWords
SumFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1444404795;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
SumFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1446112342;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
SumFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1470042815;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
SumFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1475684776;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
SumFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1495819075;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
SumFunction -> public long getNumberOfVertices();1444404795;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link IterationConfigurationion#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,iteration,configurationion,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
SumFunction -> public long getNumberOfVertices();1446112342;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
SumFunction -> public long getNumberOfVertices();1470042815;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
SumFunction -> public long getNumberOfVertices();1475684776;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
SumFunction -> public long getNumberOfVertices();1495819075;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
SumFunction -> public <T> Collection<T> getBroadcastSet(String name);1444404795;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
SumFunction -> public <T> Collection<T> getBroadcastSet(String name);1446112342;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
SumFunction -> public <T> Collection<T> getBroadcastSet(String name);1470042815;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
SumFunction -> public <T> Collection<T> getBroadcastSet(String name);1475684776;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
SumFunction -> public <T> Collection<T> getBroadcastSet(String name);1495819075;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
SumFunction -> public void postSuperstep();1444404795;This method is executed once per superstep after the vertex update function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep
SumFunction -> public void postSuperstep();1446112342;This method is executed once per superstep after the vertex update function has been invoked for each vertex.;public void postSuperstep() {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex;public,void,post,superstep
SumFunction -> public void postSuperstep();1470042815;This method is executed once per superstep after the vertex update function has been invoked for each vertex.;public void postSuperstep() {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex;public,void,post,superstep
SumFunction -> public void postSuperstep();1475684776;This method is executed once per superstep after the vertex update function has been invoked for each vertex.;public void postSuperstep() {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex;public,void,post,superstep
SumFunction -> public void postSuperstep();1495819075;This method is executed once per superstep after the vertex update function has been invoked for each vertex.;public void postSuperstep() {};this,method,is,executed,once,per,superstep,after,the,vertex,update,function,has,been,invoked,for,each,vertex;public,void,post,superstep
SumFunction -> public int getSuperstepNumber();1444404795;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
SumFunction -> public int getSuperstepNumber();1446112342;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
SumFunction -> public int getSuperstepNumber();1470042815;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
SumFunction -> public int getSuperstepNumber();1475684776;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
SumFunction -> public int getSuperstepNumber();1495819075;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
SumFunction -> public abstract M sum(M arg0, M arg1)_;1444404795;This method is invoked once per superstep, after the {@link GatherFunction}_in a {@link GatherSumApplyIteration}._It combines the partial values produced by {@link GatherFunction#gather(Neighbor)}_in pairs, until a single value has been computed.__@param arg0 the first partial value._@param arg1 the second partial value._@return the combined value.;public abstract M sum(M arg0, M arg1)_;this,method,is,invoked,once,per,superstep,after,the,link,gather,function,in,a,link,gather,sum,apply,iteration,it,combines,the,partial,values,produced,by,link,gather,function,gather,neighbor,in,pairs,until,a,single,value,has,been,computed,param,arg0,the,first,partial,value,param,arg1,the,second,partial,value,return,the,combined,value;public,abstract,m,sum,m,arg0,m,arg1
SumFunction -> public abstract M sum(M arg0, M arg1)_;1446112342;This method is invoked once per superstep, after the {@link GatherFunction}_in a {@link GatherSumApplyIteration}._It combines the partial values produced by {@link GatherFunction#gather(Neighbor)}_in pairs, until a single value has been computed.__@param arg0 the first partial value._@param arg1 the second partial value._@return the combined value.;public abstract M sum(M arg0, M arg1)_;this,method,is,invoked,once,per,superstep,after,the,link,gather,function,in,a,link,gather,sum,apply,iteration,it,combines,the,partial,values,produced,by,link,gather,function,gather,neighbor,in,pairs,until,a,single,value,has,been,computed,param,arg0,the,first,partial,value,param,arg1,the,second,partial,value,return,the,combined,value;public,abstract,m,sum,m,arg0,m,arg1
SumFunction -> public abstract M sum(M arg0, M arg1)_;1470042815;This method is invoked once per superstep, after the {@link GatherFunction}_in a {@link GatherSumApplyIteration}._It combines the partial values produced by {@link GatherFunction#gather(Neighbor)}_in pairs, until a single value has been computed.__@param arg0 the first partial value._@param arg1 the second partial value._@return the combined value.;public abstract M sum(M arg0, M arg1)_;this,method,is,invoked,once,per,superstep,after,the,link,gather,function,in,a,link,gather,sum,apply,iteration,it,combines,the,partial,values,produced,by,link,gather,function,gather,neighbor,in,pairs,until,a,single,value,has,been,computed,param,arg0,the,first,partial,value,param,arg1,the,second,partial,value,return,the,combined,value;public,abstract,m,sum,m,arg0,m,arg1
SumFunction -> public abstract M sum(M arg0, M arg1)_;1475684776;This method is invoked once per superstep, after the {@link GatherFunction}_in a {@link GatherSumApplyIteration}._It combines the partial values produced by {@link GatherFunction#gather(Neighbor)}_in pairs, until a single value has been computed.__@param arg0 the first partial value._@param arg1 the second partial value._@return the combined value.;public abstract M sum(M arg0, M arg1)_;this,method,is,invoked,once,per,superstep,after,the,link,gather,function,in,a,link,gather,sum,apply,iteration,it,combines,the,partial,values,produced,by,link,gather,function,gather,neighbor,in,pairs,until,a,single,value,has,been,computed,param,arg0,the,first,partial,value,param,arg1,the,second,partial,value,return,the,combined,value;public,abstract,m,sum,m,arg0,m,arg1
SumFunction -> public abstract M sum(M arg0, M arg1)_;1495819075;This method is invoked once per superstep, after the {@link GatherFunction}_in a {@link GatherSumApplyIteration}._It combines the partial values produced by {@link GatherFunction#gather(Neighbor)}_in pairs, until a single value has been computed.__@param arg0 the first partial value._@param arg1 the second partial value._@return the combined value.;public abstract M sum(M arg0, M arg1)_;this,method,is,invoked,once,per,superstep,after,the,link,gather,function,in,a,link,gather,sum,apply,iteration,it,combines,the,partial,values,produced,by,link,gather,function,gather,neighbor,in,pairs,until,a,single,value,has,been,computed,param,arg0,the,first,partial,value,param,arg1,the,second,partial,value,return,the,combined,value;public,abstract,m,sum,m,arg0,m,arg1
SumFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1444404795;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
SumFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1446112342;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
SumFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1470042815;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
SumFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1475684776;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
SumFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1495819075;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
SumFunction -> public void preSuperstep();1444404795;This method is executed once per superstep before the vertex update function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep
SumFunction -> public void preSuperstep();1446112342;This method is executed once per superstep before the vertex update function is invoked for each vertex.;public void preSuperstep() {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex;public,void,pre,superstep
SumFunction -> public void preSuperstep();1470042815;This method is executed once per superstep before the vertex update function is invoked for each vertex.;public void preSuperstep() {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex;public,void,pre,superstep
SumFunction -> public void preSuperstep();1475684776;This method is executed once per superstep before the vertex update function is invoked for each vertex.;public void preSuperstep() {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex;public,void,pre,superstep
SumFunction -> public void preSuperstep();1495819075;This method is executed once per superstep before the vertex update function is invoked for each vertex.;public void preSuperstep() {};this,method,is,executed,once,per,superstep,before,the,vertex,update,function,is,invoked,for,each,vertex;public,void,pre,superstep
