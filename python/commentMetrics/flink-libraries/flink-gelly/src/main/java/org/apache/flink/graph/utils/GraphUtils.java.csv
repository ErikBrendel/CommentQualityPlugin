# id;timestamp;commentText;codeText;commentWords;codeWords
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1464188761;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_			.reduce(new AddLongValue())__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,reduce,new,add,long,value
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1467291767;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_			.reduce(new AddLongValue())__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,reduce,new,add,long,value
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1477509530;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1487857668;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1488305420;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1492106849;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1495653033;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<T, LongValue>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,t,long,value,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> public static <T> DataSet<LongValue> count(DataSet<T> input);1501532946;Count the number of elements in a DataSet.__@param input DataSet of elements to be counted_@param <T> element type_@return count;public static <T> DataSet<LongValue> count(DataSet<T> input) {_		return input_			.map(new MapTo<>(new LongValue(1)))_				.returns(LONG_VALUE_TYPE_INFO)_				.name("Emit 1")_			.reduce(new AddLongValue())_				.name("Sum")__	};count,the,number,of,elements,in,a,data,set,param,input,data,set,of,elements,to,be,counted,param,t,element,type,return,count;public,static,t,data,set,long,value,count,data,set,t,input,return,input,map,new,map,to,new,long,value,1,returns,name,emit,1,reduce,new,add,long,value,name,sum
GraphUtils -> MapTo -> public MapTo(O value);1464188761;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1467291767;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1477509530;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1487857668;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1488305420;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1492106849;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1495653033;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> MapTo -> public MapTo(O value);1501532946;Map each element to the given object.__@param value the object to emit for each element;public MapTo(O value) {_			this.value = value__		};map,each,element,to,the,given,object,param,value,the,object,to,emit,for,each,element;public,map,to,o,value,this,value,value
GraphUtils -> public static <K, VV, EV> Utils.ChecksumHashCode checksumHashCode(Graph<K, VV, EV> graph) throws Exception;1461242164;Convenience method to get the count (number of elements) of a Graph_as well as the checksum (sum over element hashes). The vertex and_edge DataSets are processed in a single job and the resultant counts_and checksums are merged locally.__@param graph Graph over which to compute the count and checksum_@return the checksum over the vertices and edges;public static <K, VV, EV> Utils.ChecksumHashCode checksumHashCode(Graph<K, VV, EV> graph) throws Exception {_		final String verticesId = new AbstractID().toString()__		graph.getVertices().output(new Utils.ChecksumHashCodeHelper<Vertex<K, VV>>(verticesId)).name("ChecksumHashCode vertices")___		final String edgesId = new AbstractID().toString()__		graph.getEdges().output(new Utils.ChecksumHashCodeHelper<Edge<K, EV>>(edgesId)).name("ChecksumHashCode edges")___		JobExecutionResult res = graph.getContext().execute()___		Utils.ChecksumHashCode checksum = res.<Utils.ChecksumHashCode>getAccumulatorResult(verticesId)__		checksum.add(res.<Utils.ChecksumHashCode>getAccumulatorResult(edgesId))___		return checksum__	};convenience,method,to,get,the,count,number,of,elements,of,a,graph,as,well,as,the,checksum,sum,over,element,hashes,the,vertex,and,edge,data,sets,are,processed,in,a,single,job,and,the,resultant,counts,and,checksums,are,merged,locally,param,graph,graph,over,which,to,compute,the,count,and,checksum,return,the,checksum,over,the,vertices,and,edges;public,static,k,vv,ev,utils,checksum,hash,code,checksum,hash,code,graph,k,vv,ev,graph,throws,exception,final,string,vertices,id,new,abstract,id,to,string,graph,get,vertices,output,new,utils,checksum,hash,code,helper,vertex,k,vv,vertices,id,name,checksum,hash,code,vertices,final,string,edges,id,new,abstract,id,to,string,graph,get,edges,output,new,utils,checksum,hash,code,helper,edge,k,ev,edges,id,name,checksum,hash,code,edges,job,execution,result,res,graph,get,context,execute,utils,checksum,hash,code,checksum,res,utils,checksum,hash,code,get,accumulator,result,vertices,id,checksum,add,res,utils,checksum,hash,code,get,accumulator,result,edges,id,return,checksum
GraphUtils -> public static <K, VV, EV> Utils.ChecksumHashCode checksumHashCode(Graph<K, VV, EV> graph) throws Exception;1464188761;Convenience method to get the count (number of elements) of a Graph_as well as the checksum (sum over element hashes). The vertex and_edge DataSets are processed in a single job and the resultant counts_and checksums are merged locally.__@param graph Graph over which to compute the count and checksum_@return the checksum over the vertices and edges;public static <K, VV, EV> Utils.ChecksumHashCode checksumHashCode(Graph<K, VV, EV> graph) throws Exception {_		final String verticesId = new AbstractID().toString()__		graph.getVertices().output(new Utils.ChecksumHashCodeHelper<Vertex<K, VV>>(verticesId)).name("ChecksumHashCode vertices")___		final String edgesId = new AbstractID().toString()__		graph.getEdges().output(new Utils.ChecksumHashCodeHelper<Edge<K, EV>>(edgesId)).name("ChecksumHashCode edges")___		JobExecutionResult res = graph.getContext().execute()___		Utils.ChecksumHashCode checksum = res.<Utils.ChecksumHashCode>getAccumulatorResult(verticesId)__		checksum.add(res.<Utils.ChecksumHashCode>getAccumulatorResult(edgesId))___		return checksum__	};convenience,method,to,get,the,count,number,of,elements,of,a,graph,as,well,as,the,checksum,sum,over,element,hashes,the,vertex,and,edge,data,sets,are,processed,in,a,single,job,and,the,resultant,counts,and,checksums,are,merged,locally,param,graph,graph,over,which,to,compute,the,count,and,checksum,return,the,checksum,over,the,vertices,and,edges;public,static,k,vv,ev,utils,checksum,hash,code,checksum,hash,code,graph,k,vv,ev,graph,throws,exception,final,string,vertices,id,new,abstract,id,to,string,graph,get,vertices,output,new,utils,checksum,hash,code,helper,vertex,k,vv,vertices,id,name,checksum,hash,code,vertices,final,string,edges,id,new,abstract,id,to,string,graph,get,edges,output,new,utils,checksum,hash,code,helper,edge,k,ev,edges,id,name,checksum,hash,code,edges,job,execution,result,res,graph,get,context,execute,utils,checksum,hash,code,checksum,res,utils,checksum,hash,code,get,accumulator,result,vertices,id,checksum,add,res,utils,checksum,hash,code,get,accumulator,result,edges,id,return,checksum
