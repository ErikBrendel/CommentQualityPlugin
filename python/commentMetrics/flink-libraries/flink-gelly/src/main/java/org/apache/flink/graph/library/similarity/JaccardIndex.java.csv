# id;timestamp;commentText;codeText;commentWords;codeWords
JaccardIndex -> public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults);1493649310;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,jaccard,index,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults);1495819075;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,jaccard,index,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults);1499282568;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,jaccard,index,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults);1499777483;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,jaccard,index,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults);1502111816;By default only one result is output for each pair of vertices. When_mirroring a second result with the vertex order flipped is output for_each pair of vertices.__@param mirrorResults whether output results should be mirrored_@return this;public JaccardIndex<K, VV, EV> setMirrorResults(boolean mirrorResults) {_		this.mirrorResults = mirrorResults___		return this__	};by,default,only,one,result,is,output,for,each,pair,of,vertices,when,mirroring,a,second,result,with,the,vertex,order,flipped,is,output,for,each,pair,of,vertices,param,mirror,results,whether,output,results,should,be,mirrored,return,this;public,jaccard,index,k,vv,ev,set,mirror,results,boolean,mirror,results,this,mirror,results,mirror,results,return,this
JaccardIndex -> Result -> public double getJaccardIndexScore();1463775456;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1465304462;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1467052745;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1467398142;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1473368789;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1473368789;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1488490978;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1489068942;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1490973446;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1492103503;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1492616695;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1493649310;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1495819075;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1499282568;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1499777483;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public double getJaccardIndexScore();1502111816;Get the Jaccard Index score, equal to the number of shared neighbors_of the source and target vertices divided by the number of distinct_neighbors.__@return Jaccard Index score;public double getJaccardIndexScore() {_			return getSharedNeighborCount().getValue() / (double) getDistinctNeighborCount().getValue()__		};get,the,jaccard,index,score,equal,to,the,number,of,shared,neighbors,of,the,source,and,target,vertices,divided,by,the,number,of,distinct,neighbors,return,jaccard,index,score;public,double,get,jaccard,index,score,return,get,shared,neighbor,count,get,value,double,get,distinct,neighbor,count,get,value
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1463775456;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1465304462;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1467052745;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1467398142;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1473368789;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1473368789;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1488490978;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f2.f1__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f2,f1
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1489068942;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1490973446;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1492103503;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1492616695;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1493649310;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1495819075;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return f3__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,f3
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1499282568;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return distinctNeighborCount__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,distinct,neighbor,count
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1499777483;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return distinctNeighborCount__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,distinct,neighbor,count
JaccardIndex -> Result -> public IntValue getDistinctNeighborCount();1502111816;Get the distinct neighbor count.__@return distinct neighbor count;public IntValue getDistinctNeighborCount() {_			return distinctNeighborCount__		};get,the,distinct,neighbor,count,return,distinct,neighbor,count;public,int,value,get,distinct,neighbor,count,return,distinct,neighbor,count
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1463775456;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1465304462;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1467052745;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1467398142;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1473368789;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1473368789;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1488490978;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2.f0__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2,f0
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1489068942;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1490973446;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1492103503;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1492616695;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1493649310;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1495819075;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return f2__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,f2
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1499282568;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return sharedNeighborCount__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,shared,neighbor,count
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1499777483;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return sharedNeighborCount__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,shared,neighbor,count
JaccardIndex -> Result -> public IntValue getSharedNeighborCount();1502111816;Get the shared neighbor count.__@return shared neighbor count;public IntValue getSharedNeighborCount() {_			return sharedNeighborCount__		};get,the,shared,neighbor,count,return,shared,neighbor,count;public,int,value,get,shared,neighbor,count,return,shared,neighbor,count
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1463775456;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1465304462;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1467052745;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1467398142;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1473368789;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1473368789;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1488490978;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1489068942;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1490973446;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1492103503;Filter out Jaccard Index scores greater than or equal to the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,or,equal,to,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1492616695;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1493649310;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1495819075;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1499282568;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1499777483;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator);1502111816;Filter out Jaccard Index scores greater than the given maximum fraction.__@param numerator numerator of the maximum score_@param denominator denominator of the maximum score_@return this_@see #setMinimumScore(int, int);public JaccardIndex<K, VV, EV> setMaximumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Maximum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Maximum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Maximum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.maximumScoreNumerator = numerator__		this.maximumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,greater,than,the,given,maximum,fraction,param,numerator,numerator,of,the,maximum,score,param,denominator,denominator,of,the,maximum,score,return,this,see,set,minimum,score,int,int;public,jaccard,index,k,vv,ev,set,maximum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,maximum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,maximum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,maximum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,maximum,score,numerator,numerator,this,maximum,score,denominator,denominator,return,this
JaccardIndex -> Result -> public void setSharedNeighborCount(IntValue sharedNeighborCount);1499282568;Set the shared neighbor count.__@param sharedNeighborCount the shared neighbor count;public void setSharedNeighborCount(IntValue sharedNeighborCount) {_			this.sharedNeighborCount = sharedNeighborCount__		};set,the,shared,neighbor,count,param,shared,neighbor,count,the,shared,neighbor,count;public,void,set,shared,neighbor,count,int,value,shared,neighbor,count,this,shared,neighbor,count,shared,neighbor,count
JaccardIndex -> Result -> public void setSharedNeighborCount(IntValue sharedNeighborCount);1499777483;Set the shared neighbor count.__@param sharedNeighborCount the shared neighbor count;public void setSharedNeighborCount(IntValue sharedNeighborCount) {_			this.sharedNeighborCount = sharedNeighborCount__		};set,the,shared,neighbor,count,param,shared,neighbor,count,the,shared,neighbor,count;public,void,set,shared,neighbor,count,int,value,shared,neighbor,count,this,shared,neighbor,count,shared,neighbor,count
JaccardIndex -> Result -> public void setSharedNeighborCount(IntValue sharedNeighborCount);1502111816;Set the shared neighbor count.__@param sharedNeighborCount the shared neighbor count;public void setSharedNeighborCount(IntValue sharedNeighborCount) {_			this.sharedNeighborCount = sharedNeighborCount__		};set,the,shared,neighbor,count,param,shared,neighbor,count,the,shared,neighbor,count;public,void,set,shared,neighbor,count,int,value,shared,neighbor,count,this,shared,neighbor,count,shared,neighbor,count
JaccardIndex -> Result -> public void setDistinctNeighborCount(IntValue distinctNeighborCount);1499282568;Set the distinct neighbor count.__@param distinctNeighborCount the distinct neighbor count;public void setDistinctNeighborCount(IntValue distinctNeighborCount) {_			this.distinctNeighborCount = distinctNeighborCount__		};set,the,distinct,neighbor,count,param,distinct,neighbor,count,the,distinct,neighbor,count;public,void,set,distinct,neighbor,count,int,value,distinct,neighbor,count,this,distinct,neighbor,count,distinct,neighbor,count
JaccardIndex -> Result -> public void setDistinctNeighborCount(IntValue distinctNeighborCount);1499777483;Set the distinct neighbor count.__@param distinctNeighborCount the distinct neighbor count;public void setDistinctNeighborCount(IntValue distinctNeighborCount) {_			this.distinctNeighborCount = distinctNeighborCount__		};set,the,distinct,neighbor,count,param,distinct,neighbor,count,the,distinct,neighbor,count;public,void,set,distinct,neighbor,count,int,value,distinct,neighbor,count,this,distinct,neighbor,count,distinct,neighbor,count
JaccardIndex -> Result -> public void setDistinctNeighborCount(IntValue distinctNeighborCount);1502111816;Set the distinct neighbor count.__@param distinctNeighborCount the distinct neighbor count;public void setDistinctNeighborCount(IntValue distinctNeighborCount) {_			this.distinctNeighborCount = distinctNeighborCount__		};set,the,distinct,neighbor,count,param,distinct,neighbor,count,the,distinct,neighbor,count;public,void,set,distinct,neighbor,count,int,value,distinct,neighbor,count,this,distinct,neighbor,count,distinct,neighbor,count
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1463775456;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1465304462;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1467052745;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1467398142;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1473368789;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1473368789;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1488490978;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1489068942;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1490973446;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1492103503;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1492616695;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1493649310;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1495819075;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__<p>The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,p,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1499282568;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__<p>The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,p,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1499777483;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__<p>The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,p,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setGroupSize(int groupSize);1502111816;Override the default group size for the quadratic expansion of neighbor_pairs. Small groups generate more data whereas large groups distribute_computation less evenly among tasks.__<p>The default value should be near-optimal for all use cases.__@param groupSize the group size for the quadratic expansion of neighbor pairs_@return this;public JaccardIndex<K, VV, EV> setGroupSize(int groupSize) {_		Preconditions.checkArgument(groupSize > 0, "Group size must be greater than zero")___		this.groupSize = groupSize___		return this__	};override,the,default,group,size,for,the,quadratic,expansion,of,neighbor,pairs,small,groups,generate,more,data,whereas,large,groups,distribute,computation,less,evenly,among,tasks,p,the,default,value,should,be,near,optimal,for,all,use,cases,param,group,size,the,group,size,for,the,quadratic,expansion,of,neighbor,pairs,return,this;public,jaccard,index,k,vv,ev,set,group,size,int,group,size,preconditions,check,argument,group,size,0,group,size,must,be,greater,than,zero,this,group,size,group,size,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1463775456;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1465304462;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1467052745;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1467398142;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1473368789;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1473368789;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1488490978;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1489068942;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1490973446;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1492103503;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1492616695;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1493649310;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1495819075;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism);1499282568;Override the parallelism of operators processing small amounts of data.__@param littleParallelism operator parallelism_@return this;public JaccardIndex<K, VV, EV> setLittleParallelism(int littleParallelism) {_		Preconditions.checkArgument(littleParallelism > 0 || littleParallelism == PARALLELISM_DEFAULT,_			"The parallelism must be greater than zero.")___		this.littleParallelism = littleParallelism___		return this__	};override,the,parallelism,of,operators,processing,small,amounts,of,data,param,little,parallelism,operator,parallelism,return,this;public,jaccard,index,k,vv,ev,set,little,parallelism,int,little,parallelism,preconditions,check,argument,little,parallelism,0,little,parallelism,the,parallelism,must,be,greater,than,zero,this,little,parallelism,little,parallelism,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1463775456;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1465304462;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1467052745;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1467398142;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1473368789;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1473368789;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1488490978;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1489068942;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1490973446;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1492103503;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1492616695;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1493649310;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1495819075;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1499282568;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1499777483;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
JaccardIndex -> public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator);1502111816;Filter out Jaccard Index scores less than the given minimum fraction.__@param numerator numerator of the minimum score_@param denominator denominator of the minimum score_@return this_@see #setMaximumScore(int, int);public JaccardIndex<K, VV, EV> setMinimumScore(int numerator, int denominator) {_		Preconditions.checkArgument(numerator >= 0, "Minimum score numerator must be non-negative")__		Preconditions.checkArgument(denominator > 0, "Minimum score denominator must be greater than zero")__		Preconditions.checkArgument(numerator <= denominator, "Minimum score fraction must be less than or equal to one")___		this.unboundedScores = false__		this.minimumScoreNumerator = numerator__		this.minimumScoreDenominator = denominator___		return this__	};filter,out,jaccard,index,scores,less,than,the,given,minimum,fraction,param,numerator,numerator,of,the,minimum,score,param,denominator,denominator,of,the,minimum,score,return,this,see,set,maximum,score,int,int;public,jaccard,index,k,vv,ev,set,minimum,score,int,numerator,int,denominator,preconditions,check,argument,numerator,0,minimum,score,numerator,must,be,non,negative,preconditions,check,argument,denominator,0,minimum,score,denominator,must,be,greater,than,zero,preconditions,check,argument,numerator,denominator,minimum,score,fraction,must,be,less,than,or,equal,to,one,this,unbounded,scores,false,this,minimum,score,numerator,numerator,this,minimum,score,denominator,denominator,return,this
