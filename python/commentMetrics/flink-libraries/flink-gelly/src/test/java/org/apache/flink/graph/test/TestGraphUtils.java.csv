# id;timestamp;commentText;codeText;commentWords;codeWords
TestGraphUtils -> public static List<Vertex<Long, Long>> getLongLongVertices();1447616654;Function that produces an ArrayList of vertices;public static List<Vertex<Long, Long>> getLongLongVertices() {_		List<Vertex<Long, Long>> vertices = new ArrayList<>()__		vertices.add(new Vertex<>(1L, 1L))__		vertices.add(new Vertex<>(2L, 2L))__		vertices.add(new Vertex<>(3L, 3L))__		vertices.add(new Vertex<>(4L, 4L))__		vertices.add(new Vertex<>(5L, 5L))___		return vertices__	};function,that,produces,an,array,list,of,vertices;public,static,list,vertex,long,long,get,long,long,vertices,list,vertex,long,long,vertices,new,array,list,vertices,add,new,vertex,1l,1l,vertices,add,new,vertex,2l,2l,vertices,add,new,vertex,3l,3l,vertices,add,new,vertex,4l,4l,vertices,add,new,vertex,5l,5l,return,vertices
TestGraphUtils -> public static List<Vertex<Long, Long>> getLongLongVertices();1484681137;Function that produces an ArrayList of vertices;public static List<Vertex<Long, Long>> getLongLongVertices() {_		List<Vertex<Long, Long>> vertices = new ArrayList<>()__		vertices.add(new Vertex<>(1L, 1L))__		vertices.add(new Vertex<>(2L, 2L))__		vertices.add(new Vertex<>(3L, 3L))__		vertices.add(new Vertex<>(4L, 4L))__		vertices.add(new Vertex<>(5L, 5L))___		return vertices__	};function,that,produces,an,array,list,of,vertices;public,static,list,vertex,long,long,get,long,long,vertices,list,vertex,long,long,vertices,new,array,list,vertices,add,new,vertex,1l,1l,vertices,add,new,vertex,2l,2l,vertices,add,new,vertex,3l,3l,vertices,add,new,vertex,4l,4l,vertices,add,new,vertex,5l,5l,return,vertices
TestGraphUtils -> public static List<Vertex<Long, Long>> getLongLongVertices();1495653033;Function that produces an ArrayList of vertices.;public static List<Vertex<Long, Long>> getLongLongVertices() {_		List<Vertex<Long, Long>> vertices = new ArrayList<>()__		vertices.add(new Vertex<>(1L, 1L))__		vertices.add(new Vertex<>(2L, 2L))__		vertices.add(new Vertex<>(3L, 3L))__		vertices.add(new Vertex<>(4L, 4L))__		vertices.add(new Vertex<>(5L, 5L))___		return vertices__	};function,that,produces,an,array,list,of,vertices;public,static,list,vertex,long,long,get,long,long,vertices,list,vertex,long,long,vertices,new,array,list,vertices,add,new,vertex,1l,1l,vertices,add,new,vertex,2l,2l,vertices,add,new,vertex,3l,3l,vertices,add,new,vertex,4l,4l,vertices,add,new,vertex,5l,5l,return,vertices
TestGraphUtils -> public static List<Edge<Long, Long>> getLongLongEdges();1447616654;Function that produces an ArrayList of edges;public static List<Edge<Long, Long>> getLongLongEdges() {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 3L, 13L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 4L, 34L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))__		edges.add(new Edge<>(5L, 1L, 51L))__	_		return edges__	};function,that,produces,an,array,list,of,edges;public,static,list,edge,long,long,get,long,long,edges,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,3l,13l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,4l,34l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,edges,add,new,edge,5l,1l,51l,return,edges
TestGraphUtils -> public static List<Edge<Long, Long>> getLongLongEdges();1484681137;Function that produces an ArrayList of edges;public static List<Edge<Long, Long>> getLongLongEdges() {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 3L, 13L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 4L, 34L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))__		edges.add(new Edge<>(5L, 1L, 51L))__	_		return edges__	};function,that,produces,an,array,list,of,edges;public,static,list,edge,long,long,get,long,long,edges,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,3l,13l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,4l,34l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,edges,add,new,edge,5l,1l,51l,return,edges
TestGraphUtils -> public static List<Edge<Long, Long>> getLongLongEdges();1495653033;Function that produces an ArrayList of edges.;public static List<Edge<Long, Long>> getLongLongEdges() {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 3L, 13L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 4L, 34L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))__		edges.add(new Edge<>(5L, 1L, 51L))___		return edges__	};function,that,produces,an,array,list,of,edges;public,static,list,edge,long,long,get,long,long,edges,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,3l,13l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,4l,34l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,edges,add,new,edge,5l,1l,51l,return,edges
TestGraphUtils -> public static DataSet<Edge<Long, Long>> getLongLongEdgeDataDifference(ExecutionEnvironment env);1484681137;utils for getting the second graph for the test of method difference()__@param env - ExecutionEnvironment;public static DataSet<Edge<Long, Long>> getLongLongEdgeDataDifference(ExecutionEnvironment env) {_		return env.fromCollection(getLongLongEdgesForDifference())__	};utils,for,getting,the,second,graph,for,the,test,of,method,difference,param,env,execution,environment;public,static,data,set,edge,long,long,get,long,long,edge,data,difference,execution,environment,env,return,env,from,collection,get,long,long,edges,for,difference
TestGraphUtils -> public static DataSet<Edge<Long, Long>> getLongLongEdgeDataDifference(ExecutionEnvironment env);1495653033;utils for getting the second graph for the test of method difference().__@param env - ExecutionEnvironment;public static DataSet<Edge<Long, Long>> getLongLongEdgeDataDifference(ExecutionEnvironment env) {_		return env.fromCollection(getLongLongEdgesForDifference())__	};utils,for,getting,the,second,graph,for,the,test,of,method,difference,param,env,execution,environment;public,static,data,set,edge,long,long,get,long,long,edge,data,difference,execution,environment,env,return,env,from,collection,get,long,long,edges,for,difference
TestGraphUtils -> public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree( 			ExecutionEnvironment env);1447616654;A graph that has at least one vertex with no ingoing/outgoing edges;public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree(_			ExecutionEnvironment env) {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 4L, 14L))__		edges.add(new Edge<>(1L, 5L, 15L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))___		return env.fromCollection(edges)__	};a,graph,that,has,at,least,one,vertex,with,no,ingoing,outgoing,edges;public,static,data,set,edge,long,long,get,long,long,edge,data,with,zero,degree,execution,environment,env,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,4l,14l,edges,add,new,edge,1l,5l,15l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,return,env,from,collection,edges
TestGraphUtils -> public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree( 			ExecutionEnvironment env);1484681137;A graph that has at least one vertex with no ingoing/outgoing edges;public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree(_			ExecutionEnvironment env) {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 4L, 14L))__		edges.add(new Edge<>(1L, 5L, 15L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))___		return env.fromCollection(edges)__	};a,graph,that,has,at,least,one,vertex,with,no,ingoing,outgoing,edges;public,static,data,set,edge,long,long,get,long,long,edge,data,with,zero,degree,execution,environment,env,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,4l,14l,edges,add,new,edge,1l,5l,15l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,return,env,from,collection,edges
TestGraphUtils -> public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree( 			ExecutionEnvironment env);1495653033;A graph that has at least one vertex with no ingoing/outgoing edges.;public static DataSet<Edge<Long, Long>> getLongLongEdgeDataWithZeroDegree(_			ExecutionEnvironment env) {_		List<Edge<Long, Long>> edges = new ArrayList<>()__		edges.add(new Edge<>(1L, 2L, 12L))__		edges.add(new Edge<>(1L, 4L, 14L))__		edges.add(new Edge<>(1L, 5L, 15L))__		edges.add(new Edge<>(2L, 3L, 23L))__		edges.add(new Edge<>(3L, 5L, 35L))__		edges.add(new Edge<>(4L, 5L, 45L))___		return env.fromCollection(edges)__	};a,graph,that,has,at,least,one,vertex,with,no,ingoing,outgoing,edges;public,static,data,set,edge,long,long,get,long,long,edge,data,with,zero,degree,execution,environment,env,list,edge,long,long,edges,new,array,list,edges,add,new,edge,1l,2l,12l,edges,add,new,edge,1l,4l,14l,edges,add,new,edge,1l,5l,15l,edges,add,new,edge,2l,3l,23l,edges,add,new,edge,3l,5l,35l,edges,add,new,edge,4l,5l,45l,return,env,from,collection,edges
TestGraphUtils -> public static void pipeSystemOutToNull();1444297686;Method useful for suppressing sysout printing;public static void pipeSystemOutToNull() {_		System.setOut(new PrintStream(new BlackholeOutputSteam()))__	};method,useful,for,suppressing,sysout,printing;public,static,void,pipe,system,out,to,null,system,set,out,new,print,stream,new,blackhole,output,steam
TestGraphUtils -> public static void pipeSystemOutToNull();1447616654;Method useful for suppressing sysout printing;public static void pipeSystemOutToNull() {_		System.setOut(new PrintStream(new BlackholeOutputSteam()))__	};method,useful,for,suppressing,sysout,printing;public,static,void,pipe,system,out,to,null,system,set,out,new,print,stream,new,blackhole,output,steam
TestGraphUtils -> public static void pipeSystemOutToNull();1484681137;Method useful for suppressing sysout printing;public static void pipeSystemOutToNull() {_		System.setOut(new PrintStream(new BlackholeOutputSteam()))__	};method,useful,for,suppressing,sysout,printing;public,static,void,pipe,system,out,to,null,system,set,out,new,print,stream,new,blackhole,output,steam
TestGraphUtils -> public static void pipeSystemOutToNull();1495653033;Method useful for suppressing sysout printing.;public static void pipeSystemOutToNull() {_		System.setOut(new PrintStream(new BlackholeOutputSteam()))__	};method,useful,for,suppressing,sysout,printing;public,static,void,pipe,system,out,to,null,system,set,out,new,print,stream,new,blackhole,output,steam
TestGraphUtils -> public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData( 			ExecutionEnvironment env);1447616654;A graph with invalid vertex ids;public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData(_			ExecutionEnvironment env) {_		List<Vertex<Long, Long>> vertices = getLongLongVertices()___		vertices.remove(0)__		vertices.add(new Vertex<>(15L, 1L))___		return env.fromCollection(vertices)__	};a,graph,with,invalid,vertex,ids;public,static,data,set,vertex,long,long,get,long,long,invalid,vertex,data,execution,environment,env,list,vertex,long,long,vertices,get,long,long,vertices,vertices,remove,0,vertices,add,new,vertex,15l,1l,return,env,from,collection,vertices
TestGraphUtils -> public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData( 			ExecutionEnvironment env);1484681137;A graph with invalid vertex ids;public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData(_			ExecutionEnvironment env) {_		List<Vertex<Long, Long>> vertices = getLongLongVertices()___		vertices.remove(0)__		vertices.add(new Vertex<>(15L, 1L))___		return env.fromCollection(vertices)__	};a,graph,with,invalid,vertex,ids;public,static,data,set,vertex,long,long,get,long,long,invalid,vertex,data,execution,environment,env,list,vertex,long,long,vertices,get,long,long,vertices,vertices,remove,0,vertices,add,new,vertex,15l,1l,return,env,from,collection,vertices
TestGraphUtils -> public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData( 			ExecutionEnvironment env);1495653033;A graph with invalid vertex ids.;public static DataSet<Vertex<Long, Long>> getLongLongInvalidVertexData(_			ExecutionEnvironment env) {_		List<Vertex<Long, Long>> vertices = getLongLongVertices()___		vertices.remove(0)__		vertices.add(new Vertex<>(15L, 1L))___		return env.fromCollection(vertices)__	};a,graph,with,invalid,vertex,ids;public,static,data,set,vertex,long,long,get,long,long,invalid,vertex,data,execution,environment,env,list,vertex,long,long,vertices,get,long,long,vertices,vertices,remove,0,vertices,add,new,vertex,15l,1l,return,env,from,collection,vertices
