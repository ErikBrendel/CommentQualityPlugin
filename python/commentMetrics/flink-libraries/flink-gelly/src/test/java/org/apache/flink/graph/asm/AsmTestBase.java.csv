# id;timestamp;commentText;codeText;commentWords;codeWords
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor) 			throws Exception;1492096187;Generate an undirected RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify undirected --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename undirectedRMatGraph.csv__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return undirected RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue, NullValue, NullValue>(false))__	};generate,an,undirected,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,undirected,scale,scale,output,csv,filename,undirected,rmat,graph,csv,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,undirected,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,undirected,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,long,value,null,value,null,value,false
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor) 			throws Exception;1493134568;Generate an undirected RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify undirected --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename undirectedRMatGraph.csv__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return undirected RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue, NullValue, NullValue>(false))__	};generate,an,undirected,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,undirected,scale,scale,output,csv,filename,undirected,rmat,graph,csv,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,undirected,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,undirected,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,long,value,null,value,null,value,false
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor) 			throws Exception;1495653033;Generate an undirected RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify undirected --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename undirectedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return undirected RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<LongValue, NullValue, NullValue>(false))__	};generate,an,undirected,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,undirected,scale,scale,output,csv,filename,undirected,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,undirected,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,undirected,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,long,value,null,value,null,value,false
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor) 			throws Exception;1501064632;Generate an undirected RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify undirected --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename undirectedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return undirected RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<>(false))__	};generate,an,undirected,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,undirected,scale,scale,output,csv,filename,undirected,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,undirected,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,undirected,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,false
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor) 			throws Exception;1501532946;Generate an undirected RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify undirected --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename undirectedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return undirected RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> undirectedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.undirected.Simplify<>(false))__	};generate,an,undirected,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,undirected,scale,scale,output,csv,filename,undirected,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,undirected,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,undirected,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,undirected,simplify,false
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor) 			throws Exception;1492096187;Generate a directed RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify directed --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename directedRMatGraph.csv__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return directed RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue, NullValue, NullValue>())__	};generate,a,directed,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,directed,scale,scale,output,csv,filename,directed,rmat,graph,csv,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,directed,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,directed,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,directed,simplify,long,value,null,value,null,value
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor) 			throws Exception;1493134568;Generate a directed RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify directed --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename directedRMatGraph.csv__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return directed RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue, NullValue, NullValue>())__	};generate,a,directed,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,directed,scale,scale,output,csv,filename,directed,rmat,graph,csv,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,directed,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,directed,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,directed,simplify,long,value,null,value,null,value
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor) 			throws Exception;1495653033;Generate a directed RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify directed --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename directedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return directed RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.directed.Simplify<LongValue, NullValue, NullValue>())__	};generate,a,directed,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,directed,scale,scale,output,csv,filename,directed,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,directed,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,directed,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,directed,simplify,long,value,null,value,null,value
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor) 			throws Exception;1501064632;Generate a directed RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify directed --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename directedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return directed RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.directed.Simplify<>())__	};generate,a,directed,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,directed,scale,scale,output,csv,filename,directed,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,directed,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,directed,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,directed,simplify
AsmTestBase -> protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor) 			throws Exception;1501532946;Generate a directed RMat graph. Tests are usually run on a graph with_scale=10 and edgeFactor=16 but algorithms generating very large DataSets_require smaller input graphs.__<p>The examples program can write this graph as a CSV file for verifying_algorithm results with external libraries:__<pre>_./bin/flink run examples/flink-gelly-examples_*.jar --algorithm EdgeList \_--input RMatGraph --type long --simplify directed --scale $SCALE --edge_factor $EDGE_FACTOR \_--output csv --filename directedRMatGraph.csv_</pre>__@param scale vertices are generated in the range [0, 2<sup>scale</sup>)_@param edgeFactor the edge count is {@code edgeFactor} * 2<sup>scale</sup>_@return directed RMat graph_@throws Exception on error;protected Graph<LongValue, NullValue, NullValue> directedRMatGraph(int scale, int edgeFactor)_			throws Exception {_		long vertexCount = 1L << scale__		long edgeCount = edgeFactor * vertexCount___		return new RMatGraph<>(env, new JDKRandomGeneratorFactory(), vertexCount, edgeCount)_			.generate()_			.run(new org.apache.flink.graph.asm.simple.directed.Simplify<>())__	};generate,a,directed,rmat,graph,tests,are,usually,run,on,a,graph,with,scale,10,and,edge,factor,16,but,algorithms,generating,very,large,data,sets,require,smaller,input,graphs,p,the,examples,program,can,write,this,graph,as,a,csv,file,for,verifying,algorithm,results,with,external,libraries,pre,bin,flink,run,examples,flink,gelly,jar,algorithm,edge,list,input,rmat,graph,type,long,simplify,directed,scale,scale,output,csv,filename,directed,rmat,graph,csv,pre,param,scale,vertices,are,generated,in,the,range,0,2,sup,scale,sup,param,edge,factor,the,edge,count,is,code,edge,factor,2,sup,scale,sup,return,directed,rmat,graph,throws,exception,on,error;protected,graph,long,value,null,value,null,value,directed,rmat,graph,int,scale,int,edge,factor,throws,exception,long,vertex,count,1l,scale,long,edge,count,edge,factor,vertex,count,return,new,rmat,graph,env,new,jdkrandom,generator,factory,vertex,count,edge,count,generate,run,new,org,apache,flink,graph,asm,simple,directed,simplify
