# id;timestamp;commentText;codeText;commentWords;codeWords
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1460571929;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1481309930;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1484685504;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1489139887;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1495819075;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism);1505445925;Verify operator parallelism.__@param env the Flink execution environment._@param expectedParallelism expected operator parallelism;public static void verifyParallelism(ExecutionEnvironment env, int expectedParallelism) {_		env.setParallelism(2 * expectedParallelism)___		Optimizer compiler = new Optimizer(null, new DefaultCostEstimator(), new Configuration())__		OptimizedPlan optimizedPlan = compiler.compile(env.createProgramPlan())___		List<PlanNode> queue = new ArrayList<>()__		queue.addAll(optimizedPlan.getDataSinks())___		while (queue.size() > 0) {_			PlanNode node = queue.remove(queue.size() - 1)___			_			_			assertTrue("Wrong parallelism for " + node.toString(), node.getParallelism() <= expectedParallelism)___			for (Channel channel : node.getInputs()) {_				queue.add(channel.getSource())__			}_		}_	};verify,operator,parallelism,param,env,the,flink,execution,environment,param,expected,parallelism,expected,operator,parallelism;public,static,void,verify,parallelism,execution,environment,env,int,expected,parallelism,env,set,parallelism,2,expected,parallelism,optimizer,compiler,new,optimizer,null,new,default,cost,estimator,new,configuration,optimized,plan,optimized,plan,compiler,compile,env,create,program,plan,list,plan,node,queue,new,array,list,queue,add,all,optimized,plan,get,data,sinks,while,queue,size,0,plan,node,node,queue,remove,queue,size,1,assert,true,wrong,parallelism,for,node,to,string,node,get,parallelism,expected,parallelism,for,channel,channel,node,get,inputs,queue,add,channel,get,source
TestUtils -> public static <K,VV,EV> void compareGraph(Graph<K,VV,EV> graph, String expectedVertices, String expectedEdges) 			throws Exception;1460571929;Compare graph vertices and edges against expected values.__@param graph graph under test_@param expectedVertices vertex labels separated by semi-colons_ whitespace is ignored_@param expectedEdges edges of the form "source,target" separated by semi-colons_ whitespace is ignored_@param <K> the key type for edge and vertex identifiers_@param <VV> the value type for vertices_@param <EV> the value type for edges_@throws Exception;public static <K,VV,EV> void compareGraph(Graph<K,VV,EV> graph, String expectedVertices, String expectedEdges)_			throws Exception {_		_		if (expectedVertices != null) {_			List<String> resultVertices = new ArrayList<>()___			for (Vertex<K, VV> vertex : graph.getVertices().collect()) {_				resultVertices.add(vertex.f0.toString())__			}__			TestBaseUtils.compareResultAsText(resultVertices, expectedVertices.replaceAll("\\s","").replace("_", "\n"))__		}__		_		if (expectedEdges != null) {_			List<String> resultEdges = new ArrayList<>()___			for (Edge<K, EV> edge : graph.getEdges().collect()) {_				resultEdges.add(edge.f0.toString() + "," + edge.f1.toString())__			}__			TestBaseUtils.compareResultAsText(resultEdges, expectedEdges.replaceAll("\\s","").replace("_", "\n"))__		}_	};compare,graph,vertices,and,edges,against,expected,values,param,graph,graph,under,test,param,expected,vertices,vertex,labels,separated,by,semi,colons,whitespace,is,ignored,param,expected,edges,edges,of,the,form,source,target,separated,by,semi,colons,whitespace,is,ignored,param,k,the,key,type,for,edge,and,vertex,identifiers,param,vv,the,value,type,for,vertices,param,ev,the,value,type,for,edges,throws,exception;public,static,k,vv,ev,void,compare,graph,graph,k,vv,ev,graph,string,expected,vertices,string,expected,edges,throws,exception,if,expected,vertices,null,list,string,result,vertices,new,array,list,for,vertex,k,vv,vertex,graph,get,vertices,collect,result,vertices,add,vertex,f0,to,string,test,base,utils,compare,result,as,text,result,vertices,expected,vertices,replace,all,s,replace,n,if,expected,edges,null,list,string,result,edges,new,array,list,for,edge,k,ev,edge,graph,get,edges,collect,result,edges,add,edge,f0,to,string,edge,f1,to,string,test,base,utils,compare,result,as,text,result,edges,expected,edges,replace,all,s,replace,n
TestUtils -> public static <K,VV,EV> void compareGraph(Graph<K,VV,EV> graph, String expectedVertices, String expectedEdges) 			throws Exception;1481309930;Compare graph vertices and edges against expected values.__@param graph graph under test_@param expectedVertices vertex labels separated by semi-colons_ whitespace is ignored_@param expectedEdges edges of the form "source,target" separated by semi-colons_ whitespace is ignored_@param <K> the key type for edge and vertex identifiers_@param <VV> the value type for vertices_@param <EV> the value type for edges_@throws Exception;public static <K,VV,EV> void compareGraph(Graph<K,VV,EV> graph, String expectedVertices, String expectedEdges)_			throws Exception {_		compareVertices(graph, expectedVertices)__		compareEdges(graph, expectedEdges)__	};compare,graph,vertices,and,edges,against,expected,values,param,graph,graph,under,test,param,expected,vertices,vertex,labels,separated,by,semi,colons,whitespace,is,ignored,param,expected,edges,edges,of,the,form,source,target,separated,by,semi,colons,whitespace,is,ignored,param,k,the,key,type,for,edge,and,vertex,identifiers,param,vv,the,value,type,for,vertices,param,ev,the,value,type,for,edges,throws,exception;public,static,k,vv,ev,void,compare,graph,graph,k,vv,ev,graph,string,expected,vertices,string,expected,edges,throws,exception,compare,vertices,graph,expected,vertices,compare,edges,graph,expected,edges
TestUtils -> public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges) 			throws Exception;1484685504;Compare graph vertices and edges against expected values.__@param graph graph under test_@param expectedVertices vertex labels separated by semi-colons_ whitespace is ignored_@param expectedEdges edges of the form "source,target" separated by semi-colons_ whitespace is ignored_@param <K> the key type for edge and vertex identifiers_@param <VV> the value type for vertices_@param <EV> the value type for edges_@throws Exception;public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges)_			throws Exception {_		compareVertices(graph, expectedVertices)__		compareEdges(graph, expectedEdges)__	};compare,graph,vertices,and,edges,against,expected,values,param,graph,graph,under,test,param,expected,vertices,vertex,labels,separated,by,semi,colons,whitespace,is,ignored,param,expected,edges,edges,of,the,form,source,target,separated,by,semi,colons,whitespace,is,ignored,param,k,the,key,type,for,edge,and,vertex,identifiers,param,vv,the,value,type,for,vertices,param,ev,the,value,type,for,edges,throws,exception;public,static,k,vv,ev,void,compare,graph,graph,k,vv,ev,graph,string,expected,vertices,string,expected,edges,throws,exception,compare,vertices,graph,expected,vertices,compare,edges,graph,expected,edges
TestUtils -> public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges) 			throws Exception;1489139887;Compare graph vertices and edges against expected values.__@param graph graph under test_@param expectedVertices vertex labels separated by semi-colons_ whitespace is ignored_@param expectedEdges edges of the form "source,target" separated by semi-colons_ whitespace is ignored_@param <K> the key type for edge and vertex identifiers_@param <VV> the value type for vertices_@param <EV> the value type for edges_@throws Exception;public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges)_			throws Exception {_		compareVertices(graph, expectedVertices)__		compareEdges(graph, expectedEdges)__	};compare,graph,vertices,and,edges,against,expected,values,param,graph,graph,under,test,param,expected,vertices,vertex,labels,separated,by,semi,colons,whitespace,is,ignored,param,expected,edges,edges,of,the,form,source,target,separated,by,semi,colons,whitespace,is,ignored,param,k,the,key,type,for,edge,and,vertex,identifiers,param,vv,the,value,type,for,vertices,param,ev,the,value,type,for,edges,throws,exception;public,static,k,vv,ev,void,compare,graph,graph,k,vv,ev,graph,string,expected,vertices,string,expected,edges,throws,exception,compare,vertices,graph,expected,vertices,compare,edges,graph,expected,edges
TestUtils -> public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges) 			throws Exception;1495819075;Compare graph vertices and edges against expected values.__@param graph graph under test_@param expectedVertices vertex labels separated by semi-colons_ whitespace is ignored_@param expectedEdges edges of the form "source,target" separated by semi-colons_ whitespace is ignored_@param <K> the key type for edge and vertex identifiers_@param <VV> the value type for vertices_@param <EV> the value type for edges_@throws Exception;public static <K, VV, EV> void compareGraph(Graph<K, VV, EV> graph, String expectedVertices, String expectedEdges)_			throws Exception {_		compareVertices(graph, expectedVertices)__		compareEdges(graph, expectedEdges)__	};compare,graph,vertices,and,edges,against,expected,values,param,graph,graph,under,test,param,expected,vertices,vertex,labels,separated,by,semi,colons,whitespace,is,ignored,param,expected,edges,edges,of,the,form,source,target,separated,by,semi,colons,whitespace,is,ignored,param,k,the,key,type,for,edge,and,vertex,identifiers,param,vv,the,value,type,for,vertices,param,ev,the,value,type,for,edges,throws,exception;public,static,k,vv,ev,void,compare,graph,graph,k,vv,ev,graph,string,expected,vertices,string,expected,edges,throws,exception,compare,vertices,graph,expected,vertices,compare,edges,graph,expected,edges
