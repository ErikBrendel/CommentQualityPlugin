# id;timestamp;commentText;codeText;commentWords;codeWords
HITSTest -> @Test 	public void testWithRMatGraph() 			throws Exception;1495653033;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedRMatGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in [0, 1, 2, 8, 13, 29, 109, 394, 652, 1020]:_print('{}: {}, {}'.format(key, hits[0][str(key)]/hubbiness_norm, hits[1][str(key)]/authority_norm));@Test_	public void testWithRMatGraph()_			throws Exception {_		DataSet<Result<LongValue>> hits = directedRMatGraph(10, 16)_			.run(new HITS<LongValue, NullValue, NullValue>(0.000001))___		Map<Long, Result<LongValue>> results = new HashMap<>()__		for (Result<LongValue> result :  new Collect<Result<LongValue>>().run(hits).execute()) {_			results.put(result.f0.getValue(), result)__		}__		assertEquals(902, results.size())___		Map<Long, Tuple2<Double, Double>> expectedResults = new HashMap<>()__		_		expectedResults.put(0L, Tuple2.of(0.231077034747, 0.238110214937))__		expectedResults.put(1L, Tuple2.of(0.162364053933, 0.169679504287))__		expectedResults.put(2L, Tuple2.of(0.162412612499, 0.161015667261))__		expectedResults.put(8L, Tuple2.of(0.167064641724, 0.158592966505))__		expectedResults.put(13L, Tuple2.of(0.041915595624, 0.0407091625629))__		expectedResults.put(29L, Tuple2.of(0.0102017346511, 0.0146218045999))__		expectedResults.put(109L, Tuple2.of(0.00190531000389, 0.00481944993023))__		expectedResults.put(394L, Tuple2.of(0.0122287016161, 0.0147987969538))__		expectedResults.put(652L, Tuple2.of(0.010966659242, 0.0113713306749))__		expectedResults.put(1020L, Tuple2.of(0.0, 0.000326973732127))___		for (Map.Entry<Long, Tuple2<Double, Double>> expected : expectedResults.entrySet()) {_			double hubScore = results.get(expected.getKey()).getHubScore().getValue()__			double authorityScore = results.get(expected.getKey()).getAuthorityScore().getValue()___			assertEquals(expected.getValue().f0, hubScore, 0.00001)__			assertEquals(expected.getValue().f1, authorityScore, 0.00001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,rmat,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,0,1,2,8,13,29,109,394,652,1020,print,format,key,hits,0,str,key,hits,1,str,key;test,public,void,test,with,rmat,graph,throws,exception,data,set,result,long,value,hits,directed,rmat,graph,10,16,run,new,hits,long,value,null,value,null,value,0,000001,map,long,result,long,value,results,new,hash,map,for,result,long,value,result,new,collect,result,long,value,run,hits,execute,results,put,result,f0,get,value,result,assert,equals,902,results,size,map,long,tuple2,double,double,expected,results,new,hash,map,expected,results,put,0l,tuple2,of,0,231077034747,0,238110214937,expected,results,put,1l,tuple2,of,0,162364053933,0,169679504287,expected,results,put,2l,tuple2,of,0,162412612499,0,161015667261,expected,results,put,8l,tuple2,of,0,167064641724,0,158592966505,expected,results,put,13l,tuple2,of,0,041915595624,0,0407091625629,expected,results,put,29l,tuple2,of,0,0102017346511,0,0146218045999,expected,results,put,109l,tuple2,of,0,00190531000389,0,00481944993023,expected,results,put,394l,tuple2,of,0,0122287016161,0,0147987969538,expected,results,put,652l,tuple2,of,0,010966659242,0,0113713306749,expected,results,put,1020l,tuple2,of,0,0,0,000326973732127,for,map,entry,long,tuple2,double,double,expected,expected,results,entry,set,double,hub,score,results,get,expected,get,key,get,hub,score,get,value,double,authority,score,results,get,expected,get,key,get,authority,score,get,value,assert,equals,expected,get,value,f0,hub,score,0,00001,assert,equals,expected,get,value,f1,authority,score,0,00001
HITSTest -> @Test 	public void testWithRMatGraph() 			throws Exception;1498486910;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedRMatGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in [0, 1, 2, 8, 13, 29, 109, 394, 652, 1020]:_print('{}: {}, {}'.format(key, hits[0][str(key)]/hubbiness_norm, hits[1][str(key)]/authority_norm));@Test_	public void testWithRMatGraph()_			throws Exception {_		DataSet<Result<LongValue>> hits = directedRMatGraph(10, 16)_			.run(new HITS<LongValue, NullValue, NullValue>(0.000001))___		Map<Long, Result<LongValue>> results = new HashMap<>()__		for (Result<LongValue> result :  new Collect<Result<LongValue>>().run(hits).execute()) {_			results.put(result.getVertexId0().getValue(), result)__		}__		assertEquals(902, results.size())___		Map<Long, Tuple2<Double, Double>> expectedResults = new HashMap<>()__		_		expectedResults.put(0L, Tuple2.of(0.231077034747, 0.238110214937))__		expectedResults.put(1L, Tuple2.of(0.162364053933, 0.169679504287))__		expectedResults.put(2L, Tuple2.of(0.162412612499, 0.161015667261))__		expectedResults.put(8L, Tuple2.of(0.167064641724, 0.158592966505))__		expectedResults.put(13L, Tuple2.of(0.041915595624, 0.0407091625629))__		expectedResults.put(29L, Tuple2.of(0.0102017346511, 0.0146218045999))__		expectedResults.put(109L, Tuple2.of(0.00190531000389, 0.00481944993023))__		expectedResults.put(394L, Tuple2.of(0.0122287016161, 0.0147987969538))__		expectedResults.put(652L, Tuple2.of(0.010966659242, 0.0113713306749))__		expectedResults.put(1020L, Tuple2.of(0.0, 0.000326973732127))___		for (Map.Entry<Long, Tuple2<Double, Double>> expected : expectedResults.entrySet()) {_			double hubScore = results.get(expected.getKey()).getHubScore().getValue()__			double authorityScore = results.get(expected.getKey()).getAuthorityScore().getValue()___			assertEquals(expected.getValue().f0, hubScore, 0.00001)__			assertEquals(expected.getValue().f1, authorityScore, 0.00001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,rmat,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,0,1,2,8,13,29,109,394,652,1020,print,format,key,hits,0,str,key,hits,1,str,key;test,public,void,test,with,rmat,graph,throws,exception,data,set,result,long,value,hits,directed,rmat,graph,10,16,run,new,hits,long,value,null,value,null,value,0,000001,map,long,result,long,value,results,new,hash,map,for,result,long,value,result,new,collect,result,long,value,run,hits,execute,results,put,result,get,vertex,id0,get,value,result,assert,equals,902,results,size,map,long,tuple2,double,double,expected,results,new,hash,map,expected,results,put,0l,tuple2,of,0,231077034747,0,238110214937,expected,results,put,1l,tuple2,of,0,162364053933,0,169679504287,expected,results,put,2l,tuple2,of,0,162412612499,0,161015667261,expected,results,put,8l,tuple2,of,0,167064641724,0,158592966505,expected,results,put,13l,tuple2,of,0,041915595624,0,0407091625629,expected,results,put,29l,tuple2,of,0,0102017346511,0,0146218045999,expected,results,put,109l,tuple2,of,0,00190531000389,0,00481944993023,expected,results,put,394l,tuple2,of,0,0122287016161,0,0147987969538,expected,results,put,652l,tuple2,of,0,010966659242,0,0113713306749,expected,results,put,1020l,tuple2,of,0,0,0,000326973732127,for,map,entry,long,tuple2,double,double,expected,expected,results,entry,set,double,hub,score,results,get,expected,get,key,get,hub,score,get,value,double,authority,score,results,get,expected,get,key,get,authority,score,get,value,assert,equals,expected,get,value,f0,hub,score,0,00001,assert,equals,expected,get,value,f1,authority,score,0,00001
HITSTest -> @Test 	public void testWithRMatGraph() 			throws Exception;1501532946;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedRMatGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in [0, 1, 2, 8, 13, 29, 109, 394, 652, 1020]:_print('{}: {}, {}'.format(key, hits[0][str(key)]/hubbiness_norm, hits[1][str(key)]/authority_norm));@Test_	public void testWithRMatGraph()_			throws Exception {_		DataSet<Result<LongValue>> hits = directedRMatGraph(10, 16)_			.run(new HITS<>(0.000001))___		Map<Long, Result<LongValue>> results = new HashMap<>()__		for (Result<LongValue> result :  new Collect<Result<LongValue>>().run(hits).execute()) {_			results.put(result.getVertexId0().getValue(), result)__		}__		assertEquals(902, results.size())___		Map<Long, Tuple2<Double, Double>> expectedResults = new HashMap<>()__		_		expectedResults.put(0L, Tuple2.of(0.231077034747, 0.238110214937))__		expectedResults.put(1L, Tuple2.of(0.162364053933, 0.169679504287))__		expectedResults.put(2L, Tuple2.of(0.162412612499, 0.161015667261))__		expectedResults.put(8L, Tuple2.of(0.167064641724, 0.158592966505))__		expectedResults.put(13L, Tuple2.of(0.041915595624, 0.0407091625629))__		expectedResults.put(29L, Tuple2.of(0.0102017346511, 0.0146218045999))__		expectedResults.put(109L, Tuple2.of(0.00190531000389, 0.00481944993023))__		expectedResults.put(394L, Tuple2.of(0.0122287016161, 0.0147987969538))__		expectedResults.put(652L, Tuple2.of(0.010966659242, 0.0113713306749))__		expectedResults.put(1020L, Tuple2.of(0.0, 0.000326973732127))___		for (Map.Entry<Long, Tuple2<Double, Double>> expected : expectedResults.entrySet()) {_			double hubScore = results.get(expected.getKey()).getHubScore().getValue()__			double authorityScore = results.get(expected.getKey()).getAuthorityScore().getValue()___			assertEquals(expected.getValue().f0, hubScore, 0.00001)__			assertEquals(expected.getValue().f1, authorityScore, 0.00001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,rmat,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,0,1,2,8,13,29,109,394,652,1020,print,format,key,hits,0,str,key,hits,1,str,key;test,public,void,test,with,rmat,graph,throws,exception,data,set,result,long,value,hits,directed,rmat,graph,10,16,run,new,hits,0,000001,map,long,result,long,value,results,new,hash,map,for,result,long,value,result,new,collect,result,long,value,run,hits,execute,results,put,result,get,vertex,id0,get,value,result,assert,equals,902,results,size,map,long,tuple2,double,double,expected,results,new,hash,map,expected,results,put,0l,tuple2,of,0,231077034747,0,238110214937,expected,results,put,1l,tuple2,of,0,162364053933,0,169679504287,expected,results,put,2l,tuple2,of,0,162412612499,0,161015667261,expected,results,put,8l,tuple2,of,0,167064641724,0,158592966505,expected,results,put,13l,tuple2,of,0,041915595624,0,0407091625629,expected,results,put,29l,tuple2,of,0,0102017346511,0,0146218045999,expected,results,put,109l,tuple2,of,0,00190531000389,0,00481944993023,expected,results,put,394l,tuple2,of,0,0122287016161,0,0147987969538,expected,results,put,652l,tuple2,of,0,010966659242,0,0113713306749,expected,results,put,1020l,tuple2,of,0,0,0,000326973732127,for,map,entry,long,tuple2,double,double,expected,expected,results,entry,set,double,hub,score,results,get,expected,get,key,get,hub,score,get,value,double,authority,score,results,get,expected,get,key,get,authority,score,get,value,assert,equals,expected,get,value,f0,hub,score,0,00001,assert,equals,expected,get,value,f1,authority,score,0,00001
HITSTest -> @Test 	public void testWithSimpleGraph() 			throws Exception;1495653033;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedSimpleGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in sorted(hits[0]):_print('{}: {}, {}'.format(key, hits[0][key]/hubbiness_norm, hits[1][key]/authority_norm));@Test_	public void testWithSimpleGraph()_			throws Exception {_		DataSet<Result<IntValue>> hits = new HITS<IntValue, NullValue, NullValue>(20)_			.run(directedSimpleGraph)___		List<Tuple2<Double, Double>> expectedResults = new ArrayList<>()__		expectedResults.add(Tuple2.of(0.544643396306, 0.0))__		expectedResults.add(Tuple2.of(0.0, 0.836329395866))__		expectedResults.add(Tuple2.of(0.607227031134, 0.268492526138))__		expectedResults.add(Tuple2.of(0.544643396306, 0.395444899355))__		expectedResults.add(Tuple2.of(0.0, 0.268492526138))__		expectedResults.add(Tuple2.of(0.194942233447, 0.0))___		for (Result<IntValue> result : hits.collect()) {_			int id = result.f0.getValue()__			assertEquals(expectedResults.get(id).f0, result.getHubScore().getValue(), 0.000001)__			assertEquals(expectedResults.get(id).f1, result.getAuthorityScore().getValue(), 0.000001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,simple,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,sorted,hits,0,print,format,key,hits,0,key,hits,1,key;test,public,void,test,with,simple,graph,throws,exception,data,set,result,int,value,hits,new,hits,int,value,null,value,null,value,20,run,directed,simple,graph,list,tuple2,double,double,expected,results,new,array,list,expected,results,add,tuple2,of,0,544643396306,0,0,expected,results,add,tuple2,of,0,0,0,836329395866,expected,results,add,tuple2,of,0,607227031134,0,268492526138,expected,results,add,tuple2,of,0,544643396306,0,395444899355,expected,results,add,tuple2,of,0,0,0,268492526138,expected,results,add,tuple2,of,0,194942233447,0,0,for,result,int,value,result,hits,collect,int,id,result,f0,get,value,assert,equals,expected,results,get,id,f0,result,get,hub,score,get,value,0,000001,assert,equals,expected,results,get,id,f1,result,get,authority,score,get,value,0,000001
HITSTest -> @Test 	public void testWithSimpleGraph() 			throws Exception;1498486910;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedSimpleGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in sorted(hits[0]):_print('{}: {}, {}'.format(key, hits[0][key]/hubbiness_norm, hits[1][key]/authority_norm));@Test_	public void testWithSimpleGraph()_			throws Exception {_		DataSet<Result<IntValue>> hits = new HITS<IntValue, NullValue, NullValue>(20)_			.run(directedSimpleGraph)___		List<Tuple2<Double, Double>> expectedResults = new ArrayList<>()__		expectedResults.add(Tuple2.of(0.544643396306, 0.0))__		expectedResults.add(Tuple2.of(0.0, 0.836329395866))__		expectedResults.add(Tuple2.of(0.607227031134, 0.268492526138))__		expectedResults.add(Tuple2.of(0.544643396306, 0.395444899355))__		expectedResults.add(Tuple2.of(0.0, 0.268492526138))__		expectedResults.add(Tuple2.of(0.194942233447, 0.0))___		for (Result<IntValue> result : hits.collect()) {_			int id = result.getVertexId0().getValue()__			assertEquals(expectedResults.get(id).f0, result.getHubScore().getValue(), 0.000001)__			assertEquals(expectedResults.get(id).f1, result.getAuthorityScore().getValue(), 0.000001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,simple,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,sorted,hits,0,print,format,key,hits,0,key,hits,1,key;test,public,void,test,with,simple,graph,throws,exception,data,set,result,int,value,hits,new,hits,int,value,null,value,null,value,20,run,directed,simple,graph,list,tuple2,double,double,expected,results,new,array,list,expected,results,add,tuple2,of,0,544643396306,0,0,expected,results,add,tuple2,of,0,0,0,836329395866,expected,results,add,tuple2,of,0,607227031134,0,268492526138,expected,results,add,tuple2,of,0,544643396306,0,395444899355,expected,results,add,tuple2,of,0,0,0,268492526138,expected,results,add,tuple2,of,0,194942233447,0,0,for,result,int,value,result,hits,collect,int,id,result,get,vertex,id0,get,value,assert,equals,expected,results,get,id,f0,result,get,hub,score,get,value,0,000001,assert,equals,expected,results,get,id,f1,result,get,authority,score,get,value,0,000001
HITSTest -> @Test 	public void testWithSimpleGraph() 			throws Exception;1501532946;This test result can be verified with the following Python script.__import math_import networkx as nx__graph=nx.read_edgelist('directedSimpleGraph.csv', delimiter=',', create_using=nx.DiGraph())_hits=nx.algorithms.link_analysis.hits(graph)__hubbiness_norm=math.sqrt(sum(v*v for v in hits[0].values()))_authority_norm=math.sqrt(sum(v*v for v in hits[1].values()))__for key in sorted(hits[0]):_print('{}: {}, {}'.format(key, hits[0][key]/hubbiness_norm, hits[1][key]/authority_norm));@Test_	public void testWithSimpleGraph()_			throws Exception {_		DataSet<Result<IntValue>> hits = new HITS<IntValue, NullValue, NullValue>(20)_			.run(directedSimpleGraph)___		List<Tuple2<Double, Double>> expectedResults = new ArrayList<>()__		expectedResults.add(Tuple2.of(0.544643396306, 0.0))__		expectedResults.add(Tuple2.of(0.0, 0.836329395866))__		expectedResults.add(Tuple2.of(0.607227031134, 0.268492526138))__		expectedResults.add(Tuple2.of(0.544643396306, 0.395444899355))__		expectedResults.add(Tuple2.of(0.0, 0.268492526138))__		expectedResults.add(Tuple2.of(0.194942233447, 0.0))___		for (Result<IntValue> result : hits.collect()) {_			int id = result.getVertexId0().getValue()__			assertEquals(expectedResults.get(id).f0, result.getHubScore().getValue(), 0.000001)__			assertEquals(expectedResults.get(id).f1, result.getAuthorityScore().getValue(), 0.000001)__		}_	};this,test,result,can,be,verified,with,the,following,python,script,import,math,import,networkx,as,nx,graph,nx,directed,simple,graph,csv,delimiter,nx,di,graph,hits,nx,algorithms,hits,graph,math,sqrt,sum,v,v,for,v,in,hits,0,values,math,sqrt,sum,v,v,for,v,in,hits,1,values,for,key,in,sorted,hits,0,print,format,key,hits,0,key,hits,1,key;test,public,void,test,with,simple,graph,throws,exception,data,set,result,int,value,hits,new,hits,int,value,null,value,null,value,20,run,directed,simple,graph,list,tuple2,double,double,expected,results,new,array,list,expected,results,add,tuple2,of,0,544643396306,0,0,expected,results,add,tuple2,of,0,0,0,836329395866,expected,results,add,tuple2,of,0,607227031134,0,268492526138,expected,results,add,tuple2,of,0,544643396306,0,395444899355,expected,results,add,tuple2,of,0,0,0,268492526138,expected,results,add,tuple2,of,0,194942233447,0,0,for,result,int,value,result,hits,collect,int,id,result,get,vertex,id0,get,value,assert,equals,expected,results,get,id,f0,result,get,hub,score,get,value,0,000001,assert,equals,expected,results,get,id,f1,result,get,authority,score,get,value,0,000001
