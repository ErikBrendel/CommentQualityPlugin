# id;timestamp;commentText;codeText;commentWords;codeWords
DoubleSummaryAggregatorTest -> protected NumericColumnSummary<Double> summarize(Double... values);1460990858;Helper method for summarizing a list of values.__This method breaks the rule of "testing only one thing" by aggregating and combining_a bunch of different ways.;protected NumericColumnSummary<Double> summarize(Double... values) {_		return new AggregateCombineHarness<Double,NumericColumnSummary<Double>,DoubleSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Double> result1, NumericColumnSummary<Double> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,double,summarize,double,values,return,new,aggregate,combine,harness,double,numeric,column,summary,double,double,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,double,result1,numeric,column,summary,double,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0,assert,assert,equals,result1,get,max,result2,get,max,0,0,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
DoubleSummaryAggregatorTest -> protected NumericColumnSummary<Double> summarize(Double... values);1499940742;Helper method for summarizing a list of values.__This method breaks the rule of "testing only one thing" by aggregating and combining_a bunch of different ways.;protected NumericColumnSummary<Double> summarize(Double... values) {_		return new AggregateCombineHarness<Double,NumericColumnSummary<Double>,DoubleSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Double> result1, NumericColumnSummary<Double> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,double,summarize,double,values,return,new,aggregate,combine,harness,double,numeric,column,summary,double,double,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,double,result1,numeric,column,summary,double,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0,assert,assert,equals,result1,get,max,result2,get,max,0,0,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
DoubleSummaryAggregatorTest -> protected NumericColumnSummary<Double> summarize(Double... values);1501495929;Helper method for summarizing a list of values.__<p>This method breaks the rule of "testing only one thing" by aggregating and combining_a bunch of different ways.;protected NumericColumnSummary<Double> summarize(Double... values) {_		return new AggregateCombineHarness<Double, NumericColumnSummary<Double>, DoubleSummaryAggregator>() {__			@Override_			protected void compareResults(NumericColumnSummary<Double> result1, NumericColumnSummary<Double> result2) {_				Assert.assertEquals(result1.getMin(), result2.getMin(), 0.0)__				Assert.assertEquals(result1.getMax(), result2.getMax(), 0.0)__				Assert.assertEquals(result1.getMean(), result2.getMean(), 1e-12d)__				Assert.assertEquals(result1.getVariance(), result2.getVariance(), 1e-9d)__				Assert.assertEquals(result1.getStandardDeviation(), result2.getStandardDeviation(), 1e-12d)__			}__		}.summarize(values)__	};helper,method,for,summarizing,a,list,of,values,p,this,method,breaks,the,rule,of,testing,only,one,thing,by,aggregating,and,combining,a,bunch,of,different,ways;protected,numeric,column,summary,double,summarize,double,values,return,new,aggregate,combine,harness,double,numeric,column,summary,double,double,summary,aggregator,override,protected,void,compare,results,numeric,column,summary,double,result1,numeric,column,summary,double,result2,assert,assert,equals,result1,get,min,result2,get,min,0,0,assert,assert,equals,result1,get,max,result2,get,max,0,0,assert,assert,equals,result1,get,mean,result2,get,mean,1e,12d,assert,assert,equals,result1,get,variance,result2,get,variance,1e,9d,assert,assert,equals,result1,get,standard,deviation,result2,get,standard,deviation,1e,12d,summarize,values
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1460990858;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Double[] q1x = { 10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0, 12.0, 7.0, 5.0 }__		final Double[] q4x = { 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 19.0, 8.0, 8.0, 8.0 }___		NumericColumnSummary<Double> q1 = summarize(q1x)__		NumericColumnSummary<Double> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,double,q1x,10,0,8,0,13,0,9,0,11,0,14,0,6,0,4,0,12,0,7,0,5,0,final,double,q4x,8,0,8,0,8,0,8,0,8,0,8,0,8,0,19,0,8,0,8,0,8,0,numeric,column,summary,double,q1,summarize,q1x,numeric,column,summary,double,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0,assert,assert,equals,9,0,q4,get,mean,double,value,0,0,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1499940742;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Double[] q1x = { 10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0, 12.0, 7.0, 5.0 }__		final Double[] q4x = { 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 19.0, 8.0, 8.0, 8.0 }___		NumericColumnSummary<Double> q1 = summarize(q1x)__		NumericColumnSummary<Double> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,double,q1x,10,0,8,0,13,0,9,0,11,0,14,0,6,0,4,0,12,0,7,0,5,0,final,double,q4x,8,0,8,0,8,0,8,0,8,0,8,0,8,0,19,0,8,0,8,0,8,0,numeric,column,summary,double,q1,summarize,q1x,numeric,column,summary,double,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0,assert,assert,equals,9,0,q4,get,mean,double,value,0,0,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetXValues() throws Exception;1501495929;Use some values from Anscombe's Quartet for testing.__<p>There was no particular reason to use these except they have known means and variance.__<p>https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetXValues() throws Exception {__		final Double[] q1x = { 10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0, 12.0, 7.0, 5.0 }__		final Double[] q4x = { 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 19.0, 8.0, 8.0, 8.0 }___		NumericColumnSummary<Double> q1 = summarize(q1x)__		NumericColumnSummary<Double> q4 = summarize(q4x)___		Assert.assertEquals(9.0, q1.getMean().doubleValue(), 0.0)__		Assert.assertEquals(9.0, q4.getMean().doubleValue(), 0.0)___		Assert.assertEquals(11.0, q1.getVariance().doubleValue(), 1e-10d)__		Assert.assertEquals(11.0, q4.getVariance().doubleValue(), 1e-10d)___		double stddev = Math.sqrt(11.0)__		Assert.assertEquals(stddev, q1.getStandardDeviation().doubleValue(), 1e-10d)__		Assert.assertEquals(stddev, q4.getStandardDeviation().doubleValue(), 1e-10d)__	};use,some,values,from,anscombe,s,quartet,for,testing,p,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,p,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,xvalues,throws,exception,final,double,q1x,10,0,8,0,13,0,9,0,11,0,14,0,6,0,4,0,12,0,7,0,5,0,final,double,q4x,8,0,8,0,8,0,8,0,8,0,8,0,8,0,19,0,8,0,8,0,8,0,numeric,column,summary,double,q1,summarize,q1x,numeric,column,summary,double,q4,summarize,q4x,assert,assert,equals,9,0,q1,get,mean,double,value,0,0,assert,assert,equals,9,0,q4,get,mean,double,value,0,0,assert,assert,equals,11,0,q1,get,variance,double,value,1e,10d,assert,assert,equals,11,0,q4,get,variance,double,value,1e,10d,double,stddev,math,sqrt,11,0,assert,assert,equals,stddev,q1,get,standard,deviation,double,value,1e,10d,assert,assert,equals,stddev,q4,get,standard,deviation,double,value,1e,10d
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1460990858;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Double[] q1y = { 8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68 }__		final Double[] q2y = { 9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74 }__		final Double[] q3y = { 7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73 }__		final Double[] q4y = { 6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89 }___		NumericColumnSummary<Double> q1 = summarize(q1y)__		NumericColumnSummary<Double> q2 = summarize(q2y)__		NumericColumnSummary<Double> q3 = summarize(q3y)__		NumericColumnSummary<Double> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,double,q1y,8,04,6,95,7,58,8,81,8,33,9,96,7,24,4,26,10,84,4,82,5,68,final,double,q2y,9,14,8,14,8,74,8,77,9,26,8,1,6,13,3,1,9,13,7,26,4,74,final,double,q3y,7,46,6,77,12,74,7,11,7,81,8,84,6,08,5,39,8,15,6,42,5,73,final,double,q4y,6,58,5,76,7,71,8,84,8,47,7,04,5,25,12,5,5,56,7,91,6,89,numeric,column,summary,double,q1,summarize,q1y,numeric,column,summary,double,q2,summarize,q2y,numeric,column,summary,double,q3,summarize,q3y,numeric,column,summary,double,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1499940742;Use some values from Anscombe's Quartet for testing.__There was no particular reason to use these except they have known means and variance.__https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Double[] q1y = { 8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68 }__		final Double[] q2y = { 9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74 }__		final Double[] q3y = { 7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73 }__		final Double[] q4y = { 6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89 }___		NumericColumnSummary<Double> q1 = summarize(q1y)__		NumericColumnSummary<Double> q2 = summarize(q2y)__		NumericColumnSummary<Double> q3 = summarize(q3y)__		NumericColumnSummary<Double> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,double,q1y,8,04,6,95,7,58,8,81,8,33,9,96,7,24,4,26,10,84,4,82,5,68,final,double,q2y,9,14,8,14,8,74,8,77,9,26,8,1,6,13,3,1,9,13,7,26,4,74,final,double,q3y,7,46,6,77,12,74,7,11,7,81,8,84,6,08,5,39,8,15,6,42,5,73,final,double,q4y,6,58,5,76,7,71,8,84,8,47,7,04,5,25,12,5,5,56,7,91,6,89,numeric,column,summary,double,q1,summarize,q1y,numeric,column,summary,double,q2,summarize,q2y,numeric,column,summary,double,q3,summarize,q3y,numeric,column,summary,double,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
DoubleSummaryAggregatorTest -> @Test 	public void testAnscomesQuartetYValues() throws Exception;1501495929;Use some values from Anscombe's Quartet for testing.__<p>There was no particular reason to use these except they have known means and variance.__<p>https://en.wikipedia.org/wiki/Anscombe%27s_quartet;@Test_	public void testAnscomesQuartetYValues() throws Exception {_		final Double[] q1y = { 8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68 }__		final Double[] q2y = { 9.14, 8.14, 8.74, 8.77, 9.26, 8.1, 6.13, 3.1, 9.13, 7.26, 4.74 }__		final Double[] q3y = { 7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73 }__		final Double[] q4y = { 6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89 }___		NumericColumnSummary<Double> q1 = summarize(q1y)__		NumericColumnSummary<Double> q2 = summarize(q2y)__		NumericColumnSummary<Double> q3 = summarize(q3y)__		NumericColumnSummary<Double> q4 = summarize(q4y)___		__		Assert.assertEquals(7.5, q1.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q2.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q3.getMean().doubleValue(), 0.001)__		Assert.assertEquals(7.5, q4.getMean().doubleValue(), 0.001)___		Assert.assertEquals(4.12, q1.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q2.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q3.getVariance().doubleValue(), 0.01)__		Assert.assertEquals(4.12, q4.getVariance().doubleValue(), 0.01)__	};use,some,values,from,anscombe,s,quartet,for,testing,p,there,was,no,particular,reason,to,use,these,except,they,have,known,means,and,variance,p,https,en,wikipedia,org,wiki,anscombe;test,public,void,test,anscomes,quartet,yvalues,throws,exception,final,double,q1y,8,04,6,95,7,58,8,81,8,33,9,96,7,24,4,26,10,84,4,82,5,68,final,double,q2y,9,14,8,14,8,74,8,77,9,26,8,1,6,13,3,1,9,13,7,26,4,74,final,double,q3y,7,46,6,77,12,74,7,11,7,81,8,84,6,08,5,39,8,15,6,42,5,73,final,double,q4y,6,58,5,76,7,71,8,84,8,47,7,04,5,25,12,5,5,56,7,91,6,89,numeric,column,summary,double,q1,summarize,q1y,numeric,column,summary,double,q2,summarize,q2y,numeric,column,summary,double,q3,summarize,q3y,numeric,column,summary,double,q4,summarize,q4y,assert,assert,equals,7,5,q1,get,mean,double,value,0,001,assert,assert,equals,7,5,q2,get,mean,double,value,0,001,assert,assert,equals,7,5,q3,get,mean,double,value,0,001,assert,assert,equals,7,5,q4,get,mean,double,value,0,001,assert,assert,equals,4,12,q1,get,variance,double,value,0,01,assert,assert,equals,4,12,q2,get,variance,double,value,0,01,assert,assert,equals,4,12,q3,get,variance,double,value,0,01,assert,assert,equals,4,12,q4,get,variance,double,value,0,01
