# id;timestamp;commentText;codeText;commentWords;codeWords
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMustReturnATuple();1409655585;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMaxByComparisonMustReturnATuple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, bigger))__			Assert.assertSame("SelectByMax must return smaller tuple", smaller, maxByTuple.reduce(smaller, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,max,by,comparison,must,return,atuple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,bigger,assert,assert,same,select,by,max,must,return,smaller,tuple,smaller,max,by,tuple,reduce,smaller,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMustReturnATuple();1411399886;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMaxByComparisonMustReturnATuple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, bigger))__			Assert.assertSame("SelectByMax must return smaller tuple", smaller, maxByTuple.reduce(smaller, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,max,by,comparison,must,return,atuple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,bigger,assert,assert,same,select,by,max,must,return,smaller,tuple,smaller,max,by,tuple,reduce,smaller,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMustReturnATuple();1411473593;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMaxByComparisonMustReturnATuple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, bigger))__			Assert.assertSame("SelectByMax must return smaller tuple", smaller, maxByTuple.reduce(smaller, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,max,by,comparison,must,return,atuple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,bigger,assert,assert,same,select,by,max,must,return,smaller,tuple,smaller,max,by,tuple,reduce,smaller,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMustReturnATuple();1494598316;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMaxByComparisonMustReturnATuple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, bigger))__			Assert.assertSame("SelectByMax must return smaller tuple", smaller, maxByTuple.reduce(smaller, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,max,by,comparison,must,return,atuple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,bigger,assert,assert,same,select,by,max,must,return,smaller,tuple,smaller,max,by,tuple,reduce,smaller,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMustReturnATuple();1500387300;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMaxByComparisonMustReturnATuple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})___		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, bigger))__			Assert.assertSame("SelectByMax must return smaller tuple", smaller, maxByTuple.reduce(smaller, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,max,by,comparison,must,return,atuple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,bigger,assert,assert,same,select,by,max,must,return,smaller,tuple,smaller,max,by,tuple,reduce,smaller,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparison();1409655585;This test validates whether the order of tuples has any impact on the outcome and if the bigger tuple is returned.;@Test_	public void testMaxByComparison() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,bigger,tuple,is,returned;test,public,void,test,max,by,comparison,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparison();1411399886;This test validates whether the order of tuples has any impact on the outcome and if the bigger tuple is returned.;@Test_	public void testMaxByComparison() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,bigger,tuple,is,returned;test,public,void,test,max,by,comparison,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparison();1411473593;This test validates whether the order of tuples has any impact on the outcome and if the bigger tuple is returned.;@Test_	public void testMaxByComparison() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,bigger,tuple,is,returned;test,public,void,test,max,by,comparison,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparison();1494598316;This test validates whether the order of tuples has any impact on the outcome and if the bigger tuple is returned.;@Test_	public void testMaxByComparison() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,bigger,tuple,is,returned;test,public,void,test,max,by,comparison,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparison();1500387300;This test validates whether the order of tuples has any impact on the outcome and if the bigger tuple is returned.;@Test_	public void testMaxByComparison() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})___		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,bigger,tuple,is,returned;test,public,void,test,max,by,comparison,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonMultiple();1409655585;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMinByComparisonMultiple() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,min,by,comparison,multiple,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonMultiple();1411399886;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMinByComparisonMultiple() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,min,by,comparison,multiple,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonMultiple();1411473593;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMinByComparisonMultiple() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,min,by,comparison,multiple,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonMultiple();1494598316;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMinByComparisonMultiple() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,min,by,comparison,multiple,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonMultiple();1500387300;Checks whether reduce does behave as expected if both values are the same object.;@Test_	public void testMinByComparisonMultiple() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 1, 2, 3, 4})___		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};checks,whether,reduce,does,behave,as,expected,if,both,values,are,the,same,object;test,public,void,test,min,by,comparison,multiple,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMultiple();1409655585;This test validates that equality is independent of the amount of used indices.;@Test_	public void testMaxByComparisonMultiple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,equality,is,independent,of,the,amount,of,used,indices;test,public,void,test,max,by,comparison,multiple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMultiple();1411399886;This test validates that equality is independent of the amount of used indices.;@Test_	public void testMaxByComparisonMultiple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,equality,is,independent,of,the,amount,of,used,indices;test,public,void,test,max,by,comparison,multiple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMultiple();1411473593;This test validates that equality is independent of the amount of used indices.;@Test_	public void testMaxByComparisonMultiple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,equality,is,independent,of,the,amount,of,used,indices;test,public,void,test,max,by,comparison,multiple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMultiple();1494598316;This test validates that equality is independent of the amount of used indices.;@Test_	public void testMaxByComparisonMultiple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,1,2,3,4})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,that,equality,is,independent,of,the,amount,of,used,indices;test,public,void,test,max,by,comparison,multiple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonMultiple();1500387300;This test validates that equality is independent of the amount of used indices.;@Test_	public void testMaxByComparisonMultiple() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 1, 2, 3, 4})___		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,that,equality,is,independent,of,the,amount,of,used,indices;test,public,void,test,max,by,comparison,multiple,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,1,2,3,4,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase2();1409655585;This test cases checks when two tuples only differ in one value.;@Test_	public void testMaxByComparisonSpecialCase2() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value;test,public,void,test,max,by,comparison,special,case2,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase2();1411399886;This test cases checks when two tuples only differ in one value.;@Test_	public void testMaxByComparisonSpecialCase2() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value;test,public,void,test,max,by,comparison,special,case2,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase2();1411473593;This test cases checks when two tuples only differ in one value.;@Test_	public void testMaxByComparisonSpecialCase2() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value;test,public,void,test,max,by,comparison,special,case2,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase2();1494598316;This test cases checks when two tuples only differ in one value.;@Test_	public void testMaxByComparisonSpecialCase2() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value;test,public,void,test,max,by,comparison,special,case2,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase2();1500387300;This test cases checks when two tuples only differ in one value.;@Test_	public void testMaxByComparisonSpecialCase2() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 2, 1, 4, 3})___		try {_			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return bigger tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value;test,public,void,test,max,by,comparison,special,case2,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,bigger,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase1();1409655585;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMaxByComparisonSpecialCase1() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMax must return the first given tuple", specialCaseBigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return the first given tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,max,by,comparison,special,case1,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,max,must,return,the,first,given,tuple,special,case,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,the,first,given,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase1();1411399886;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMaxByComparisonSpecialCase1() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMax must return the first given tuple", specialCaseBigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return the first given tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,max,by,comparison,special,case1,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,max,must,return,the,first,given,tuple,special,case,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,the,first,given,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase1();1411473593;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMaxByComparisonSpecialCase1() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMax must return the first given tuple", specialCaseBigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return the first given tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,max,by,comparison,special,case1,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,max,must,return,the,first,given,tuple,special,case,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,the,first,given,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase1();1494598316;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMaxByComparisonSpecialCase1() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMax must return the first given tuple", specialCaseBigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return the first given tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,max,by,comparison,special,case1,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,max,must,return,the,first,given,tuple,special,case,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,the,first,given,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMaxByComparisonSpecialCase1();1500387300;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMaxByComparisonSpecialCase1() {_		SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>> maxByTuple = new SelectByMaxFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 3})___		try {_			Assert.assertSame("SelectByMax must return the first given tuple", specialCaseBigger, maxByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMax must return the first given tuple", bigger, maxByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,max,by,comparison,special,case1,select,by,max,function,tuple5,integer,long,string,long,integer,max,by,tuple,new,select,by,max,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,max,must,return,the,first,given,tuple,special,case,bigger,max,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,max,must,return,the,first,given,tuple,bigger,max,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparison();1409655585;This test validates whether the order of tuples has any impact on the outcome and if the smaller tuple is returned.;@Test_	public void testMinByComparison() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,smaller,tuple,is,returned;test,public,void,test,min,by,comparison,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparison();1411399886;This test validates whether the order of tuples has any impact on the outcome and if the smaller tuple is returned.;@Test_	public void testMinByComparison() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,smaller,tuple,is,returned;test,public,void,test,min,by,comparison,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparison();1411473593;This test validates whether the order of tuples has any impact on the outcome and if the smaller tuple is returned.;@Test_	public void testMinByComparison() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,smaller,tuple,is,returned;test,public,void,test,min,by,comparison,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparison();1494598316;This test validates whether the order of tuples has any impact on the outcome and if the smaller tuple is returned.;@Test_	public void testMinByComparison() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,smaller,tuple,is,returned;test,public,void,test,min,by,comparison,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparison();1500387300;This test validates whether the order of tuples has any impact on the outcome and if the smaller tuple is returned.;@Test_	public void testMinByComparison() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0})___		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, bigger))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(bigger, smaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,whether,the,order,of,tuples,has,any,impact,on,the,outcome,and,if,the,smaller,tuple,is,returned;test,public,void,test,min,by,comparison,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,bigger,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,bigger,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase2();1409655585;This test validates that when two tuples only differ in one value and that value's index is given_at construction time. The smaller tuple must be returned then.;@Test_	public void testMinByComparisonSpecialCase2() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(specialCaseSmaller, smaller))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, specialCaseSmaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,when,two,tuples,only,differ,in,one,value,and,that,value,s,index,is,given,at,construction,time,the,smaller,tuple,must,be,returned,then;test,public,void,test,min,by,comparison,special,case2,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,special,case,smaller,smaller,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,special,case,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase2();1411399886;This test validates that when two tuples only differ in one value and that value's index is given_at construction time. The smaller tuple must be returned then.;@Test_	public void testMinByComparisonSpecialCase2() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(specialCaseSmaller, smaller))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, specialCaseSmaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,when,two,tuples,only,differ,in,one,value,and,that,value,s,index,is,given,at,construction,time,the,smaller,tuple,must,be,returned,then;test,public,void,test,min,by,comparison,special,case2,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,special,case,smaller,smaller,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,special,case,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase2();1411473593;This test validates that when two tuples only differ in one value and that value's index is given_at construction time. The smaller tuple must be returned then.;@Test_	public void testMinByComparisonSpecialCase2() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(specialCaseSmaller, smaller))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, specialCaseSmaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,validates,that,when,two,tuples,only,differ,in,one,value,and,that,value,s,index,is,given,at,construction,time,the,smaller,tuple,must,be,returned,then;test,public,void,test,min,by,comparison,special,case2,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,special,case,smaller,smaller,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,special,case,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase2();1494598316;This test validates that when two tuples only differ in one value and that value's index is given_at construction time. The smaller tuple must be returned then.;@Test_	public void testMinByComparisonSpecialCase2() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,2,1,4,3})__		_		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(specialCaseSmaller, smaller))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, specialCaseSmaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,that,when,two,tuples,only,differ,in,one,value,and,that,value,s,index,is,given,at,construction,time,the,smaller,tuple,must,be,returned,then;test,public,void,test,min,by,comparison,special,case2,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,special,case,smaller,smaller,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,special,case,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase2();1500387300;This test validates that when two tuples only differ in one value and that value's index is given_at construction time. The smaller tuple must be returned then.;@Test_	public void testMinByComparisonSpecialCase2() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 2, 1, 4, 3})___		try {_			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(specialCaseSmaller, smaller))__			Assert.assertSame("SelectByMin must return smaller tuple", smaller, minByTuple.reduce(smaller, specialCaseSmaller))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,validates,that,when,two,tuples,only,differ,in,one,value,and,that,value,s,index,is,given,at,construction,time,the,smaller,tuple,must,be,returned,then;test,public,void,test,min,by,comparison,special,case2,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,2,1,4,3,try,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,special,case,smaller,smaller,assert,assert,same,select,by,min,must,return,smaller,tuple,smaller,min,by,tuple,reduce,smaller,special,case,smaller,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase1();1409655585;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMinByComparisonSpecialCase1() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMin must return the first given tuple", specialCaseBigger, minByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMin must return the first given tuple", bigger, minByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,min,by,comparison,special,case1,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,min,must,return,the,first,given,tuple,special,case,bigger,min,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,min,must,return,the,first,given,tuple,bigger,min,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase1();1411399886;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMinByComparisonSpecialCase1() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMin must return the first given tuple", specialCaseBigger, minByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMin must return the first given tuple", bigger, minByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,min,by,comparison,special,case1,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,min,must,return,the,first,given,tuple,special,case,bigger,min,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,min,must,return,the,first,given,tuple,bigger,min,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase1();1411473593;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMinByComparisonSpecialCase1() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMin must return the first given tuple", specialCaseBigger, minByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMin must return the first given tuple", bigger, minByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comapring both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,min,by,comparison,special,case1,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,min,must,return,the,first,given,tuple,special,case,bigger,min,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,min,must,return,the,first,given,tuple,bigger,min,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comapring,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase1();1494598316;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMinByComparisonSpecialCase1() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0,3})__		_		try {_			Assert.assertSame("SelectByMin must return the first given tuple", specialCaseBigger, minByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMin must return the first given tuple", bigger, minByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,min,by,comparison,special,case1,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,min,must,return,the,first,given,tuple,special,case,bigger,min,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,min,must,return,the,first,given,tuple,bigger,min,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
SelectByFunctionsTest -> @Test 	public void testMinByComparisonSpecialCase1();1500387300;This test cases checks when two tuples only differ in one value, but this value is not_in the fields list. In that case it should be seen as equal and then the first given tuple (value1) should be returned by reduce().;@Test_	public void testMinByComparisonSpecialCase1() {_		SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>> minByTuple = new SelectByMinFunction<Tuple5<Integer, Long, String, Long, Integer>>(tupleTypeInfo, new int[] {0, 3})___		try {_			Assert.assertSame("SelectByMin must return the first given tuple", specialCaseBigger, minByTuple.reduce(specialCaseBigger, bigger))__			Assert.assertSame("SelectByMin must return the first given tuple", bigger, minByTuple.reduce(bigger, specialCaseBigger))__		} catch (Exception e) {_			Assert.fail("No exception should be thrown while comparing both tuples")__		}_	};this,test,cases,checks,when,two,tuples,only,differ,in,one,value,but,this,value,is,not,in,the,fields,list,in,that,case,it,should,be,seen,as,equal,and,then,the,first,given,tuple,value1,should,be,returned,by,reduce;test,public,void,test,min,by,comparison,special,case1,select,by,min,function,tuple5,integer,long,string,long,integer,min,by,tuple,new,select,by,min,function,tuple5,integer,long,string,long,integer,tuple,type,info,new,int,0,3,try,assert,assert,same,select,by,min,must,return,the,first,given,tuple,special,case,bigger,min,by,tuple,reduce,special,case,bigger,bigger,assert,assert,same,select,by,min,must,return,the,first,given,tuple,bigger,min,by,tuple,reduce,bigger,special,case,bigger,catch,exception,e,assert,fail,no,exception,should,be,thrown,while,comparing,both,tuples
