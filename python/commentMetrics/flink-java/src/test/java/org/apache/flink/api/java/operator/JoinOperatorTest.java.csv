# id;timestamp;commentText;codeText;commentWords;codeWords
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1412761141;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1418225395;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1418225396;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1428086500;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1429635795;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1453803418;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1475688973;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch(Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1501495871;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
JoinOperatorTest -> @Test 	public void testJoinKeyMixedKeySelector();1506499511;Test if mixed types of key selectors are properly working.;@Test_	public void testJoinKeyMixedKeySelector() {_		final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		DataSet<CustomType> ds1 = env.fromCollection(customTypeData)__		DataSet<CustomType> ds2 = env.fromCollection(customTypeData)__		try {_			ds1.join(ds2).where("myInt").equalTo(new KeySelector<CustomType, Integer>() {_				@Override_				public Integer getKey(CustomType value) throws Exception {_					return value.myInt__				}_			})__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail()__		}_	};test,if,mixed,types,of,key,selectors,are,properly,working;test,public,void,test,join,key,mixed,key,selector,final,execution,environment,env,execution,environment,get,execution,environment,data,set,custom,type,ds1,env,from,collection,custom,type,data,data,set,custom,type,ds2,env,from,collection,custom,type,data,try,ds1,join,ds2,where,my,int,equal,to,new,key,selector,custom,type,integer,override,public,integer,get,key,custom,type,value,throws,exception,return,value,my,int,catch,exception,e,e,print,stack,trace,assert,fail
