# id;timestamp;commentText;codeText;commentWords;codeWords
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1420730997;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<OUT> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		fillInType(typeInfo)__		_		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,out,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1422405541;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<OUT> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		fillInType(typeInfo)__		_		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,out,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1433741389;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<OUT> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		fillInType(typeInfo)__		_		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,out,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<OUT> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		fillInType(typeInfo)__		_		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,out,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes an instance of {@link org.apache.flink.api.common.typeinfo.TypeInformation} such as:__<ul>_<li>{@link org.apache.flink.api.common.typeinfo.BasicTypeInfo}</li>_<li>{@link org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.TupleTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.PojoTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.WritableTypeInfo}</li>_<li>{@link org.apache.flink.api.java.typeutils.ValueTypeInfo}</li>_<li>etc.</li>_</ul>__@param typeInfo_type information as a return type hint_@return This operator with a given return type hint.;public O returns(TypeInformation<OUT> typeInfo) {_		if (typeInfo == null) {_			throw new IllegalArgumentException("Type information must not be null.")__		}_		fillInType(typeInfo)__		_		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,an,instance,of,link,org,apache,flink,api,common,typeinfo,type,information,such,as,ul,li,link,org,apache,flink,api,common,typeinfo,basic,type,info,li,li,link,org,apache,flink,api,common,typeinfo,basic,array,type,info,li,li,link,org,apache,flink,api,java,typeutils,tuple,type,info,li,li,link,org,apache,flink,api,java,typeutils,pojo,type,info,li,li,link,org,apache,flink,api,java,typeutils,writable,type,info,li,li,link,org,apache,flink,api,java,typeutils,value,type,info,li,li,etc,li,ul,param,type,info,type,information,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;public,o,returns,type,information,out,type,info,if,type,info,null,throw,new,illegal,argument,exception,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo The type information for the returned data type._@return This operator using the given type information for the return type.;public O returns(TypeInformation<OUT> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		fillInType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,the,type,information,for,the,returned,data,type,return,this,operator,using,the,given,type,information,for,the,return,type;public,o,returns,type,information,out,type,info,require,non,null,type,info,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1500970016;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo The type information for the returned data type._@return This operator using the given type information for the return type.;public O returns(TypeInformation<OUT> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		fillInType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,the,type,information,for,the,returned,data,type,return,this,operator,using,the,given,type,information,for,the,return,type;public,o,returns,type,information,out,type,info,require,non,null,type,info,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public O returns(TypeInformation<OUT> typeInfo);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>In most cases, the methods {@link #returns(Class)} and {@link #returns(TypeHint)}_are preferable.__@param typeInfo The type information for the returned data type._@return This operator using the given type information for the return type.;public O returns(TypeInformation<OUT> typeInfo) {_		requireNonNull(typeInfo, "TypeInformation must not be null")___		fillInType(typeInfo)__		@SuppressWarnings("unchecked")_		O returnType = (O) this__		return returnType__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,in,most,cases,the,methods,link,returns,class,and,link,returns,type,hint,are,preferable,param,type,info,the,type,information,for,the,returned,data,type,return,this,operator,using,the,given,type,information,for,the,return,type;public,o,returns,type,information,out,type,info,require,non,null,type,info,type,information,must,not,be,null,fill,in,type,type,info,suppress,warnings,unchecked,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<OUT> typeClass);1420730997;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<OUT> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<OUT> ti = (TypeInformation<OUT>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,out,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,out,ti,type,information,out,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<OUT> typeClass);1422405541;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<OUT> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<OUT> ti = (TypeInformation<OUT>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,out,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,out,ti,type,information,out,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<OUT> typeClass);1433741389;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<OUT> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<OUT> ti = (TypeInformation<OUT>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,out,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,out,ti,type,information,out,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<OUT> typeClass);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<OUT> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<OUT> ti = (TypeInformation<OUT>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,out,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,out,ti,type,information,out,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O returns(Class<OUT> typeClass);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a class that will be analyzed by Flink's type extraction capabilities.__<p>_Examples for classes are:_<ul>_<li>Basic types such as <code>Integer.class</code>, <code>String.class</code>, etc.</li>_<li>POJOs such as <code>MyPojo.class</code></li>_<li>Classes that <b>extend</b> tuples. Classes like <code>Tuple1.class</code>,<code>Tuple2.class</code>, etc. are <b>not</b> sufficient.</li>_<li>Arrays such as <code>String[].class</code>, etc.</li>_</ul>__@param typeClass_class as a return type hint_@return This operator with a given return type hint.;@SuppressWarnings("unchecked")_	public O returns(Class<OUT> typeClass) {_		if (typeClass == null) {_			throw new IllegalArgumentException("Type class must not be null.")__		}_		_		try {_			TypeInformation<OUT> ti = (TypeInformation<OUT>) TypeExtractor.createTypeInfo(typeClass)__			return returns(ti)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("The given class is not suited for providing necessary type information.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,class,that,will,be,analyzed,by,flink,s,type,extraction,capabilities,p,examples,for,classes,are,ul,li,basic,types,such,as,code,integer,class,code,code,string,class,code,etc,li,li,pojos,such,as,code,my,pojo,class,code,li,li,classes,that,b,extend,b,tuples,classes,like,code,tuple1,class,code,code,tuple2,class,code,etc,are,b,not,b,sufficient,li,li,arrays,such,as,code,string,class,code,etc,li,ul,param,type,class,class,as,a,return,type,hint,return,this,operator,with,a,given,return,type,hint;suppress,warnings,unchecked,public,o,returns,class,out,type,class,if,type,class,null,throw,new,illegal,argument,exception,type,class,must,not,be,null,try,type,information,out,ti,type,information,out,type,extractor,create,type,info,type,class,return,returns,ti,catch,invalid,types,exception,e,throw,new,invalid,types,exception,the,given,class,is,not,suited,for,providing,necessary,type,information,e
TwoInputUdfOperator -> public O returns(TypeHint<OUT> typeHint);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataSet<Tuple2<String, Double>> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public O returns(TypeHint<OUT> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,set,tuple2,string,double,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,o,returns,type,hint,out,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
TwoInputUdfOperator -> public O returns(TypeHint<OUT> typeHint);1500970016;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataSet<Tuple2<String, Double>> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public O returns(TypeHint<OUT> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,set,tuple2,string,double,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,o,returns,type,hint,out,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
TwoInputUdfOperator -> public O returns(TypeHint<OUT> typeHint);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Use this method the following way:_<pre>{@code_DataSet<Tuple2<String, Double>> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(new TypeHint<Tuple2<String, Double>>(){})__}</pre>__@param typeHint The type hint for the returned data type._@return This operator with the type information corresponding to the given type hint.;public O returns(TypeHint<OUT> typeHint) {_		requireNonNull(typeHint, "TypeHint must not be null")___		try {_			return returns(TypeInformation.of(typeHint))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the type hint. " +_					"Make sure that the TypeHint does not use any generic type variables.")__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,use,this,method,the,following,way,pre,code,data,set,tuple2,string,double,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,new,type,hint,tuple2,string,double,pre,param,type,hint,the,type,hint,for,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,hint;public,o,returns,type,hint,out,type,hint,require,non,null,type,hint,type,hint,must,not,be,null,try,return,returns,type,information,of,type,hint,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,type,hint,make,sure,that,the,type,hint,does,not,use,any,generic,type,variables
TwoInputUdfOperator -> @Deprecated 	@PublicEvolving 	public O returns(String typeInfoString);1456848177;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> @Deprecated 	@PublicEvolving 	public O returns(String typeInfoString);1500970016;Adds a type information hint about the return type of this operator.___<p>Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.___<p>This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__<p>Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.__@deprecated Please use {@link #returns(Class)} or {@link #returns(TypeHint)} instead.;@Deprecated_	@PublicEvolving_	public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,p,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint,deprecated,please,use,link,returns,class,or,link,returns,type,hint,instead;deprecated,public,evolving,public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1405024514;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1405090423;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1406821655;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1411372797;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1411372798;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1411399886;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1411473593;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1412346153;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetFirst(String... constantSetFirst);1420730997;Adds a constant-set annotation for the first input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the first input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetFirst A list of constant field specification Strings for the first input._@return This operator with an annotated constant field set for the first input.;@SuppressWarnings("unchecked")_	public O withConstantSetFirst(String... constantSetFirst) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, constantSetFirst, null,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,first,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,first,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,first,a,list,of,constant,field,specification,strings,for,the,first,input,return,this,operator,with,an,annotated,constant,field,set,for,the,first,input;suppress,warnings,unchecked,public,o,with,constant,set,first,string,constant,set,first,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,constant,set,first,null,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @Internal 	public void setSemanticProperties(DualInputSemanticProperties properties);1454679829;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();@Internal_	public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;internal,public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> @Internal 	public void setSemanticProperties(DualInputSemanticProperties properties);1456848177;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();@Internal_	public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;internal,public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> @Internal 	public void setSemanticProperties(DualInputSemanticProperties properties);1500970016;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();@Internal_	public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;internal,public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> @Internal 	public void setSemanticProperties(DualInputSemanticProperties properties);1525452496;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();@Internal_	public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;internal,public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1422405541;<p>_Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._<code>withForwardedFieldsFirst("f0->f2")</code> denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one (<code>withForwardedFieldsFirst("f2_ f3->f0_ f4")</code>)_or separate Strings (<code>withForwardedFieldsFirst("f2", "f3->f0", "f4")</code>)._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null) {_			_			this.udfSemantics = extractSemanticAnnotationsFromUdf(getFunction().getClass())__		}__		if(this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,code,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,code,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,code,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,udf,semantics,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1433741389;<p>_Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._<code>withForwardedFieldsFirst("f0->f2")</code> denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one (<code>withForwardedFieldsFirst("f2_ f3->f0_ f4")</code>)_or separate Strings (<code>withForwardedFieldsFirst("f2", "f3->f0", "f4")</code>)._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,code,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,code,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,code,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1446112342;<p>_Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._{@code withForwardedFieldsFirst("f0->f2")} denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsFirst("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsFirst("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1454679829;<p>_Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._{@code withForwardedFieldsFirst("f0->f2")} denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsFirst("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsFirst("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1456848177;<p>_Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._{@code withForwardedFieldsFirst("f0->f2")} denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsFirst("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsFirst("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1500970016;Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output.__<p>Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple.__<p>Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._{@code withForwardedFieldsFirst("f0->f2")} denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match.__<p>Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsFirst("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsFirst("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard.__<p>It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation.__<p><b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if (this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsFirst(String... forwardedFieldsFirst);1525452496;Adds semantic information about forwarded fields of the first input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output.__<p>Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsFirst("f2")</code> declares that the third field of a Java input tuple_from the first input is copied to the third field of an output tuple.__<p>Fields which are unchanged copied from the first input to another position in the output are declared_by specifying the source field reference in the first input and the target field reference in the output._{@code withForwardedFieldsFirst("f0->f2")} denotes that the first field of the first input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in first input and output type match.__<p>Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsFirst("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsFirst("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard.__<p>It is not possible to override existing semantic information about forwarded fields of the first input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst} class annotation.__<p><b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>__@param forwardedFieldsFirst A list of forwarded field expressions for the first input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsFirst;@SuppressWarnings("unchecked")_	public O withForwardedFieldsFirst(String... forwardedFieldsFirst) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if (this.udfWithForwardedFieldsFirstAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the first input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, forwardedFieldsFirst, null,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};adds,semantic,information,about,forwarded,fields,of,the,first,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,first,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,first,input,is,copied,to,the,third,field,of,an,output,tuple,p,fields,which,are,unchanged,copied,from,the,first,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,first,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,first,f0,f2,denotes,that,the,first,field,of,the,first,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,first,input,and,output,type,match,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,first,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,first,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,first,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first,class,annotation,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,param,forwarded,fields,first,a,list,of,forwarded,field,expressions,for,the,first,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,first;suppress,warnings,unchecked,public,o,with,forwarded,fields,first,string,forwarded,fields,first,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,this,udf,with,forwarded,fields,first,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,first,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,forwarded,fields,first,null,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1422405541;<p>_Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._<code>withForwardedFieldsSecond("f0->f2")</code> denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one (<code>withForwardedFieldsSecond("f2_ f3->f0_ f4")</code>)_or separate Strings (<code>withForwardedFieldsSecond("f2", "f3->f0", "f4")</code>)._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null) {_			_			this.udfSemantics = extractSemanticAnnotationsFromUdf(getFunction().getClass())__		}__		if(this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,code,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,code,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,code,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,udf,semantics,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1433741389;<p>_Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._<code>withForwardedFieldsSecond("f0->f2")</code> denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one (<code>withForwardedFieldsSecond("f2_ f3->f0_ f4")</code>)_or separate Strings (<code>withForwardedFieldsSecond("f2", "f3->f0", "f4")</code>)._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,code,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,code,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,code,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1446112342;<p>_Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._{@code withForwardedFieldsSecond("f0->f2")} denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsSecond("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1454679829;<p>_Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._{@code withForwardedFieldsSecond("f0->f2")} denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsSecond("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1456848177;<p>_Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output._</p>__<p>_Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple._</p>__<p>_Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._{@code withForwardedFieldsSecond("f0->f2")} denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match._</p>__<p>_Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsSecond("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard._</p>__<p>_It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation._</p>__<p>_<b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>_</p>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if(this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if(udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};p,adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,p,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1500970016;Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output.__<p>Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple.__<p>Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._{@code withForwardedFieldsSecond("f0->f2")} denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match.__<p>Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsSecond("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard.__<p>It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation.__<p><b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if (udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withForwardedFieldsSecond(String... forwardedFieldsSecond);1525452496;Adds semantic information about forwarded fields of the second input of the user-defined function._The forwarded fields information declares fields which are never modified by the function and_which are forwarded at the same position to the output or unchanged copied to another position in the output.__<p>Fields that are forwarded at the same position are specified by their position._The specified position must be valid for the input and output data type and have the same type._For example <code>withForwardedFieldsSecond("f2")</code> declares that the third field of a Java input tuple_from the second input is copied to the third field of an output tuple.__<p>Fields which are unchanged copied from the second input to another position in the output are declared_by specifying the source field reference in the second input and the target field reference in the output._{@code withForwardedFieldsSecond("f0->f2")} denotes that the first field of the second input Java tuple is_unchanged copied to the third field of the Java output tuple. When using a wildcard ("*") ensure that_the number of declared fields and their types in second input and output type match.__<p>Multiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond("f2_ f3->f0_ f4")})_or separate Strings ({@code withForwardedFieldsSecond("f2", "f3->f0", "f4")})._Please refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for_details on field references such as nested fields and wildcard.__<p>It is not possible to override existing semantic information about forwarded fields of the second input which was_for example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation.__<p><b>NOTE: Adding semantic information for functions is optional!_If used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans._However, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!_So be careful when adding semantic information._</b>__@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function._@return This operator with annotated forwarded field information.__@see org.apache.flink.api.java.functions.FunctionAnnotation_@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond;@SuppressWarnings("unchecked")_	public O withForwardedFieldsSecond(String... forwardedFieldsSecond) {_		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			_			setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass()))__		}__		if (this.udfSemantics == null || this.analyzedUdfSemantics) {_			setSemanticProperties(new DualInputSemanticProperties())__			SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_					null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__		} else {_			if (udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) {_				_				throw new SemanticProperties.InvalidSemanticAnnotationException("Forwarded field information " +_						"has already been added by a function annotation for the second input of this operator. " +_						"Cannot overwrite function annotations.")__			} else {_				SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond,_						null, null, null, null, getInput1Type(), getInput2Type(), getResultType())__			}_		}__		O returnType = (O) this__		return returnType__	};adds,semantic,information,about,forwarded,fields,of,the,second,input,of,the,user,defined,function,the,forwarded,fields,information,declares,fields,which,are,never,modified,by,the,function,and,which,are,forwarded,at,the,same,position,to,the,output,or,unchanged,copied,to,another,position,in,the,output,p,fields,that,are,forwarded,at,the,same,position,are,specified,by,their,position,the,specified,position,must,be,valid,for,the,input,and,output,data,type,and,have,the,same,type,for,example,code,with,forwarded,fields,second,f2,code,declares,that,the,third,field,of,a,java,input,tuple,from,the,second,input,is,copied,to,the,third,field,of,an,output,tuple,p,fields,which,are,unchanged,copied,from,the,second,input,to,another,position,in,the,output,are,declared,by,specifying,the,source,field,reference,in,the,second,input,and,the,target,field,reference,in,the,output,code,with,forwarded,fields,second,f0,f2,denotes,that,the,first,field,of,the,second,input,java,tuple,is,unchanged,copied,to,the,third,field,of,the,java,output,tuple,when,using,a,wildcard,ensure,that,the,number,of,declared,fields,and,their,types,in,second,input,and,output,type,match,p,multiple,forwarded,fields,can,be,annotated,in,one,code,with,forwarded,fields,second,f2,f3,f0,f4,or,separate,strings,code,with,forwarded,fields,second,f2,f3,f0,f4,please,refer,to,the,java,doc,of,link,org,apache,flink,api,common,functions,function,or,flink,s,documentation,for,details,on,field,references,such,as,nested,fields,and,wildcard,p,it,is,not,possible,to,override,existing,semantic,information,about,forwarded,fields,of,the,second,input,which,was,for,example,added,by,a,link,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second,class,annotation,p,b,note,adding,semantic,information,for,functions,is,optional,if,used,correctly,semantic,information,can,help,the,flink,optimizer,to,generate,more,efficient,execution,plans,however,incorrect,semantic,information,can,cause,the,optimizer,to,generate,incorrect,execution,plans,which,compute,wrong,results,so,be,careful,when,adding,semantic,information,b,param,forwarded,fields,second,a,list,of,forwarded,field,expressions,for,the,second,input,of,the,function,return,this,operator,with,annotated,forwarded,field,information,see,org,apache,flink,api,java,functions,function,annotation,see,org,apache,flink,api,java,functions,function,annotation,forwarded,fields,second;suppress,warnings,unchecked,public,o,with,forwarded,fields,second,string,forwarded,fields,second,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,extract,semantic,annotations,from,udf,get,function,get,class,if,this,udf,semantics,null,this,analyzed,udf,semantics,set,semantic,properties,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,else,if,udf,with,forwarded,fields,second,annotation,get,function,get,class,throw,new,semantic,properties,invalid,semantic,annotation,exception,forwarded,field,information,has,already,been,added,by,a,function,annotation,for,the,second,input,of,this,operator,cannot,overwrite,function,annotations,else,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,forwarded,fields,second,null,null,null,null,get,input1type,get,input2type,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1405024514;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSematicProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSematicProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,sematic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,sematic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1405090423;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSematicProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSematicProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,sematic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,sematic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1406821655;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSematicProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSematicProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,sematic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,sematic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1411372797;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSematicProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSematicProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,sematic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,sematic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1411372798;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1411399886;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1411473593;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1412346153;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1420730997;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1422405541;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1433741389;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> public void setSemanticProperties(DualInputSemanticProperties properties);1446112342;Sets the semantic properties for the user-defined function (UDF). The semantic properties_define how fields of tuples and other objects are modified or preserved through this UDF._The configured properties can be retrieved via {@link UdfOperator#getSemanticProperties()}.__@param properties The semantic properties for the UDF._@see UdfOperator#getSemanticProperties();public void setSemanticProperties(DualInputSemanticProperties properties) {_		this.udfSemantics = properties__		this.analyzedUdfSemantics = false__	};sets,the,semantic,properties,for,the,user,defined,function,udf,the,semantic,properties,define,how,fields,of,tuples,and,other,objects,are,modified,or,preserved,through,this,udf,the,configured,properties,can,be,retrieved,via,link,udf,operator,get,semantic,properties,param,properties,the,semantic,properties,for,the,udf,see,udf,operator,get,semantic,properties;public,void,set,semantic,properties,dual,input,semantic,properties,properties,this,udf,semantics,properties,this,analyzed,udf,semantics,false
TwoInputUdfOperator -> public O returns(Class<OUT> typeClass);1456848177;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__<p>Use this method the following way:_<pre>{@code_DataSet<String[]> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(String[].class)__}</pre>__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public O returns(Class<OUT> typeClass) {_		requireNonNull(typeClass, "type class must not be null")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,p,use,this,method,the,following,way,pre,code,data,set,string,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,string,class,pre,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,o,returns,class,out,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead,e
TwoInputUdfOperator -> public O returns(Class<OUT> typeClass);1500970016;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__<p>Use this method the following way:_<pre>{@code_DataSet<String[]> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(String[].class)__}</pre>__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public O returns(Class<OUT> typeClass) {_		requireNonNull(typeClass, "type class must not be null")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,p,use,this,method,the,following,way,pre,code,data,set,string,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,string,class,pre,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,o,returns,class,out,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead,e
TwoInputUdfOperator -> public O returns(Class<OUT> typeClass);1525452496;Adds a type information hint about the return type of this operator. This method_can be used in cases where Flink cannot determine automatically what the produced_type of a function is. That can be the case if the function uses generic type variables_in the return type that cannot be inferred from the input type.__<p>Classes can be used as type hints for non-generic types (classes without generic parameters),_but not for generic types like for example Tuples. For those generic types, please_use the {@link #returns(TypeHint)} method.__<p>Use this method the following way:_<pre>{@code_DataSet<String[]> result =_data1.join(data2).where("id").equalTo("fieldX")_.with(new JoinFunctionWithNonInferrableReturnType())_.returns(String[].class)__}</pre>__@param typeClass The class of the returned data type._@return This operator with the type information corresponding to the given type class.;public O returns(Class<OUT> typeClass) {_		requireNonNull(typeClass, "type class must not be null")___		try {_			return returns(TypeInformation.of(typeClass))__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Cannot infer the type information from the class alone." +_					"This is most likely because the class represents a generic type. In that case," +_					"please use the 'returns(TypeHint)' method instead.", e)__		}_	};adds,a,type,information,hint,about,the,return,type,of,this,operator,this,method,can,be,used,in,cases,where,flink,cannot,determine,automatically,what,the,produced,type,of,a,function,is,that,can,be,the,case,if,the,function,uses,generic,type,variables,in,the,return,type,that,cannot,be,inferred,from,the,input,type,p,classes,can,be,used,as,type,hints,for,non,generic,types,classes,without,generic,parameters,but,not,for,generic,types,like,for,example,tuples,for,those,generic,types,please,use,the,link,returns,type,hint,method,p,use,this,method,the,following,way,pre,code,data,set,string,result,data1,join,data2,where,id,equal,to,field,x,with,new,join,function,with,non,inferrable,return,type,returns,string,class,pre,param,type,class,the,class,of,the,returned,data,type,return,this,operator,with,the,type,information,corresponding,to,the,given,type,class;public,o,returns,class,out,type,class,require,non,null,type,class,type,class,must,not,be,null,try,return,returns,type,information,of,type,class,catch,invalid,types,exception,e,throw,new,invalid,types,exception,cannot,infer,the,type,information,from,the,class,alone,this,is,most,likely,because,the,class,represents,a,generic,type,in,that,case,please,use,the,returns,type,hint,method,instead,e
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1405024514;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1405090423;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1406821655;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1411372797;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1411372798;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1411399886;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1411473593;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1412346153;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1420730997;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1422405541;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1433741389;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1446112342;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1454679829;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1456848177;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1500970016;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType);1525452496;Creates a new operators with the two given data sets as inputs. The given result type_describes the data type of the elements in the data set produced by the operator.__@param input1 The data set for the first input._@param input2 The data set for the second input._@param resultType The type of the elements in the resulting data set.;protected TwoInputUdfOperator(DataSet<IN1> input1, DataSet<IN2> input2, TypeInformation<OUT> resultType) {_		super(input1, input2, resultType)__	};creates,a,new,operators,with,the,two,given,data,sets,as,inputs,the,given,result,type,describes,the,data,type,of,the,elements,in,the,data,set,produced,by,the,operator,param,input1,the,data,set,for,the,first,input,param,input2,the,data,set,for,the,second,input,param,result,type,the,type,of,the,elements,in,the,resulting,data,set;protected,two,input,udf,operator,data,set,in1,input1,data,set,in2,input2,type,information,out,result,type,super,input1,input2,result,type
TwoInputUdfOperator -> public O returns(String typeInfoString);1420730997;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> public O returns(String typeInfoString);1422405541;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> public O returns(String typeInfoString);1433741389;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> public O returns(String typeInfoString);1446112342;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> public O returns(String typeInfoString);1454679829;Adds a type information hint about the return type of this operator.__<p>_Type hints are important in cases where the Java compiler_throws away generic type information necessary for efficient execution.__<p>_This method takes a type information string that will be parsed. A type information string can contain the following_types:__<ul>_<li>Basic types such as <code>Integer</code>, <code>String</code>, etc._<li>Basic type arrays such as <code>Integer[]</code>,_<code>String[]</code>, etc._<li>Tuple types such as <code>Tuple1&lt_TYPE0&gt_</code>,_<code>Tuple2&lt_TYPE0, TYPE1&gt_</code>, etc.</li>_<li>Pojo types such as <code>org.my.MyPojo&lt_myFieldName=TYPE0,myFieldName2=TYPE1&gt_</code>, etc.</li>_<li>Generic types such as <code>java.lang.Class</code>, etc._<li>Custom type arrays such as <code>org.my.CustomClass[]</code>,_<code>org.my.CustomClass$StaticInnerClass[]</code>, etc._<li>Value types such as <code>DoubleValue</code>,_<code>StringValue</code>, <code>IntegerValue</code>, etc.</li>_<li>Tuple array types such as <code>Tuple2&lt_TYPE0,TYPE1&gt_[], etc.</code></li>_<li>Writable types such as <code>Writable&lt_org.my.CustomWritable&gt_</code></li>_<li>Enum types such as <code>Enum&lt_org.my.CustomEnum&gt_</code></li>_</ul>__Example:_<code>"Tuple2&lt_String,Tuple2&lt_Integer,org.my.MyJob$Pojo&lt_word=String&gt_&gt_&gt_"</code>__@param typeInfoString_type information string to be parsed_@return This operator with a given return type hint.;public O returns(String typeInfoString) {_		if (typeInfoString == null) {_			throw new IllegalArgumentException("Type information string must not be null.")__		}_		return returns(TypeInfoParser.<OUT>parse(typeInfoString))__	};adds,a,type,information,hint,about,the,return,type,of,this,operator,p,type,hints,are,important,in,cases,where,the,java,compiler,throws,away,generic,type,information,necessary,for,efficient,execution,p,this,method,takes,a,type,information,string,that,will,be,parsed,a,type,information,string,can,contain,the,following,types,ul,li,basic,types,such,as,code,integer,code,code,string,code,etc,li,basic,type,arrays,such,as,code,integer,code,code,string,code,etc,li,tuple,types,such,as,code,tuple1,lt,type0,gt,code,code,tuple2,lt,type0,type1,gt,code,etc,li,li,pojo,types,such,as,code,org,my,my,pojo,lt,my,field,name,type0,my,field,name2,type1,gt,code,etc,li,li,generic,types,such,as,code,java,lang,class,code,etc,li,custom,type,arrays,such,as,code,org,my,custom,class,code,code,org,my,custom,class,static,inner,class,code,etc,li,value,types,such,as,code,double,value,code,code,string,value,code,code,integer,value,code,etc,li,li,tuple,array,types,such,as,code,tuple2,lt,type0,type1,gt,etc,code,li,li,writable,types,such,as,code,writable,lt,org,my,custom,writable,gt,code,li,li,enum,types,such,as,code,enum,lt,org,my,custom,enum,gt,code,li,ul,example,code,tuple2,lt,string,tuple2,lt,integer,org,my,my,job,pojo,lt,word,string,gt,gt,gt,code,param,type,info,string,type,information,string,to,be,parsed,return,this,operator,with,a,given,return,type,hint;public,o,returns,string,type,info,string,if,type,info,string,null,throw,new,illegal,argument,exception,type,information,string,must,not,be,null,return,returns,type,info,parser,out,parse,type,info,string
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1405024514;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1405090423;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1406821655;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1411372797;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1411372798;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1411399886;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1411473593;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1412346153;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
TwoInputUdfOperator -> @SuppressWarnings("unchecked") 	public O withConstantSetSecond(String... constantSetSecond);1420730997;Adds a constant-set annotation for the second input of the UDF.__<p>_Constant set annotations are used by the optimizer to infer the existence of data properties (sorted, partitioned, grouped)._In certain cases, these annotations allow the optimizer to generate a more efficient execution plan which can lead to improved performance._Constant set annotations can only be specified if the second input and the output type of the UDF are of_{@link org.apache.flink.api.java.tuple.Tuple} data types.__<p>_A constant-set annotation is a set of constant field specifications. The constant field specification String "4->3" specifies, that this UDF copies the fourth field of_an input tuple to the third field of the output tuple. Field references are zero-indexed.__<p>_<b>NOTICE: Constant set annotations are optional, but if given need to be correct. Otherwise, the program might produce wrong results!</b>__@param constantSetSecond A list of constant field specification Strings for the second input._@return This operator with an annotated constant field set for the second input.;@SuppressWarnings("unchecked")_	public O withConstantSetSecond(String... constantSetSecond) {_		if (this.udfSemantics == null) {_			this.udfSemantics = new DualInputSemanticProperties()__		}_		_		SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, constantSetSecond,_				null, null, null, null, this.getInput1Type(), this.getInput2Type(), this.getResultType())___		O returnType = (O) this__		return returnType__	};adds,a,constant,set,annotation,for,the,second,input,of,the,udf,p,constant,set,annotations,are,used,by,the,optimizer,to,infer,the,existence,of,data,properties,sorted,partitioned,grouped,in,certain,cases,these,annotations,allow,the,optimizer,to,generate,a,more,efficient,execution,plan,which,can,lead,to,improved,performance,constant,set,annotations,can,only,be,specified,if,the,second,input,and,the,output,type,of,the,udf,are,of,link,org,apache,flink,api,java,tuple,tuple,data,types,p,a,constant,set,annotation,is,a,set,of,constant,field,specifications,the,constant,field,specification,string,4,3,specifies,that,this,udf,copies,the,fourth,field,of,an,input,tuple,to,the,third,field,of,the,output,tuple,field,references,are,zero,indexed,p,b,notice,constant,set,annotations,are,optional,but,if,given,need,to,be,correct,otherwise,the,program,might,produce,wrong,results,b,param,constant,set,second,a,list,of,constant,field,specification,strings,for,the,second,input,return,this,operator,with,an,annotated,constant,field,set,for,the,second,input;suppress,warnings,unchecked,public,o,with,constant,set,second,string,constant,set,second,if,this,udf,semantics,null,this,udf,semantics,new,dual,input,semantic,properties,semantic,prop,util,get,semantic,props,dual,from,string,this,udf,semantics,null,constant,set,second,null,null,null,null,this,get,input1type,this,get,input2type,this,get,result,type,o,return,type,o,this,return,return,type
