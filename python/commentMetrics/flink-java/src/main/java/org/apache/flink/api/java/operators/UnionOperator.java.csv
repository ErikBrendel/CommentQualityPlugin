# id;timestamp;commentText;codeText;commentWords;codeWords
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName);1415874087;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName) {_		super(input1, input2, input1.getType())__		_		this.unionLocationName = unionLocationName__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,string,union,location,name,super,input1,input2,input1,get,type,this,union,location,name,union,location,name
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName);1420730997;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName) {_		super(input1, input2, input1.getType())__		_		if (!input1.getType().equals(input2.getType())) {_			throw new InvalidProgramException("Cannot union inputs of different types. Input1=" _					+ input1.getType() + ", input2=" + input2.getType())__		}_		_		this.unionLocationName = unionLocationName__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,string,union,location,name,super,input1,input2,input1,get,type,if,input1,get,type,equals,input2,get,type,throw,new,invalid,program,exception,cannot,union,inputs,of,different,types,input1,input1,get,type,input2,input2,get,type,this,union,location,name,union,location,name
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName);1454679829;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName) {_		super(input1, input2, input1.getType())__		_		if (!input1.getType().equals(input2.getType())) {_			throw new InvalidProgramException("Cannot union inputs of different types. Input1=" _					+ input1.getType() + ", input2=" + input2.getType())__		}_		_		this.unionLocationName = unionLocationName__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,string,union,location,name,super,input1,input2,input1,get,type,if,input1,get,type,equals,input2,get,type,throw,new,invalid,program,exception,cannot,union,inputs,of,different,types,input1,input1,get,type,input2,input2,get,type,this,union,location,name,union,location,name
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName);1500970016;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName) {_		super(input1, input2, input1.getType())___		if (!input1.getType().equals(input2.getType())) {_			throw new InvalidProgramException("Cannot union inputs of different types. Input1="_					+ input1.getType() + ", input2=" + input2.getType())__		}__		this.unionLocationName = unionLocationName__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,string,union,location,name,super,input1,input2,input1,get,type,if,input1,get,type,equals,input2,get,type,throw,new,invalid,program,exception,cannot,union,inputs,of,different,types,input1,input1,get,type,input2,input2,get,type,this,union,location,name,union,location,name
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName);1534350887;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2, String unionLocationName) {_		super(input1, input2, input1.getType())___		if (!input1.getType().equals(input2.getType())) {_			throw new InvalidProgramException("Cannot union inputs of different types. Input1="_					+ input1.getType() + ", input2=" + input2.getType())__		}__		this.unionLocationName = unionLocationName__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,string,union,location,name,super,input1,input2,input1,get,type,if,input1,get,type,equals,input2,get,type,throw,new,invalid,program,exception,cannot,union,inputs,of,different,types,input1,input1,get,type,input2,input2,get,type,this,union,location,name,union,location,name
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2);1405024514;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2) {_		super(input1, input2, input1.getType())__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,super,input1,input2,input1,get,type
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2);1405090423;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2) {_		super(input1, input2, input1.getType())__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,super,input1,input2,input1,get,type
UnionOperator -> public UnionOperator(DataSet<T> input1, DataSet<T> input2);1411473593;Create an operator that produces the union of the two given data sets.__@param input1 The first data set to be unioned._@param input2 The second data set to be unioned.;public UnionOperator(DataSet<T> input1, DataSet<T> input2) {_		super(input1, input2, input1.getType())__	};create,an,operator,that,produces,the,union,of,the,two,given,data,sets,param,input1,the,first,data,set,to,be,unioned,param,input2,the,second,data,set,to,be,unioned;public,union,operator,data,set,t,input1,data,set,t,input2,super,input1,input2,input1,get,type
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1405024514;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1405090423;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1411473593;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1415874087;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2, unionLocationName)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2,union,location,name
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1420730997;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2, unionLocationName)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2,union,location,name
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1454679829;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2, unionLocationName)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2,union,location,name
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1500970016;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2, unionLocationName)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2,union,location,name
UnionOperator -> @Override 	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2);1534350887;Returns the BinaryNodeTranslation of the Union.__@param input1 The first input of the union, as a common API operator._@param input2 The second input of the union, as a common API operator._@return The common API union operator.;@Override_	protected Union<T> translateToDataFlow(Operator<T> input1, Operator<T> input2) {_		return new Union<T>(input1, input2, unionLocationName)__	};returns,the,binary,node,translation,of,the,union,param,input1,the,first,input,of,the,union,as,a,common,api,operator,param,input2,the,second,input,of,the,union,as,a,common,api,operator,return,the,common,api,union,operator;override,protected,union,t,translate,to,data,flow,operator,t,input1,operator,t,input2,return,new,union,t,input1,input2,union,location,name
