# id;timestamp;commentText;codeText;commentWords;codeWords
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1411372797;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1411399886;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1411473593;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1416327964;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1444427170;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1454679829;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1455101486;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult);1500970016;Closes the iteration. This method defines the end of the iterative program part.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult)__	};closes,the,iteration,this,method,defines,the,end,of,the,iterative,program,part,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result
IterativeDataSet -> public int getMaxIterations();1411372797;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1411399886;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1411473593;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1416327964;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1444427170;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1454679829;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1455101486;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public int getMaxIterations();1500970016;Gets the maximum number of iterations.__@return The maximum number of iterations.;public int getMaxIterations() {_		return maxIterations__	};gets,the,maximum,number,of,iterations,return,the,maximum,number,of,iterations;public,int,get,max,iterations,return,max,iterations
IterativeDataSet -> public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1411372797;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1411399886;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1411473593;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1416327964;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1444427170;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> @PublicEvolving 	public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1455101486;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;@PublicEvolving_	public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,evolving,public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> @PublicEvolving 	public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1500970016;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration.__<p>Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;@PublicEvolving_	public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,evolving,public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> @PublicEvolving 	public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1455101486;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck)_	{_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> @PublicEvolving 	public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion( 			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck);1500970016;Registers an {@link Aggregator} for the iteration together with a {@link ConvergenceCriterion}. For a general description_of aggregators, see {@link #registerAggregator(String, Aggregator)} and {@link Aggregator}._At the end of each iteration, the convergence criterion takes the aggregator's global aggregate value and decided whether_the iteration should terminate. A typical use case is to have an aggregator that sums up the total error of change_in an iteration step and have to have a convergence criterion that signals termination as soon as the aggregate value_is below a certain threshold.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class._@param convergenceCheck The convergence criterion.__@return The IterativeDataSet itself, to allow chaining function calls.;@PublicEvolving_	public <X extends Value> IterativeDataSet<T> registerAggregationConvergenceCriterion(_			String name, Aggregator<X> aggregator, ConvergenceCriterion<X> convergenceCheck) {_		this.aggregators.registerAggregationConvergenceCriterion(name, aggregator, convergenceCheck)__		return this__	};registers,an,link,aggregator,for,the,iteration,together,with,a,link,convergence,criterion,for,a,general,description,of,aggregators,see,link,register,aggregator,string,aggregator,and,link,aggregator,at,the,end,of,each,iteration,the,convergence,criterion,takes,the,aggregator,s,global,aggregate,value,and,decided,whether,the,iteration,should,terminate,a,typical,use,case,is,to,have,an,aggregator,that,sums,up,the,total,error,of,change,in,an,iteration,step,and,have,to,have,a,convergence,criterion,that,signals,termination,as,soon,as,the,aggregate,value,is,below,a,certain,threshold,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,param,convergence,check,the,convergence,criterion,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,evolving,public,x,extends,value,iterative,data,set,t,register,aggregation,convergence,criterion,string,name,aggregator,x,aggregator,convergence,criterion,x,convergence,check,this,aggregators,register,aggregation,convergence,criterion,name,aggregator,convergence,check,return,this
IterativeDataSet -> public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1411372797;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1411399886;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1411473593;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1416327964;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator);1444427170;Registers an {@link Aggregator} for the iteration. Aggregators can be used to maintain simple statistics during the_iteration, such as number of elements processed. The aggregators compute global aggregates: After each iteration step,_the values are globally aggregated to produce one aggregate that represents statistics across all parallel instances._The value of an aggregator can be accessed in the next iteration._<p>_Aggregators can be accessed inside a function via the_{@link org.apache.flink.api.common.functions.AbstractRichFunction#getIterationRuntimeContext()} method.__@param name The name under which the aggregator is registered._@param aggregator The aggregator class.__@return The IterativeDataSet itself, to allow chaining function calls.;public IterativeDataSet<T> registerAggregator(String name, Aggregator<?> aggregator) {_		this.aggregators.registerAggregator(name, aggregator)__		return this__	};registers,an,link,aggregator,for,the,iteration,aggregators,can,be,used,to,maintain,simple,statistics,during,the,iteration,such,as,number,of,elements,processed,the,aggregators,compute,global,aggregates,after,each,iteration,step,the,values,are,globally,aggregated,to,produce,one,aggregate,that,represents,statistics,across,all,parallel,instances,the,value,of,an,aggregator,can,be,accessed,in,the,next,iteration,p,aggregators,can,be,accessed,inside,a,function,via,the,link,org,apache,flink,api,common,functions,abstract,rich,function,get,iteration,runtime,context,method,param,name,the,name,under,which,the,aggregator,is,registered,param,aggregator,the,aggregator,class,return,the,iterative,data,set,itself,to,allow,chaining,function,calls;public,iterative,data,set,t,register,aggregator,string,name,aggregator,aggregator,this,aggregators,register,aggregator,name,aggregator,return,this
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1411372797;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1411399886;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1411473593;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1416327964;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1444427170;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@param terminationCriterion The data set that being used to trigger halt on operation once it is empty._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,param,termination,criterion,the,data,set,that,being,used,to,trigger,halt,on,operation,once,it,is,empty,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1454679829;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@param terminationCriterion The data set that being used to trigger halt on operation once it is empty._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,param,termination,criterion,the,data,set,that,being,used,to,trigger,halt,on,operation,once,it,is,empty,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1455101486;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part._<p>_The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@param terminationCriterion The data set that being used to trigger halt on operation once it is empty._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,param,termination,criterion,the,data,set,that,being,used,to,trigger,halt,on,operation,once,it,is,empty,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion);1500970016;Closes the iteration and specifies a termination criterion. This method defines the end of_the iterative program part.__<p>The termination criterion is a means of dynamically signaling the iteration to halt. It is expressed via a data_set that will trigger to halt the loop as soon as the data set is empty. A typical way of using the termination_criterion is to have a filter that filters out all elements that are considered non-converged. As soon as no more_such elements exist, the iteration finishes.__@param iterationResult The data set that will be fed back to the next iteration._@param terminationCriterion The data set that being used to trigger halt on operation once it is empty._@return The DataSet that represents the result of the iteration, after the computation has terminated.__@see DataSet#iterate(int);public DataSet<T> closeWith(DataSet<T> iterationResult, DataSet<?> terminationCriterion) {_		return new BulkIterationResultSet<T>(getExecutionEnvironment(), getType(), this, iterationResult, terminationCriterion)__	};closes,the,iteration,and,specifies,a,termination,criterion,this,method,defines,the,end,of,the,iterative,program,part,p,the,termination,criterion,is,a,means,of,dynamically,signaling,the,iteration,to,halt,it,is,expressed,via,a,data,set,that,will,trigger,to,halt,the,loop,as,soon,as,the,data,set,is,empty,a,typical,way,of,using,the,termination,criterion,is,to,have,a,filter,that,filters,out,all,elements,that,are,considered,non,converged,as,soon,as,no,more,such,elements,exist,the,iteration,finishes,param,iteration,result,the,data,set,that,will,be,fed,back,to,the,next,iteration,param,termination,criterion,the,data,set,that,being,used,to,trigger,halt,on,operation,once,it,is,empty,return,the,data,set,that,represents,the,result,of,the,iteration,after,the,computation,has,terminated,see,data,set,iterate,int;public,data,set,t,close,with,data,set,t,iteration,result,data,set,termination,criterion,return,new,bulk,iteration,result,set,t,get,execution,environment,get,type,this,iteration,result,termination,criterion
IterativeDataSet -> public AggregatorRegistry getAggregators();1411372797;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)_)}.__@return The registry for aggregators.;public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> public AggregatorRegistry getAggregators();1411399886;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)_)}.__@return The registry for aggregators.;public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> public AggregatorRegistry getAggregators();1411473593;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)_)}.__@return The registry for aggregators.;public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> public AggregatorRegistry getAggregators();1416327964;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)_)}.__@return The registry for aggregators.;public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> public AggregatorRegistry getAggregators();1444427170;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)_)}.__@return The registry for aggregators.;public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> @PublicEvolving 	public AggregatorRegistry getAggregators();1455101486;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion))}.__@return The registry for aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,aggregators
IterativeDataSet -> @PublicEvolving 	public AggregatorRegistry getAggregators();1500970016;Gets the registry for aggregators. On the registry, one can add {@link Aggregator}s and an aggregator-based_{@link ConvergenceCriterion}. This method offers an alternative way to registering the aggregators via_{@link #registerAggregator(String, Aggregator)} and {@link #registerAggregationConvergenceCriterion(String, Aggregator, ConvergenceCriterion)}.__@return The registry for aggregators.;@PublicEvolving_	public AggregatorRegistry getAggregators() {_		return aggregators__	};gets,the,registry,for,aggregators,on,the,registry,one,can,add,link,aggregator,s,and,an,aggregator,based,link,convergence,criterion,this,method,offers,an,alternative,way,to,registering,the,aggregators,via,link,register,aggregator,string,aggregator,and,link,register,aggregation,convergence,criterion,string,aggregator,convergence,criterion,return,the,registry,for,aggregators;public,evolving,public,aggregator,registry,get,aggregators,return,aggregators
