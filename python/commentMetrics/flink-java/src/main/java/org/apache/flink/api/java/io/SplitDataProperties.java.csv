# id;timestamp;commentText;codeText;commentWords;codeWords
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1424445001;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			int[] flatKeys = this.computeFlatKeys(keyExp)___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,result,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,int,flat,keys,this,compute,flat,keys,key,exp,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1446112342;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			int[] flatKeys = this.computeFlatKeys(keyExp)___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,int,flat,keys,this,compute,flat,keys,key,exp,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1453803418;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(keyExp, this.type)__			int[] flatKeys = ek.computeLogicalKeyPositions()___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,keys,expression,keys,t,ek,new,keys,expression,keys,key,exp,this,type,int,flat,keys,ek,compute,logical,key,positions,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1454428544;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(keyExp, this.type)__			int[] flatKeys = ek.computeLogicalKeyPositions()___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,keys,expression,keys,t,ek,new,keys,expression,keys,key,exp,this,type,int,flat,keys,ek,compute,logical,key,positions,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1455477986;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(keyExp, this.type)__			int[] flatKeys = ek.computeLogicalKeyPositions()___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,keys,expression,keys,t,ek,new,keys,expression,keys,key,exp,this,type,int,flat,keys,ek,compute,logical,key,positions,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders);1501511872;Defines that the data within an input split is sorted on the fields defined by the field expressions_in the specified orders. Multiple field expressions must be separated by the semicolon '_' character._All records of an input split must be emitted by the input format in the defined order.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field expressions of the grouping key._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(String orderFields, Order[] orders) {__		if (orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		}__		String[] orderKeysA = orderFields.split("_")__		if (orderKeysA.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderKeysA.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if (this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for (int i = 0_ i < orderKeysA.length_ i++) {_			String keyExp = orderKeysA[i]__			Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(keyExp, this.type)__			int[] flatKeys = ek.computeLogicalKeyPositions()___			for (int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in field expression " + keyExp)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i])__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,expressions,in,the,specified,orders,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,expressions,of,the,grouping,key,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,string,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,string,order,keys,a,order,fields,split,if,order,keys,a,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,keys,a,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,keys,a,length,i,string,key,exp,order,keys,a,i,keys,expression,keys,t,ek,new,keys,expression,keys,key,exp,this,type,int,flat,keys,ek,compute,logical,key,positions,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,field,expression,key,exp,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1424445001;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1446112342;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1453803418;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1454428544;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1455477986;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties(TypeInformation<T> type);1501511872;Creates SplitDataProperties for the given data types.__@param type The data type of the SplitDataProperties.;public SplitDataProperties(TypeInformation<T> type) {_		this.type = type__	};creates,split,data,properties,for,the,given,data,types,param,type,the,data,type,of,the,split,data,properties;public,split,data,properties,type,information,t,type,this,type,type
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1424445001;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1446112342;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1453803418;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1454428544;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1455477986;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields);1501511872;Defines that data is partitioned across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(int... partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,int,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1424445001;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,result,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1446112342;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1453803418;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1454428544;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1455477986;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if(orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if(this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for(int i=0_ i<orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for(int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i] )__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders);1501511872;Defines that the data within an input split is sorted on the fields defined by the field positions_in the specified orders._All records of an input split must be emitted by the input format in the defined order.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param orderFields The field positions of the grouping keys._@param orders The orders of the fields._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsOrderedBy(int[] orderFields, Order[] orders) {__		if (orderFields == null || orders == null) {_			throw new InvalidProgramException("OrderFields or Orders may not be null.")__		} else if (orderFields.length == 0) {_			throw new InvalidProgramException("OrderFields may not be empty.")__		} else if (orders.length == 0) {_			throw new InvalidProgramException("Orders may not be empty")__		} else if (orderFields.length != orders.length) {_			throw new InvalidProgramException("Number of OrderFields and Orders must match.")__		}__		if (this.splitGroupKeys != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitOrdering = new Ordering()___		for (int i = 0_ i < orderFields.length_ i++) {_			int pos = orderFields[i]__			int[] flatKeys = this.getAllFlatKeys(new int[]{pos})___			for (int key : flatKeys) {_				_				for (int okey : splitOrdering.getFieldPositions()) {_					if (key == okey) {_						throw new InvalidProgramException("Duplicate field in the field expression " + pos)__					}_				}_				_				this.splitOrdering.appendOrdering(key, null, orders[i])__			}_		}_		return this__	};defines,that,the,data,within,an,input,split,is,sorted,on,the,fields,defined,by,the,field,positions,in,the,specified,orders,all,records,of,an,input,split,must,be,emitted,by,the,input,format,in,the,defined,order,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,order,fields,the,field,positions,of,the,grouping,keys,param,orders,the,orders,of,the,fields,return,this,split,data,properties,object;public,split,data,properties,t,splits,ordered,by,int,order,fields,order,orders,if,order,fields,null,orders,null,throw,new,invalid,program,exception,order,fields,or,orders,may,not,be,null,else,if,order,fields,length,0,throw,new,invalid,program,exception,order,fields,may,not,be,empty,else,if,orders,length,0,throw,new,invalid,program,exception,orders,may,not,be,empty,else,if,order,fields,length,orders,length,throw,new,invalid,program,exception,number,of,order,fields,and,orders,must,match,if,this,split,group,keys,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,ordering,new,ordering,for,int,i,0,i,order,fields,length,i,int,pos,order,fields,i,int,flat,keys,this,get,all,flat,keys,new,int,pos,for,int,key,flat,keys,for,int,okey,split,ordering,get,field,positions,if,key,okey,throw,new,invalid,program,exception,duplicate,field,in,the,field,expression,pos,this,split,ordering,append,ordering,key,null,orders,i,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1424445001;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if(partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if(partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<T>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,t,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1446112342;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if(partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if(partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<T>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,t,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1453803418;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if(partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if(partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1454428544;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if(partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if(partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1455477986;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if(partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if(partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields);1501511872;Defines that data is partitioned using an identifiable method_across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, String partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		}__		String[] partitionKeysA = partitionFields.split("_")__		if (partitionKeysA.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionKeysA)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		}_		else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,an,identifiable,method,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,string,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,string,partition,keys,a,partition,fields,split,if,partition,keys,a,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,keys,a,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1424445001;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1446112342;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1453803418;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1454428544;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1455477986;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionFields);1501511872;Defines that data is partitioned across input splits on the fields defined by field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be contained in a single input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionFields The field expressions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionFields) {_		return this.splitsPartitionedBy(null, partitionFields)__	};defines,that,data,is,partitioned,across,input,splits,on,the,fields,defined,by,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,fields,the,field,expressions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,fields,return,this,splits,partitioned,by,null,partition,fields
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1424445001;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<T>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,t,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1446112342;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<T>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,t,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1453803418;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1454428544;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1455477986;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields);1501511872;Defines that data is partitioned using a specific partitioning method_across input splits on the fields defined by field positions._All records sharing the same key (combination) must be contained in a single input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param partitionMethodId An ID for the method that was used to partition the data across splits._@param partitionFields The field positions of the partitioning keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsPartitionedBy(String partitionMethodId, int... partitionFields) {__		if (partitionFields == null) {_			throw new InvalidProgramException("PartitionFields may not be null.")__		} else if (partitionFields.length == 0) {_			throw new InvalidProgramException("PartitionFields may not be empty.")__		}__		this.splitPartitionKeys = getAllFlatKeys(partitionFields)__		if (partitionMethodId != null) {_			this.splitPartitioner = new SourcePartitionerMarker<>(partitionMethodId)__		} else {_			this.splitPartitioner = null__		}__		return this__	};defines,that,data,is,partitioned,using,a,specific,partitioning,method,across,input,splits,on,the,fields,defined,by,field,positions,all,records,sharing,the,same,key,combination,must,be,contained,in,a,single,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,partition,method,id,an,id,for,the,method,that,was,used,to,partition,the,data,across,splits,param,partition,fields,the,field,positions,of,the,partitioning,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,partitioned,by,string,partition,method,id,int,partition,fields,if,partition,fields,null,throw,new,invalid,program,exception,partition,fields,may,not,be,null,else,if,partition,fields,length,0,throw,new,invalid,program,exception,partition,fields,may,not,be,empty,this,split,partition,keys,get,all,flat,keys,partition,fields,if,partition,method,id,null,this,split,partitioner,new,source,partitioner,marker,partition,method,id,else,this,split,partitioner,null,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1424445001;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1446112342;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1453803418;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1454428544;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1455477986;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(int... groupFields);1501511872;Defines that the data within an input split is grouped on the fields defined by the field positions._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field positions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(int... groupFields) {__		if (groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		} else if (groupFields.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if (this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupFields)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,positions,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,positions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,int,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,else,if,group,fields,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,fields,return,this
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1424445001;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1446112342;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1453803418;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1454428544;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1455477986;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties(DataSource<T> source);1501511872;Creates SplitDataProperties for the given data types.__@param source The DataSource for which the SplitDataProperties are created.;public SplitDataProperties(DataSource<T> source) {_		this.type = source.getType()__	};creates,split,data,properties,for,the,given,data,types,param,source,the,data,source,for,which,the,split,data,properties,are,created;public,split,data,properties,data,source,t,source,this,type,source,get,type
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1424445001;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@result This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,result,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1446112342;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1453803418;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1454428544;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1455477986;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split._<br>_<b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if(groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if(this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,br,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
SplitDataProperties -> public SplitDataProperties<T> splitsGroupedBy(String groupFields);1501511872;Defines that the data within an input split is grouped on the fields defined by the field expressions._Multiple field expressions must be separated by the semicolon '_' character._All records sharing the same key (combination) must be subsequently emitted by the input_format for each input split.__<p><b>_IMPORTANT: Providing wrong information with SplitDataProperties can cause wrong results!_</b>__@param groupFields The field expressions of the grouping keys._@return This SplitDataProperties object.;public SplitDataProperties<T> splitsGroupedBy(String groupFields) {__		if (groupFields == null) {_			throw new InvalidProgramException("GroupFields may not be null.")__		}__		String[] groupKeysA = groupFields.split("_")__		if (groupKeysA.length == 0) {_			throw new InvalidProgramException("GroupFields may not be empty.")__		}__		if (this.splitOrdering != null) {_			throw new InvalidProgramException("DataSource may either be grouped or sorted.")__		}__		this.splitGroupKeys = getAllFlatKeys(groupKeysA)___		return this__	};defines,that,the,data,within,an,input,split,is,grouped,on,the,fields,defined,by,the,field,expressions,multiple,field,expressions,must,be,separated,by,the,semicolon,character,all,records,sharing,the,same,key,combination,must,be,subsequently,emitted,by,the,input,format,for,each,input,split,p,b,important,providing,wrong,information,with,split,data,properties,can,cause,wrong,results,b,param,group,fields,the,field,expressions,of,the,grouping,keys,return,this,split,data,properties,object;public,split,data,properties,t,splits,grouped,by,string,group,fields,if,group,fields,null,throw,new,invalid,program,exception,group,fields,may,not,be,null,string,group,keys,a,group,fields,split,if,group,keys,a,length,0,throw,new,invalid,program,exception,group,fields,may,not,be,empty,if,this,split,ordering,null,throw,new,invalid,program,exception,data,source,may,either,be,grouped,or,sorted,this,split,group,keys,get,all,flat,keys,group,keys,a,return,this
