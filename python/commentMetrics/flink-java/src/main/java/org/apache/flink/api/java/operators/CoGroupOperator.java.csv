# id;timestamp;commentText;codeText;commentWords;codeWords
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1412761141;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1415874087;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1416925916;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1416945730;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1418760487;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1420730997;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1427097830;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1428086500;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1433741389;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1446112342;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1449526313;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1453200998;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1453803418;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1454428544;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1454679829;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1466429757;Continues a CoGroup transformation. <br>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String... fields);1500970016;Continues a CoGroup transformation.__<p>Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,p,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> public Partitioner<?> getPartitioner();1416925916;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1416945730;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1418760487;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1420730997;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1427097830;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1428086500;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1433741389;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1446112342;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1449526313;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1453200998;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1453803418;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1454428544;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1454679829;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1466429757;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> public Partitioner<?> getPartitioner();1500970016;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_		return customPartitioner__	};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1416925916;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = partitioner__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1416945730;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = partitioner__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1418760487;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1420730997;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1427097830;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1428086500;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1433741389;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1446112342;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1449526313;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1453200998;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1453803418;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1454428544;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1454679829;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1466429757;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner);1500970016;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way.__<p>NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperatorWithoutFunction withPartitioner(Partitioner<?> partitioner) {_					if (partitioner != null) {_						keys1.validateCustomPartitioner(partitioner, null)__						keys2.validateCustomPartitioner(partitioner, null)__					}_					this.customPartitioner = input1.clean(partitioner)__					return this__				};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,without,function,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields);1405024514;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>__@param field0 The first field of the second co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields) {_				String[] actualFields = new String[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,field0,the,first,field,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,expression,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields);1405090423;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>__@param field0 The first field of the second co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields) {_				String[] actualFields = new String[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,field0,the,first,field,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,expression,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields);1406821655;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>__@param field0 The first field of the second co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields) {_				String[] actualFields = new String[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,field0,the,first,field,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,expression,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields);1406830680;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>__@param field0 The first field of the second co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields) {_				String[] actualFields = new String[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,field0,the,first,field,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,expression,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields);1406853229;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>__@param field0 The first field of the second co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String field0, String... fields) {_				String[] actualFields = new String[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,field0,the,first,field,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,expression,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1405024514;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1405090423;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1406821655;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1406830680;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1406853229;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1407510987;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1407933685;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType()))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411399886;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411473593;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1411718446;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1412232976;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1412761141;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1415874087;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1416925916;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1416945730;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1418760487;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1420730997;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1427097830;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1428086500;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1433741389;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1446112342;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1449526313;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new Keys.SelectorFunctionKeys<I2, K>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,keys,selector,function,keys,i2,k,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1453200998;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1453803418;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1454428544;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1454679829;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(keyExtractor, input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1466429757;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(input1.clean(keyExtractor), input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,input1,clean,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor);1500970016;Continues a CoGroup transformation and defines a {@link KeySelector} function for the second co-grouped {@link DataSet}.__<p>The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is grouped.__@param keyExtractor The KeySelector function which extracts the key values from the second DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public <K> CoGroupOperatorWithoutFunction equalTo(KeySelector<I2, K> keyExtractor) {_				TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input2.getType())__				return createCoGroupOperator(new SelectorFunctionKeys<>(input1.clean(keyExtractor), input2.getType(), keyType))__			};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,second,co,grouped,link,data,set,p,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,k,co,group,operator,without,function,equal,to,key,selector,i2,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input2,get,type,return,create,co,group,operator,new,selector,function,keys,input1,clean,key,extractor,input2,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1405024514;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link CoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1405090423;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link CoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1406821655;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1406830680;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1406853229;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1407510987;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1407933685;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411372797;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411372797;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411372797;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,java,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411372797;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411399886;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411473593;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1411718446;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}_				_				_				if (input1 instanceof SolutionSetPlaceHolder) {_					if (keys1 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys1).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input1).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}_				if (input2 instanceof SolutionSetPlaceHolder) {_					if (keys2 instanceof FieldPositionKeys) {_						int[] positions = ((FieldPositionKeys<?>) keys2).computeLogicalKeyPositions()__						((SolutionSetPlaceHolder<?>) input2).checkJoinKeyFields(positions)__					} else {_						throw new InvalidProgramException("Currently, the solution set may only be CoGrouped with using tuple field positions.")__					}_				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,if,input1,instanceof,solution,set,place,holder,if,keys1,instanceof,field,position,keys,int,positions,field,position,keys,keys1,compute,logical,key,positions,solution,set,place,holder,input1,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,if,input2,instanceof,solution,set,place,holder,if,keys2,instanceof,field,position,keys,int,positions,field,position,keys,keys2,compute,logical,key,positions,solution,set,place,holder,input2,check,join,key,fields,positions,else,throw,new,invalid,program,exception,currently,the,solution,set,may,only,be,co,grouped,with,using,tuple,field,positions,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1412232976;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}__				if (!keys1.areCompatibale(keys2)) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.")__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,if,keys1,are,compatibale,keys2,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1412761141;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1415874087;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1416925916;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1416945730;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1418760487;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1420730997;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1427097830;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1428086500;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1433741389;Intermediate step of a CoGroup transformation. <br/>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1446112342;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1449526313;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1453200998;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1453803418;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1454428544;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1454679829;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1466429757;Intermediate step of a CoGroup transformation. <br>_To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch(IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,br,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2);1500970016;Intermediate step of a CoGroup transformation.__<p>To continue the CoGroup transformation, provide a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} by calling_{@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)}.;private CoGroupOperatorWithoutFunction createCoGroupOperator(Keys<I2> keys2) {_				if (keys2 == null) {_					throw new NullPointerException()__				}__				if (keys2.isEmpty()) {_					throw new InvalidProgramException("The co-group keys must not be empty.")__				}_				try {_					keys1.areCompatible(keys2)__				} catch (IncompatibleKeysException ike) {_					throw new InvalidProgramException("The pair of co-group keys are not compatible with each other.", ike)__				}__				return new CoGroupOperatorWithoutFunction(keys2)__			};intermediate,step,of,a,co,group,transformation,p,to,continue,the,co,group,transformation,provide,a,link,org,apache,flink,api,common,functions,rich,co,group,function,by,calling,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function;private,co,group,operator,without,function,create,co,group,operator,keys,i2,keys2,if,keys2,null,throw,new,null,pointer,exception,if,keys2,is,empty,throw,new,invalid,program,exception,the,co,group,keys,must,not,be,empty,try,keys1,are,compatible,keys2,catch,incompatible,keys,exception,ike,throw,new,invalid,program,exception,the,pair,of,co,group,keys,are,not,compatible,with,each,other,ike,return,new,co,group,operator,without,function,keys2
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1407933685;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411372797;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411372797;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411372797;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411372797;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411399886;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411473593;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1411718446;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1412232976;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,field,position,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1412761141;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1415874087;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1416925916;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1416945730;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1418760487;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1420730997;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1427097830;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1428086500;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1433741389;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1446112342;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1449526313;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1453200998;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1453803418;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1454428544;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1454679829;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1466429757;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int... fields);1500970016;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.__<p><b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b>__@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,p,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1416945730;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1418760487;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1420730997;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1427097830;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1428086500;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1433741389;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1446112342;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1449526313;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,i1,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1453200998;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {_					if (! (input1.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<>(new String[]{fieldExpression}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,if,input1,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i1,ek,new,expression,keys,new,string,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1453803418;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(fieldExpression, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,expression,keys,i1,ek,new,expression,keys,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1454428544;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(fieldExpression, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,expression,keys,i1,ek,new,expression,keys,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1454679829;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(fieldExpression, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,expression,keys,i1,ek,new,expression,keys,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1466429757;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(fieldExpression, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,expression,keys,i1,ek,new,expression,keys,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order);1500970016;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.__<p>Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(String fieldExpression, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(fieldExpression, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()___					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}__					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,first,group,string,field,expression,order,order,expression,keys,i1,ek,new,expression,keys,field,expression,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1405024514;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1405090423;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1406821655;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1406830680;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1406853229;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int, int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int field0, int... fields);1407510987;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int, int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int field0, int... fields) {_			int[] actualFields = new int[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1412761141;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1415874087;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1416925916;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1416945730;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1418760487;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1420730997;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1427097830;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1428086500;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1433741389;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1446112342;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1449526313;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<I2>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,i2,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1453200998;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1453803418;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1454428544;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1454679829;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1466429757;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br>___@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(String... fields);1500970016;Continues a CoGroup transformation and defines the fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.__@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.common.functions.CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(String... fields) {_				return createCoGroupOperator(new Keys.ExpressionKeys<>(fields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,common,functions,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,string,fields,return,create,co,group,operator,new,keys,expression,keys,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1416945730;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1418760487;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1420730997;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1427097830;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1428086500;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1433741389;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1446112342;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1449526313;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,i2,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1453200998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {_					if (!input2.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input2.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<>(new int[]{field}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,if,input2,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input2,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i2,ek,new,expression,keys,new,int,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1453803418;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(field, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,expression,keys,i2,ek,new,expression,keys,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1454428544;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(field, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,expression,keys,i2,ek,new,expression,keys,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1454679829;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(field, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,expression,keys,i2,ek,new,expression,keys,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1466429757;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(field, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,expression,keys,i2,ek,new,expression,keys,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order);1500970016;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple elements and Pojos can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(int field, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(field, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()___					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}__					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,second,group,int,field,order,order,expression,keys,i2,ek,new,expression,keys,field,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1416945730;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1418760487;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1420730997;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1427097830;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1428086500;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1433741389;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.</br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br/>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1446112342;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1449526313;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<I1>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,i1,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1453200998;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {_					if (!input1.getType().isTupleType()) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__					}_					if (field >= input1.getType().getArity()) {_						throw new IllegalArgumentException("Order key out of tuple bounds.")__					}_					ExpressionKeys<I1> ek = new ExpressionKeys<>(new int[]{field}, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,if,input1,get,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,input1,get,type,get,arity,throw,new,illegal,argument,exception,order,key,out,of,tuple,bounds,expression,keys,i1,ek,new,expression,keys,new,int,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1453803418;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(field, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,expression,keys,i1,ek,new,expression,keys,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1454428544;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(field, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,expression,keys,i1,ek,new,expression,keys,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1454679829;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(field, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,expression,keys,i1,ek,new,expression,keys,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1466429757;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.<br>_<b>Note: Only groups of Tuple elements and Pojos can be sorted.</b><br>_Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(field, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,br,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,expression,keys,i1,ek,new,expression,keys,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order);1500970016;Sorts {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the first input on the_specified field in the specified {@link Order}.__<p><b>Note: Only groups of Tuple elements and Pojos can be sorted.</b>__<p>Groups can be sorted by multiple fields by chaining {@link #sortFirstGroup(int, Order)} calls.__@param field The Tuple field on which the group is sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public CoGroupOperatorWithoutFunction sortFirstGroup(int field, Order order) {__					ExpressionKeys<I1> ek = new ExpressionKeys<>(field, input1.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()___					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderFirst.add(new ImmutablePair<>(key, order))__					}__					return this__				};sorts,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,first,input,on,the,specified,field,in,the,specified,link,order,p,b,note,only,groups,of,tuple,elements,and,pojos,can,be,sorted,b,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,first,group,int,order,calls,param,field,the,tuple,field,on,which,the,group,is,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,org,apache,flink,api,java,tuple,tuple,see,order;public,co,group,operator,without,function,sort,first,group,int,field,order,order,expression,keys,i1,ek,new,expression,keys,field,input1,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,first,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1405024514;Finalizes a CoGroup transformation by applying a {@link CoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see CoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1405090423;Finalizes a CoGroup transformation by applying a {@link CoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see CoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1406821655;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isSerializedLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,serialized,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1406830680;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1406853229;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1407510987;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1407933685;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411372797;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411372797;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411372797;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.java.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.java.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,java,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,java,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411372797;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411399886;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411473593;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					if (FunctionUtils.isLambdaFunction(function)) {_						throw new UnsupportedLambdaExpressionException()__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1411718446;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1412232976;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1412761141;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType)__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1415874087;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1416925916;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType, _							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1416945730;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, function, returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1418760487;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1420730997;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1427097830;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1428086500;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1433741389;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br/>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1446112342;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType())__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1449526313;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<I1, I2, R>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,i1,i2,r,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1453200998;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1453803418;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1454428544;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1454679829;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1466429757;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.<br>_Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)__					_					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,br,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function);1500970016;Finalizes a CoGroup transformation by applying a {@link org.apache.flink.api.common.functions.RichCoGroupFunction} to groups of elements with identical keys.__<p>Each CoGroupFunction call returns an arbitrary number of keys.__@param function The CoGroupFunction that is called for all groups of elements with identical keys._@return An CoGroupOperator that represents the co-grouped result DataSet.__@see org.apache.flink.api.common.functions.RichCoGroupFunction_@see DataSet;public <R> CoGroupOperator<I1, I2, R> with(CoGroupFunction<I1, I2, R> function) {_					if (function == null) {_						throw new NullPointerException("CoGroup function must not be null.")__					}_					TypeInformation<R> returnType = TypeExtractor.getCoGroupReturnTypes(function, input1.getType(), input2.getType(),_							Utils.getCallLocationName(), true)___					return new CoGroupOperator<>(input1, input2, keys1, keys2, input1.clean(function), returnType,_							groupSortKeyOrderFirst, groupSortKeyOrderSecond,_							customPartitioner, Utils.getCallLocationName())__				};finalizes,a,co,group,transformation,by,applying,a,link,org,apache,flink,api,common,functions,rich,co,group,function,to,groups,of,elements,with,identical,keys,p,each,co,group,function,call,returns,an,arbitrary,number,of,keys,param,function,the,co,group,function,that,is,called,for,all,groups,of,elements,with,identical,keys,return,an,co,group,operator,that,represents,the,co,grouped,result,data,set,see,org,apache,flink,api,common,functions,rich,co,group,function,see,data,set;public,r,co,group,operator,i1,i2,r,with,co,group,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,co,group,function,must,not,be,null,type,information,r,return,type,type,extractor,get,co,group,return,types,function,input1,get,type,input2,get,type,utils,get,call,location,name,true,return,new,co,group,operator,input1,input2,keys1,keys2,input1,clean,function,return,type,group,sort,key,order,first,group,sort,key,order,second,custom,partitioner,utils,get,call,location,name
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String field0, String... fields);1405024514;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param field0 The first field of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String field0, String... fields) {_			String[] actualFields = new String[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,field0,the,first,field,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String field0, String... fields);1405090423;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param field0 The first field of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String field0, String... fields) {_			String[] actualFields = new String[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,field0,the,first,field,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String field0, String... fields);1406821655;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param field0 The first field of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String field0, String... fields) {_			String[] actualFields = new String[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,field0,the,first,field,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String field0, String... fields);1406830680;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param field0 The first field of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String field0, String... fields) {_			String[] actualFields = new String[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,field0,the,first,field,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(String field0, String... fields);1406853229;Continues a CoGroup transformation. <br/>_Defines the fields of the first co-grouped {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param field0 The first field of the Tuple fields of the first co-grouped DataSets that should be used as key_@param fields The  fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int, int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(String field0, String... fields) {_			String[] actualFields = new String[fields.length + 1]__			actualFields[0] = field0__			System.arraycopy(fields, 0, actualFields, 1, fields.length)__			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(actualFields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,field0,the,first,field,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,string,field0,string,fields,string,actual,fields,new,string,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,actual,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1407933685;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411372797;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411372797;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411372797;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411372797;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411399886;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411473593;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1411718446;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1412232976;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.FieldPositionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,field,position,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1412761141;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1415874087;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1416925916;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1416945730;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1418760487;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1420730997;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1427097830;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1428086500;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1433741389;Continues a CoGroup transformation. <br/>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1446112342;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1449526313;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<I1>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,i1,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1453200998;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1453803418;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1454428544;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1454679829;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1466429757;Continues a CoGroup transformation. <br>_Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.<br>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,br,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public CoGroupOperatorSetsPredicate where(int... fields);1500970016;Continues a CoGroup transformation.__<p>Defines the {@link Tuple} fields of the first co-grouped {@link DataSet} that should be used as grouping keys.__<p><b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b>___@param fields The indexes of the Tuple fields of the first co-grouped DataSets that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see Tuple_@see DataSet;public CoGroupOperatorSetsPredicate where(int... fields) {_			return new CoGroupOperatorSetsPredicate(new Keys.ExpressionKeys<>(fields, input1.getType()))__		};continues,a,co,group,transformation,p,defines,the,link,tuple,fields,of,the,first,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,p,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,param,fields,the,indexes,of,the,tuple,fields,of,the,first,co,grouped,data,sets,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,tuple,see,data,set;public,co,group,operator,sets,predicate,where,int,fields,return,new,co,group,operator,sets,predicate,new,keys,expression,keys,fields,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1405024514;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1405090423;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(CoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1406821655;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1406830680;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1406853229;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields);1407510987;Continues a CoGroup transformation and defines the {@link Tuple} fields of the second co-grouped_{@link DataSet} that should be used as grouping keys.<br/>_<b>Note: Fields can only be selected as grouping keys on Tuple DataSets.</b><br/>__@param field0 The first index of the Tuple fields of the second co-grouped DataSets that should be used as key_@param fields The indexes of the Tuple fields of the second co-grouped DataSet that should be used as keys._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate.CoGroupOperatorWithoutFunction#with(org.apache.flink.api.java.functions.RichCoGroupFunction)} to finalize the CoGroup transformation.;public CoGroupOperatorWithoutFunction equalTo(int field0, int... fields) {_				int[] actualFields = new int[fields.length + 1]__				actualFields[0] = field0__				System.arraycopy(fields, 0, actualFields, 1, fields.length)__				return createCoGroupOperator(new Keys.FieldPositionKeys<I2>(actualFields, input2.getType()))__			};continues,a,co,group,transformation,and,defines,the,link,tuple,fields,of,the,second,co,grouped,link,data,set,that,should,be,used,as,grouping,keys,br,b,note,fields,can,only,be,selected,as,grouping,keys,on,tuple,data,sets,b,br,param,field0,the,first,index,of,the,tuple,fields,of,the,second,co,grouped,data,sets,that,should,be,used,as,key,param,fields,the,indexes,of,the,tuple,fields,of,the,second,co,grouped,data,set,that,should,be,used,as,keys,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,co,group,operator,without,function,with,org,apache,flink,api,java,functions,rich,co,group,function,to,finalize,the,co,group,transformation;public,co,group,operator,without,function,equal,to,int,field0,int,fields,int,actual,fields,new,int,fields,length,1,actual,fields,0,field0,system,arraycopy,fields,0,actual,fields,1,fields,length,return,create,co,group,operator,new,keys,field,position,keys,i2,actual,fields,input2,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1405024514;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1405090423;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1406821655;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1406830680;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link CoGroupOperatorSetsPredicate#equalTo()} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,co,group,operator,sets,predicate,equal,to,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1406853229;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int, int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1407510987;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int, int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1407933685;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType()))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411372797;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411399886;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411473593;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1411718446;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1412232976;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1412761141;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1415874087;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1416925916;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1416945730;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1418760487;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1420730997;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1427097830;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1428086500;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1433741389;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. </br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1446112342;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1449526313;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new Keys.SelectorFunctionKeys<I1, K>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,keys,selector,function,keys,i1,k,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1453200998;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1453803418;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1454428544;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1454679829;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(keyExtractor, input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1466429757;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped. <br>__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(input1.clean(keyExtractor), input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,br,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,input1,clean,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor);1500970016;Continues a CoGroup transformation and defines a {@link KeySelector} function for the first co-grouped {@link DataSet}.__<p>The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is grouped.__@param keyExtractor The KeySelector function which extracts the key values from the DataSet on which it is grouped._@return An incomplete CoGroup transformation._Call {@link org.apache.flink.api.java.operators.CoGroupOperator.CoGroupOperatorSets.CoGroupOperatorSetsPredicate#equalTo(int...)} to continue the CoGroup.__@see KeySelector_@see DataSet;public <K> CoGroupOperatorSetsPredicate where(KeySelector<I1, K> keyExtractor) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keyExtractor, input1.getType())__			return new CoGroupOperatorSetsPredicate(new SelectorFunctionKeys<>(input1.clean(keyExtractor), input1.getType(), keyType))__		};continues,a,co,group,transformation,and,defines,a,link,key,selector,function,for,the,first,co,grouped,link,data,set,p,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,grouped,param,key,extractor,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,grouped,return,an,incomplete,co,group,transformation,call,link,org,apache,flink,api,java,operators,co,group,operator,co,group,operator,sets,co,group,operator,sets,predicate,equal,to,int,to,continue,the,co,group,see,key,selector,see,data,set;public,k,co,group,operator,sets,predicate,where,key,selector,i1,k,key,extractor,type,information,k,key,type,type,extractor,get,key,selector,types,key,extractor,input1,get,type,return,new,co,group,operator,sets,predicate,new,selector,function,keys,input1,clean,key,extractor,input1,get,type,key,type
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1416945730;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1418760487;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1420730997;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1427097830;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1428086500;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1433741389;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.</br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1446112342;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1449526313;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<I2>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<Integer, Order>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,i2,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,integer,order,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1453200998;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {_					if (! (input2.getType() instanceof CompositeType)) {_						throw new InvalidProgramException("Specifying order keys via field positions is only valid for composite data types (pojo / tuple / case class)")__					}_					ExpressionKeys<I2> ek = new ExpressionKeys<>(new String[]{fieldExpression}, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,if,input2,get,type,instanceof,composite,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,composite,data,types,pojo,tuple,case,class,expression,keys,i2,ek,new,expression,keys,new,string,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1453803418;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(fieldExpression, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,expression,keys,i2,ek,new,expression,keys,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1454428544;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(fieldExpression, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,expression,keys,i2,ek,new,expression,keys,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1454679829;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(fieldExpression, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,expression,keys,i2,ek,new,expression,keys,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1466429757;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.<br>_Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(fieldExpression, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()__					_					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}_					_					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,br,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,expression,keys,i2,ek,new,expression,keys,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order);1500970016;Sorts Pojo or {@link org.apache.flink.api.java.tuple.Tuple} elements within a group in the second input on the_specified field in the specified {@link Order}.__<p>Groups can be sorted by multiple fields by chaining {@link #sortSecondGroup(String, Order)} calls.__@param fieldExpression The expression to the field on which the group is to be sorted._@param order The Order in which the specified Tuple field is sorted._@return A SortedGrouping with specified order of group element.__@see Order;public CoGroupOperatorWithoutFunction sortSecondGroup(String fieldExpression, Order order) {__					ExpressionKeys<I2> ek = new ExpressionKeys<>(fieldExpression, input2.getType())__					int[] groupOrderKeys = ek.computeLogicalKeyPositions()___					for (int key : groupOrderKeys) {_						this.groupSortKeyOrderSecond.add(new ImmutablePair<>(key, order))__					}__					return this__				};sorts,pojo,or,link,org,apache,flink,api,java,tuple,tuple,elements,within,a,group,in,the,second,input,on,the,specified,field,in,the,specified,link,order,p,groups,can,be,sorted,by,multiple,fields,by,chaining,link,sort,second,group,string,order,calls,param,field,expression,the,expression,to,the,field,on,which,the,group,is,to,be,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,sorted,return,a,sorted,grouping,with,specified,order,of,group,element,see,order;public,co,group,operator,without,function,sort,second,group,string,field,expression,order,order,expression,keys,i2,ek,new,expression,keys,field,expression,input2,get,type,int,group,order,keys,ek,compute,logical,key,positions,for,int,key,group,order,keys,this,group,sort,key,order,second,add,new,immutable,pair,key,order,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1416925916;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = partitioner__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1416945730;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = partitioner__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1418760487;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1420730997;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1427097830;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1428086500;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1433741389;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1446112342;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1449526313;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1453200998;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1453803418;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1454428544;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1454679829;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1466429757;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way._<p>_NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner);1500970016;Sets a custom partitioner for the CoGroup operation. The partitioner will be called on the join keys to determine_the partition a key should be assigned to. The partitioner is evaluated on both inputs in the_same way.__<p>NOTE: A custom partitioner can only be used with single-field CoGroup keys, not with composite CoGroup keys.__@param partitioner The custom partitioner to be used._@return This CoGroup operator, to allow for function chaining.;public CoGroupOperator<I1, I2, OUT> withPartitioner(Partitioner<?> partitioner) {_		if (partitioner != null) {_			keys1.validateCustomPartitioner(partitioner, null)__			keys2.validateCustomPartitioner(partitioner, null)__		}_		this.customPartitioner = getInput1().clean(partitioner)__		return this__	};sets,a,custom,partitioner,for,the,co,group,operation,the,partitioner,will,be,called,on,the,join,keys,to,determine,the,partition,a,key,should,be,assigned,to,the,partitioner,is,evaluated,on,both,inputs,in,the,same,way,p,note,a,custom,partitioner,can,only,be,used,with,single,field,co,group,keys,not,with,composite,co,group,keys,param,partitioner,the,custom,partitioner,to,be,used,return,this,co,group,operator,to,allow,for,function,chaining;public,co,group,operator,i1,i2,out,with,partitioner,partitioner,partitioner,if,partitioner,null,keys1,validate,custom,partitioner,partitioner,null,keys2,validate,custom,partitioner,partitioner,null,this,custom,partitioner,get,input1,clean,partitioner,return,this
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1416925916;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1416945730;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1418760487;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1420730997;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1427097830;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1428086500;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1433741389;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1446112342;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1449526313;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1453200998;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1453803418;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1454428544;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1454679829;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1466429757;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
CoGroupOperator -> CoGroupOperatorSets -> CoGroupOperatorSetsPredicate -> CoGroupOperatorWithoutFunction -> public Partitioner<?> getPartitioner();1500970016;Gets the custom partitioner used by this join, or {@code null}, if none is set.__@return The custom partitioner used by this join_;public Partitioner<?> getPartitioner() {_					return customPartitioner__				};gets,the,custom,partitioner,used,by,this,join,or,code,null,if,none,is,set,return,the,custom,partitioner,used,by,this,join;public,partitioner,get,partitioner,return,custom,partitioner
