# id;timestamp;commentText;codeText;commentWords;codeWords
Grouping -> @Internal 	public Partitioner<?> getCustomPartitioner();1454679829;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;@Internal_	public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;internal,public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> @Internal 	public Partitioner<?> getCustomPartitioner();1494598316;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;@Internal_	public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;internal,public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> @Internal 	public Partitioner<?> getCustomPartitioner();1500970016;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;@Internal_	public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;internal,public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> @Internal 	public DataSet<T> getInputDataSet();1454679829;Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that_if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the_following snippet:_<pre><code>_DataSet<X> notGrouped = input.groupBy().getDataSet()__DataSet<Y> allReduced = notGrouped.reduce()_</pre></code>_the <code>groupBy()</code> is as if it never happened, as the <code>notGrouped</code> DataSet corresponds_to the input of the <code>groupBy()</code> (because of the <code>getDataset()</code>).;@Internal_	public DataSet<T> getInputDataSet() {_		return this.inputDataSet__	};returns,the,input,data,set,of,a,grouping,operation,that,is,the,one,before,the,grouping,this,means,that,if,it,is,applied,directly,to,the,result,of,a,grouping,operation,it,will,cancel,its,effect,as,an,example,in,the,following,snippet,pre,code,data,set,x,not,grouped,input,group,by,get,data,set,data,set,y,all,reduced,not,grouped,reduce,pre,code,the,code,group,by,code,is,as,if,it,never,happened,as,the,code,not,grouped,code,data,set,corresponds,to,the,input,of,the,code,group,by,code,because,of,the,code,get,dataset,code;internal,public,data,set,t,get,input,data,set,return,this,input,data,set
Grouping -> @Internal 	public DataSet<T> getInputDataSet();1494598316;Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that_if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the_following snippet:_<pre><code>_DataSet<X> notGrouped = input.groupBy().getDataSet()__DataSet<Y> allReduced = notGrouped.reduce()_</pre></code>_the <code>groupBy()</code> is as if it never happened, as the <code>notGrouped</code> DataSet corresponds_to the input of the <code>groupBy()</code> (because of the <code>getDataset()</code>).;@Internal_	public DataSet<T> getInputDataSet() {_		return this.inputDataSet__	};returns,the,input,data,set,of,a,grouping,operation,that,is,the,one,before,the,grouping,this,means,that,if,it,is,applied,directly,to,the,result,of,a,grouping,operation,it,will,cancel,its,effect,as,an,example,in,the,following,snippet,pre,code,data,set,x,not,grouped,input,group,by,get,data,set,data,set,y,all,reduced,not,grouped,reduce,pre,code,the,code,group,by,code,is,as,if,it,never,happened,as,the,code,not,grouped,code,data,set,corresponds,to,the,input,of,the,code,group,by,code,because,of,the,code,get,dataset,code;internal,public,data,set,t,get,input,data,set,return,this,input,data,set
Grouping -> @Internal 	public DataSet<T> getInputDataSet();1500970016;Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that_if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the_following snippet:_<pre>{@code_DataSet<X> notGrouped = input.groupBy().getDataSet()__DataSet<Y> allReduced = notGrouped.reduce()_}</pre>_the {@code groupBy()} is as if it never happened, as the {@code notGrouped} DataSet corresponds_to the input of the {@code groupBy()} (because of the {@code getDataset()}).;@Internal_	public DataSet<T> getInputDataSet() {_		return this.inputDataSet__	};returns,the,input,data,set,of,a,grouping,operation,that,is,the,one,before,the,grouping,this,means,that,if,it,is,applied,directly,to,the,result,of,a,grouping,operation,it,will,cancel,its,effect,as,an,example,in,the,following,snippet,pre,code,data,set,x,not,grouped,input,group,by,get,data,set,data,set,y,all,reduced,not,grouped,reduce,pre,the,code,group,by,is,as,if,it,never,happened,as,the,code,not,grouped,data,set,corresponds,to,the,input,of,the,code,group,by,because,of,the,code,get,dataset;internal,public,data,set,t,get,input,data,set,return,this,input,data,set
Grouping -> public Partitioner<?> getCustomPartitioner();1416309577;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> public Partitioner<?> getCustomPartitioner();1446112342;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> public Partitioner<?> getCustomPartitioner();1453803455;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> public Partitioner<?> getCustomPartitioner();1454428544;Gets the custom partitioner to be used for this grouping, or {@code null}, if_none was defined.__@return The custom partitioner to be used for this grouping.;public Partitioner<?> getCustomPartitioner() {_		return this.customPartitioner__	};gets,the,custom,partitioner,to,be,used,for,this,grouping,or,code,null,if,none,was,defined,return,the,custom,partitioner,to,be,used,for,this,grouping;public,partitioner,get,custom,partitioner,return,this,custom,partitioner
Grouping -> public DataSet<T> getInputDataSet();1453803455;Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that_if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the_following snippet:_<pre><code>_DataSet<X> notGrouped = input.groupBy().getDataSet()__DataSet<Y> allReduced = notGrouped.reduce()_</pre></code>_the <code>groupBy()</code> is as if it never happened, as the <code>notGrouped</code> DataSet corresponds_to the input of the <code>groupBy()</code> (because of the <code>getDataset()</code>).;public DataSet<T> getInputDataSet() {_		return this.inputDataSet__	};returns,the,input,data,set,of,a,grouping,operation,that,is,the,one,before,the,grouping,this,means,that,if,it,is,applied,directly,to,the,result,of,a,grouping,operation,it,will,cancel,its,effect,as,an,example,in,the,following,snippet,pre,code,data,set,x,not,grouped,input,group,by,get,data,set,data,set,y,all,reduced,not,grouped,reduce,pre,code,the,code,group,by,code,is,as,if,it,never,happened,as,the,code,not,grouped,code,data,set,corresponds,to,the,input,of,the,code,group,by,code,because,of,the,code,get,dataset,code;public,data,set,t,get,input,data,set,return,this,input,data,set
Grouping -> public DataSet<T> getInputDataSet();1454428544;Returns the input DataSet of a grouping operation, that is the one before the grouping. This means that_if it is applied directly to the result of a grouping operation, it will cancel its effect. As an example, in the_following snippet:_<pre><code>_DataSet<X> notGrouped = input.groupBy().getDataSet()__DataSet<Y> allReduced = notGrouped.reduce()_</pre></code>_the <code>groupBy()</code> is as if it never happened, as the <code>notGrouped</code> DataSet corresponds_to the input of the <code>groupBy()</code> (because of the <code>getDataset()</code>).;public DataSet<T> getInputDataSet() {_		return this.inputDataSet__	};returns,the,input,data,set,of,a,grouping,operation,that,is,the,one,before,the,grouping,this,means,that,if,it,is,applied,directly,to,the,result,of,a,grouping,operation,it,will,cancel,its,effect,as,an,example,in,the,following,snippet,pre,code,data,set,x,not,grouped,input,group,by,get,data,set,data,set,y,all,reduced,not,grouped,reduce,pre,code,the,code,group,by,code,is,as,if,it,never,happened,as,the,code,not,grouped,code,data,set,corresponds,to,the,input,of,the,code,group,by,code,because,of,the,code,get,dataset,code;public,data,set,t,get,input,data,set,return,this,input,data,set
