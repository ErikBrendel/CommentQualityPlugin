# id;timestamp;commentText;codeText;commentWords;codeWords
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> projectTuple7() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,project,tuple7,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1418225396;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1418760487;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1420730997;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1420738577;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1422405541;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1423570503;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1427097830;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1433741389;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1446112342;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1454679829;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1455101486;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1462899491;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1474380620;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1491417674;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1500970016;Continues a ProjectCross transformation and adds fields of the second cross input to the projection.__<p>If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.__<p>Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			crossProjection = crossProjection.projectSecond(secondFieldIndexes)___			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,to,the,projection,p,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,cross,projection,cross,projection,project,second,second,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> projectTuple20() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,tuple20,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> projectTuple1() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,project,tuple1,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1418225396;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1418760487;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1420730997;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1420738577;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1422405541;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1423570503;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1427097830;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1433741389;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1446112342;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1454679829;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1455101486;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1462899491;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1474380620;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1491417674;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)__			_			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> ProjectCross -> @SuppressWarnings("hiding") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1500970016;Continues a ProjectCross transformation and adds fields of the first cross input to the projection.__<p>If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.__<p>Additional fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<p><b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;@SuppressWarnings("hiding")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			crossProjection = crossProjection.projectFirst(firstFieldIndexes)___			return crossProjection.projectTupleX()__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,to,the,projection,p,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,additional,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,p,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;suppress,warnings,hiding,public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,cross,projection,cross,projection,project,first,first,field,indexes,return,cross,projection,project,tuple,x
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> projectTuple13() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,tuple13,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1418225396;Deprecated method only kept for compatibility.__@param types__@return;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility,param,types,return;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1418760487;Deprecated method only kept for compatibility.__@param types__@return;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility,param,types,return;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1420730997;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1420738577;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1422405541;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1423570503;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1427097830;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1433741389;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1446112342;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> projectTuple25() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,tuple25,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> projectTuple6() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,project,tuple6,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> projectTuple21() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> tType = new TupleTypeInfo<Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(fTypes)___			return new ProjectCross<I1, I2, Tuple21<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,project,tuple21,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t,type,new,tuple,type,info,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,f,types,return,new,project,cross,i1,i2,tuple21,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> tType = new TupleTypeInfo<Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(fTypes)___			return new ProjectCross<I1, I2, Tuple13<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t,type,new,tuple,type,info,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,f,types,return,new,project,cross,i1,i2,tuple13,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1418225395;Chooses a projectTupleX according to the length of {@link CrossProjection#fieldIndexes}__@return The projected DataSet.__@see Projection;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,cross,projection,field,indexes,return,the,projected,data,set,see,projection;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1418225396;Chooses a projectTupleX according to the length of {@link CrossProjection#fieldIndexes}__@return The projected DataSet.__@see ProjectCross;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,cross,projection,field,indexes,return,the,projected,data,set,see,project,cross;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1418760487;Chooses a projectTupleX according to the length of {@link CrossProjection#fieldIndexes}__@return The projected DataSet.__@see ProjectCross;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,cross,projection,field,indexes,return,the,projected,data,set,see,project,cross;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1420730997;Chooses a projectTupleX according to the length of {@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1420738577;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1422405541;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1423570503;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1427097830;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1433741389;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1446112342;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1454679829;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1455101486;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1462899491;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1474380620;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1491417674;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> CrossProjection -> @SuppressWarnings("unchecked") 		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX();1500970016;Chooses a projectTupleX according to the length of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#fieldIndexes}.__@return The projected DataSet.;@SuppressWarnings("unchecked")_		public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectTupleX() {_			ProjectCross<I1, I2, OUT> projectionCross = null___			switch (fieldIndexes.length) {_			case 1: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple1()_ break__			case 2: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple2()_ break__			case 3: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple3()_ break__			case 4: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple4()_ break__			case 5: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple5()_ break__			case 6: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple6()_ break__			case 7: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple7()_ break__			case 8: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple8()_ break__			case 9: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple9()_ break__			case 10: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple10()_ break__			case 11: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple11()_ break__			case 12: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple12()_ break__			case 13: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple13()_ break__			case 14: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple14()_ break__			case 15: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple15()_ break__			case 16: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple16()_ break__			case 17: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple17()_ break__			case 18: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple18()_ break__			case 19: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple19()_ break__			case 20: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple20()_ break__			case 21: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple21()_ break__			case 22: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple22()_ break__			case 23: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple23()_ break__			case 24: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple24()_ break__			case 25: projectionCross = (ProjectCross<I1, I2, OUT>) projectTuple25()_ break__			default: throw new IllegalStateException("Excessive arity in tuple.")__			}__			return projectionCross__		};chooses,a,project,tuple,x,according,to,the,length,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,field,indexes,return,the,projected,data,set;suppress,warnings,unchecked,public,out,extends,tuple,project,cross,i1,i2,out,project,tuple,x,project,cross,i1,i2,out,projection,cross,null,switch,field,indexes,length,case,1,projection,cross,project,cross,i1,i2,out,project,tuple1,break,case,2,projection,cross,project,cross,i1,i2,out,project,tuple2,break,case,3,projection,cross,project,cross,i1,i2,out,project,tuple3,break,case,4,projection,cross,project,cross,i1,i2,out,project,tuple4,break,case,5,projection,cross,project,cross,i1,i2,out,project,tuple5,break,case,6,projection,cross,project,cross,i1,i2,out,project,tuple6,break,case,7,projection,cross,project,cross,i1,i2,out,project,tuple7,break,case,8,projection,cross,project,cross,i1,i2,out,project,tuple8,break,case,9,projection,cross,project,cross,i1,i2,out,project,tuple9,break,case,10,projection,cross,project,cross,i1,i2,out,project,tuple10,break,case,11,projection,cross,project,cross,i1,i2,out,project,tuple11,break,case,12,projection,cross,project,cross,i1,i2,out,project,tuple12,break,case,13,projection,cross,project,cross,i1,i2,out,project,tuple13,break,case,14,projection,cross,project,cross,i1,i2,out,project,tuple14,break,case,15,projection,cross,project,cross,i1,i2,out,project,tuple15,break,case,16,projection,cross,project,cross,i1,i2,out,project,tuple16,break,case,17,projection,cross,project,cross,i1,i2,out,project,tuple17,break,case,18,projection,cross,project,cross,i1,i2,out,project,tuple18,break,case,19,projection,cross,project,cross,i1,i2,out,project,tuple19,break,case,20,projection,cross,project,cross,i1,i2,out,project,tuple20,break,case,21,projection,cross,project,cross,i1,i2,out,project,tuple21,break,case,22,projection,cross,project,cross,i1,i2,out,project,tuple22,break,case,23,projection,cross,project,cross,i1,i2,out,project,tuple23,break,case,24,projection,cross,project,cross,i1,i2,out,project,tuple24,break,case,25,projection,cross,project,cross,i1,i2,out,project,tuple25,break,default,throw,new,illegal,state,exception,excessive,arity,in,tuple,return,projection,cross
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1405024514;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1405090423;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1406821655;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1406830680;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1411372797;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1411399886;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1411473593;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1411718446;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1412164980;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1412166614;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1415874087;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1418225395;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1418225396;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1418760487;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1420730997;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1420738577;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1422405541;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1423570503;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1427097830;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1433741389;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1446112342;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1454679829;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1455101486;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1462899491;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1474380620;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1491417674;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if(fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> ProjectCrossFunction -> private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance);1500970016;Instantiates and configures a ProjectCrossFunction._Creates output tuples by copying fields of crossed input tuples (or a full input object) into an output tuple.__@param fields List of indexes fields that should be copied to the output tuple._If the full input object should be copied (for example in case of a non-tuple input) the index should be -1._@param isFromFirst List of flags indicating whether the field should be copied from the first (true) or the second (false) input._@param outTupleInstance An instance of an output tuple.;private ProjectCrossFunction(int[] fields, boolean[] isFromFirst, R outTupleInstance) {__			if (fields.length != isFromFirst.length) {_				throw new IllegalArgumentException("Fields and isFromFirst arrays must have same length!")__			}_			this.fields = fields__			this.isFromFirst = isFromFirst__			this.outTuple = outTupleInstance__		};instantiates,and,configures,a,project,cross,function,creates,output,tuples,by,copying,fields,of,crossed,input,tuples,or,a,full,input,object,into,an,output,tuple,param,fields,list,of,indexes,fields,that,should,be,copied,to,the,output,tuple,if,the,full,input,object,should,be,copied,for,example,in,case,of,a,non,tuple,input,the,index,should,be,1,param,is,from,first,list,of,flags,indicating,whether,the,field,should,be,copied,from,the,first,true,or,the,second,false,input,param,out,tuple,instance,an,instance,of,an,output,tuple;private,project,cross,function,int,fields,boolean,is,from,first,r,out,tuple,instance,if,fields,length,is,from,first,length,throw,new,illegal,argument,exception,fields,and,is,from,first,arrays,must,have,same,length,this,fields,fields,this,is,from,first,is,from,first,this,out,tuple,out,tuple,instance
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> projectTuple12() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,tuple12,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> projectTuple5() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,project,tuple5,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> projectTuple8() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,project,tuple8,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1405024514;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1405090423;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1406821655;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1406830680;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411372797;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411399886;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411473593;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411718446;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1412164980;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1412166614;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1415874087;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, null, secondFieldIndexes)__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,input1,input2,null,second,field,indexes
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0> ProjectCross<I1, I2, Tuple1<T0>> types(Class<T0> type0) {_			Class<?>[] types = {type0}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple1<T0>> tType = new TupleTypeInfo<Tuple1<T0>>(fTypes)___			return new ProjectCross<I1, I2, Tuple1<T0>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,project,cross,i1,i2,tuple1,t0,types,class,t0,type0,class,types,type0,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple1,t0,t,type,new,tuple,type,info,tuple1,t0,f,types,return,new,project,cross,i1,i2,tuple1,t0,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2) {_			Class<?>[] types = {type0, type1, type2}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,types,class,t0,type0,class,t1,type1,class,t2,type2,class,types,type0,type1,type2,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> projectTuple10() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>> tType = new TupleTypeInfo<Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(fTypes)___			return new ProjectCross<I1, I2, Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,project,tuple10,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t,type,new,tuple,type,info,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,f,types,return,new,project,cross,i1,i2,tuple10,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> projectTuple23() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,tuple23,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2> ProjectCross<I1, I2, Tuple3<T0, T1, T2>> projectTuple3() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple3<T0, T1, T2>> tType = new TupleTypeInfo<Tuple3<T0, T1, T2>>(fTypes)___			return new ProjectCross<I1, I2, Tuple3<T0, T1, T2>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,project,cross,i1,i2,tuple3,t0,t1,t2,project,tuple3,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple3,t0,t1,t2,t,type,new,tuple,type,info,tuple3,t0,t1,t2,f,types,return,new,project,cross,i1,i2,tuple3,t0,t1,t2,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> projectTuple15() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,tuple15,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5> ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>> tType = new TupleTypeInfo<Tuple6<T0, T1, T2, T3, T4, T5>>(fTypes)___			return new ProjectCross<I1, I2, Tuple6<T0, T1, T2, T3, T4, T5>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,types,type0,type1,type2,type3,type4,type5,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,t,type,new,tuple,type,info,tuple6,t0,t1,t2,t3,t4,t5,f,types,return,new,project,cross,i1,i2,tuple6,t0,t1,t2,t3,t4,t5,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> projectTuple9() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,tuple9,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3) {_			Class<?>[] types = {type0, type1, type2, type3}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,types,type0,type1,type2,type3,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@param type23 The class of field '23' of the result tuples._@param type24 The class of field '24' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22, Class<T23> type23, Class<T24> type24) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22, type23, type24}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>> tType = new TupleTypeInfo<Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(fTypes)___			return new ProjectCross<I1, I2, Tuple25<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,param,type23,the,class,of,field,23,of,the,result,tuples,param,type24,the,class,of,field,24,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,t23,type23,class,t24,type24,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,type23,type24,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t,type,new,tuple,type,info,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,f,types,return,new,project,cross,i1,i2,tuple25,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> projectTuple18() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,tuple18,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4> ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4) {_			Class<?>[] types = {type0, type1, type2, type3, type4}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>> tType = new TupleTypeInfo<Tuple5<T0, T1, T2, T3, T4>>(fTypes)___			return new ProjectCross<I1, I2, Tuple5<T0, T1, T2, T3, T4>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,types,type0,type1,type2,type3,type4,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple5,t0,t1,t2,t3,t4,t,type,new,tuple,type,info,tuple5,t0,t1,t2,t3,t4,f,types,return,new,project,cross,i1,i2,tuple5,t0,t1,t2,t3,t4,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7> ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>> tType = new TupleTypeInfo<Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(fTypes)___			return new ProjectCross<I1, I2, Tuple8<T0, T1, T2, T3, T4, T5, T6, T7>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,types,type0,type1,type2,type3,type4,type5,type6,type7,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,t,type,new,tuple,type,info,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,f,types,return,new,project,cross,i1,i2,tuple8,t0,t1,t2,t3,t4,t5,t6,t7,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1405024514;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1405090423;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1406821655;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			if (FunctionUtils.isSerializedLambdaFunction(function)) {_				throw new UnsupportedLambdaExpressionException()__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,if,function,utils,is,serialized,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1406830680;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			if (FunctionUtils.isLambdaFunction(function)) {_				throw new UnsupportedLambdaExpressionException()__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1411372797;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			if (FunctionUtils.isLambdaFunction(function)) {_				throw new UnsupportedLambdaExpressionException()__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1411399886;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			if (FunctionUtils.isLambdaFunction(function)) {_				throw new UnsupportedLambdaExpressionException()__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1411473593;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			if (FunctionUtils.isLambdaFunction(function)) {_				throw new UnsupportedLambdaExpressionException()__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,if,function,utils,is,lambda,function,function,throw,new,unsupported,lambda,expression,exception,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1411718446;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1412164980;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1412166614;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType)__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1415874087;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType, Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1418225395;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType, Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1418225396;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, function, returnType, Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,function,return,type,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1418760487;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType())__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1420730997;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1420738577;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1422405541;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1423570503;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1427097830;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1433741389;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br/>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1446112342;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1454679829;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1455101486;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1462899491;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, input1.getType(), input2.getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(input1, input2, clean(function), returnType, _					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,input1,get,type,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,input1,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1474380620;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, getInput1().getType(), getInput2().getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(getInput1(), getInput2(), clean(function), returnType,_					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,get,input1,get,type,get,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,get,input1,get,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1491417674;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.<br>_Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, getInput1().getType(), getInput2().getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(getInput1(), getInput2(), clean(function), returnType,_					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,br,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,get,input1,get,type,get,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,get,input1,get,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> DefaultCross -> public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function);1500970016;Finalizes a Cross transformation by applying a {@link CrossFunction} to each pair of crossed elements.__<p>Each CrossFunction call returns exactly one element.__@param function The CrossFunction that is called for each pair of crossed elements._@return An CrossOperator that represents the crossed result DataSet__@see CrossFunction_@see DataSet;public <R> CrossOperator<I1, I2, R> with(CrossFunction<I1, I2, R> function) {_			if (function == null) {_				throw new NullPointerException("Cross function must not be null.")__			}_			TypeInformation<R> returnType = TypeExtractor.getCrossReturnTypes(function, getInput1().getType(), getInput2().getType(),_					super.getDefaultName(), true)__			return new CrossOperator<I1, I2, R>(getInput1(), getInput2(), clean(function), returnType,_					getCrossHint(), Utils.getCallLocationName())__		};finalizes,a,cross,transformation,by,applying,a,link,cross,function,to,each,pair,of,crossed,elements,p,each,cross,function,call,returns,exactly,one,element,param,function,the,cross,function,that,is,called,for,each,pair,of,crossed,elements,return,an,cross,operator,that,represents,the,crossed,result,data,set,see,cross,function,see,data,set;public,r,cross,operator,i1,i2,r,with,cross,function,i1,i2,r,function,if,function,null,throw,new,null,pointer,exception,cross,function,must,not,be,null,type,information,r,return,type,type,extractor,get,cross,return,types,function,get,input1,get,type,get,input2,get,type,super,get,default,name,true,return,new,cross,operator,i1,i2,r,get,input1,get,input2,clean,function,return,type,get,cross,hint,utils,get,call,location,name
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1405024514;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1405090423;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1406821655;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1406830680;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411372797;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411399886;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411473593;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1411718446;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1412164980;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1412166614;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1415874087;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					if(secondFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,if,second,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1418225395;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1418225396;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1418760487;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1420730997;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1420738577;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1422405541;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1423570503;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1427097830;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1433741389;Continues a ProjectCross transformation and adds fields of the second cross input.<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1446112342;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1454679829;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1455101486;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1462899491;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1474380620;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1491417674;Continues a ProjectCross transformation and adds fields of the second cross input.<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if(ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if(!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if(secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for(int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes);1500970016;Continues a ProjectCross transformation and adds fields of the second cross input.__<p>If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.__<p>Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectSecond(int... secondFieldIndexes) {__			boolean isSecondTuple___			if (ds2.getType() instanceof TupleTypeInfo && secondFieldIndexes.length > 0) {_				isSecondTuple = true__			} else {_				isSecondTuple = false__			}__			if (!isSecondTuple && secondFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectSecond() without arguments to include it.")__			} else if (secondFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if (isSecondTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + secondFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + secondFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs2__				for (int i = 0_ i < secondFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(secondFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = false__					this.fieldIndexes[offset + i] = secondFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = false__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,second,cross,input,p,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,second,int,second,field,indexes,boolean,is,second,tuple,if,ds2,get,type,instanceof,tuple,type,info,second,field,indexes,length,0,is,second,tuple,true,else,is,second,tuple,false,if,is,second,tuple,second,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,second,without,arguments,to,include,it,else,if,second,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,second,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,second,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,second,field,indexes,length,int,max,field,index,num,fields,ds2,for,int,i,0,i,second,field,indexes,length,i,preconditions,check,element,index,second,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,false,this,field,indexes,offset,i,second,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,false,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1405024514;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1405090423;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1406821655;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1406830680;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411372797;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411399886;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411473593;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411718446;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1412164980;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_ProjectCross transformation by calling {@link CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,project,cross,transformation,by,calling,link,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1412166614;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1415874087;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					if(firstFieldIndexes[i] > maxFieldIndex - 1) {_						throw new IndexOutOfBoundsException("Provided field index is out of bounds of input tuple.")__					}_					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,if,first,field,indexes,i,max,field,index,1,throw,new,index,out,of,bounds,exception,provided,field,index,is,out,of,bounds,of,input,tuple,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1418225395;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a {@link ProjectOperator} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,project,operator,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3> ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>> projectTuple4() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple4<T0, T1, T2, T3>> tType = new TupleTypeInfo<Tuple4<T0, T1, T2, T3>>(fTypes)___			return new ProjectCross<I1, I2, Tuple4<T0, T1, T2, T3>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,project,cross,i1,i2,tuple4,t0,t1,t2,t3,project,tuple4,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple4,t0,t1,t2,t3,t,type,new,tuple,type,info,tuple4,t0,t1,t2,t3,f,types,return,new,project,cross,i1,i2,tuple4,t0,t1,t2,t3,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> projectTuple16() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> tType = new TupleTypeInfo<Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(fTypes)___			return new ProjectCross<I1, I2, Tuple16<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,project,tuple16,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t,type,new,tuple,type,info,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,f,types,return,new,project,cross,i1,i2,tuple16,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@param type20 The class of field '20' of the result tuples._@param type21 The class of field '21' of the result tuples._@param type22 The class of field '22' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19, Class<T20> type20, Class<T21> type21, Class<T22> type22) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19, type20, type21, type22}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> tType = new TupleTypeInfo<Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(fTypes)___			return new ProjectCross<I1, I2, Tuple23<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,param,type20,the,class,of,field,20,of,the,result,tuples,param,type21,the,class,of,field,21,of,the,result,tuples,param,type22,the,class,of,field,22,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,t20,type20,class,t21,type21,class,t22,type22,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,type20,type21,type22,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t,type,new,tuple,type,info,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,f,types,return,new,project,cross,i1,i2,tuple23,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> tType = new TupleTypeInfo<Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(fTypes)___			return new ProjectCross<I1, I2, Tuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t,type,new,tuple,type,info,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,f,types,return,new,project,cross,i1,i2,tuple12,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> projectTuple22() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> tType = new TupleTypeInfo<Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(fTypes)___			return new ProjectCross<I1, I2, Tuple22<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,project,tuple22,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t,type,new,tuple,type,info,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,f,types,return,new,project,cross,i1,i2,tuple22,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6> ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>> tType = new TupleTypeInfo<Tuple7<T0, T1, T2, T3, T4, T5, T6>>(fTypes)___			return new ProjectCross<I1, I2, Tuple7<T0, T1, T2, T3, T4, T5, T6>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,types,type0,type1,type2,type3,type4,type5,type6,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,t,type,new,tuple,type,info,tuple7,t0,t1,t2,t3,t4,t5,t6,f,types,return,new,project,cross,i1,i2,tuple7,t0,t1,t2,t3,t4,t5,t6,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> projectTuple17() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> tType = new TupleTypeInfo<Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(fTypes)___			return new ProjectCross<I1, I2, Tuple17<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,project,tuple17,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t,type,new,tuple,type,info,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,f,types,return,new,project,cross,i1,i2,tuple17,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> tType = new TupleTypeInfo<Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(fTypes)___			return new ProjectCross<I1, I2, Tuple18<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t,type,new,tuple,type,info,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,f,types,return,new,project,cross,i1,i2,tuple18,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8> ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>> tType = new TupleTypeInfo<Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(fTypes)___			return new ProjectCross<I1, I2, Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,t,type,new,tuple,type,info,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,f,types,return,new,project,cross,i1,i2,tuple9,t0,t1,t2,t3,t4,t5,t6,t7,t8,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1418225396;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1418760487;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1420730997;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1420738577;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1422405541;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1423570503;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1427097830;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1433741389;Continues a ProjectCross transformation and adds fields of the first cross input.<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1446112342;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1454679829;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1455101486;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1462899491;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1474380620;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1491417674;Continues a ProjectCross transformation and adds fields of the first cross input.<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if(ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if(!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if(firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if(isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for(int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1500970016;Continues a ProjectCross transformation and adds fields of the first cross input.__<p>If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.__<p>Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return An extended CrossProjection.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;protected CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {__			boolean isFirstTuple___			if (ds1.getType() instanceof TupleTypeInfo && firstFieldIndexes.length > 0) {_				isFirstTuple = true__			} else {_				isFirstTuple = false__			}__			if (!isFirstTuple && firstFieldIndexes.length != 0) {_				_				throw new IllegalArgumentException("Input is not a Tuple. Call projectFirst() without arguments to include it.")__			} else if (firstFieldIndexes.length > (22 - this.fieldIndexes.length)) {_				_				throw new IllegalArgumentException("You may select only up to twenty-two (22) fields in total.")__			}__			int offset = this.fieldIndexes.length___			if (isFirstTuple) {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + firstFieldIndexes.length)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + firstFieldIndexes.length)___				_				int maxFieldIndex = numFieldsDs1__				for (int i = 0_ i < firstFieldIndexes.length_ i++) {_					_					Preconditions.checkElementIndex(firstFieldIndexes[i], maxFieldIndex)___					this.isFieldInFirst[offset + i] = true__					this.fieldIndexes[offset + i] = firstFieldIndexes[i]__				}_			} else {_				_				this.fieldIndexes = Arrays.copyOf(this.fieldIndexes, this.fieldIndexes.length + 1)__				this.isFieldInFirst = Arrays.copyOf(this.isFieldInFirst, this.isFieldInFirst.length + 1)___				_				this.isFieldInFirst[offset] = true__				this.fieldIndexes[offset] = -1__			}__			return this__		};continues,a,project,cross,transformation,and,adds,fields,of,the,first,cross,input,p,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,an,extended,cross,projection,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;protected,cross,projection,i1,i2,project,first,int,first,field,indexes,boolean,is,first,tuple,if,ds1,get,type,instanceof,tuple,type,info,first,field,indexes,length,0,is,first,tuple,true,else,is,first,tuple,false,if,is,first,tuple,first,field,indexes,length,0,throw,new,illegal,argument,exception,input,is,not,a,tuple,call,project,first,without,arguments,to,include,it,else,if,first,field,indexes,length,22,this,field,indexes,length,throw,new,illegal,argument,exception,you,may,select,only,up,to,twenty,two,22,fields,in,total,int,offset,this,field,indexes,length,if,is,first,tuple,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,first,field,indexes,length,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,first,field,indexes,length,int,max,field,index,num,fields,ds1,for,int,i,0,i,first,field,indexes,length,i,preconditions,check,element,index,first,field,indexes,i,max,field,index,this,is,field,in,first,offset,i,true,this,field,indexes,offset,i,first,field,indexes,i,else,this,field,indexes,arrays,copy,of,this,field,indexes,this,field,indexes,length,1,this,is,field,in,first,arrays,copy,of,this,is,field,in,first,this,is,field,in,first,length,1,this,is,field,in,first,offset,true,this,field,indexes,offset,1,return,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@param type15 The class of field '15' of the result tuples._@param type16 The class of field '16' of the result tuples._@param type17 The class of field '17' of the result tuples._@param type18 The class of field '18' of the result tuples._@param type19 The class of field '19' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14, Class<T15> type15, Class<T16> type16, Class<T17> type17, Class<T18> type18, Class<T19> type19) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14, type15, type16, type17, type18, type19}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> tType = new TupleTypeInfo<Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(fTypes)___			return new ProjectCross<I1, I2, Tuple20<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,param,type15,the,class,of,field,15,of,the,result,tuples,param,type16,the,class,of,field,16,of,the,result,tuples,param,type17,the,class,of,field,17,of,the,result,tuples,param,type18,the,class,of,field,18,of,the,result,tuples,param,type19,the,class,of,field,19,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,t15,type15,class,t16,type16,class,t17,type17,class,t18,type18,class,t19,type19,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,type15,type16,type17,type18,type19,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t,type,new,tuple,type,info,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,f,types,return,new,project,cross,i1,i2,tuple20,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@param type2 The class of field '2' of the result tuples._@param type3 The class of field '3' of the result tuples._@param type4 The class of field '4' of the result tuples._@param type5 The class of field '5' of the result tuples._@param type6 The class of field '6' of the result tuples._@param type7 The class of field '7' of the result tuples._@param type8 The class of field '8' of the result tuples._@param type9 The class of field '9' of the result tuples._@param type10 The class of field '10' of the result tuples._@param type11 The class of field '11' of the result tuples._@param type12 The class of field '12' of the result tuples._@param type13 The class of field '13' of the result tuples._@param type14 The class of field '14' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> types(Class<T0> type0, Class<T1> type1, Class<T2> type2, Class<T3> type3, Class<T4> type4, Class<T5> type5, Class<T6> type6, Class<T7> type7, Class<T8> type8, Class<T9> type9, Class<T10> type10, Class<T11> type11, Class<T12> type12, Class<T13> type13, Class<T14> type14) {_			Class<?>[] types = {type0, type1, type2, type3, type4, type5, type6, type7, type8, type9, type10, type11, type12, type13, type14}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> tType = new TupleTypeInfo<Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(fTypes)___			return new ProjectCross<I1, I2, Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,param,type2,the,class,of,field,2,of,the,result,tuples,param,type3,the,class,of,field,3,of,the,result,tuples,param,type4,the,class,of,field,4,of,the,result,tuples,param,type5,the,class,of,field,5,of,the,result,tuples,param,type6,the,class,of,field,6,of,the,result,tuples,param,type7,the,class,of,field,7,of,the,result,tuples,param,type8,the,class,of,field,8,of,the,result,tuples,param,type9,the,class,of,field,9,of,the,result,tuples,param,type10,the,class,of,field,10,of,the,result,tuples,param,type11,the,class,of,field,11,of,the,result,tuples,param,type12,the,class,of,field,12,of,the,result,tuples,param,type13,the,class,of,field,13,of,the,result,tuples,param,type14,the,class,of,field,14,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,types,class,t0,type0,class,t1,type1,class,t2,type2,class,t3,type3,class,t4,type4,class,t5,type5,class,t6,type6,class,t7,type7,class,t8,type8,class,t9,type9,class,t10,type10,class,t11,type11,class,t12,type12,class,t13,type13,class,t14,type14,class,types,type0,type1,type2,type3,type4,type5,type6,type7,type8,type9,type10,type11,type12,type13,type14,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t,type,new,tuple,type,info,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,f,types,return,new,project,cross,i1,i2,tuple15,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405024514;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1405090423;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1406821655;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1406830680;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411372797;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411399886;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411473593;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1411718446;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1412164980;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1412166614;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1);1415874087;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields._Requires the classes of the fields of the resulting tuples.__@param type0 The class of field '0' of the result tuples._@param type1 The class of field '1' of the result tuples._@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> types(Class<T0> type0, Class<T1> type1) {_			Class<?>[] types = {type0, type1}__			if(types.length != this.fieldIndexes.length) {_				throw new IllegalArgumentException("Numbers of projected fields and types do not match.")__			}_			_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes, types)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,requires,the,classes,of,the,fields,of,the,resulting,tuples,param,type0,the,class,of,field,0,of,the,result,tuples,param,type1,the,class,of,field,1,of,the,result,tuples,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,types,class,t0,type0,class,t1,type1,class,types,type0,type1,if,types,length,this,field,indexes,length,throw,new,illegal,argument,exception,numbers,of,projected,fields,and,types,do,not,match,type,information,f,types,extract,field,types,field,indexes,types,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1418225395;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection complete the Cross transformation by calling.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,complete,the,cross,transformation,by,calling,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1418225396;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1418760487;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1420730997;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1420738577;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1422405541;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1423570503;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1427097830;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1433741389;Initiates a ProjectCross transformation and projects the second cross input<br/>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1446112342;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1454679829;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1455101486;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1462899491;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1474380620;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1491417674;Initiates a ProjectCross transformation and projects the second cross input<br>_If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,br,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes);1500970016;Initiates a ProjectCross transformation and projects the second cross input.__<p>If the second cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the second cross input is not a Tuple DataSet, no parameters should be passed.__<p>Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param secondFieldIndexes If the second input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectSecond(int... secondFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), null, secondFieldIndexes, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,second,cross,input,p,if,the,second,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,second,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,second,field,indexes,if,the,second,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,second,int,second,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,null,second,field,indexes,get,cross,hint,project,tuple,x
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1> ProjectCross<I1, I2, Tuple2<T0, T1>> projectTuple2() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple2<T0, T1>> tType = new TupleTypeInfo<Tuple2<T0, T1>>(fTypes)___			return new ProjectCross<I1, I2, Tuple2<T0, T1>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,project,cross,i1,i2,tuple2,t0,t1,project,tuple2,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple2,t0,t1,t,type,new,tuple,type,info,tuple2,t0,t1,f,types,return,new,project,cross,i1,i2,tuple2,t0,t1,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> projectTuple14() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> tType = new TupleTypeInfo<Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(fTypes)___			return new ProjectCross<I1, I2, Tuple14<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,project,tuple14,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t,type,new,tuple,type,info,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,f,types,return,new,project,cross,i1,i2,tuple14,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> projectTuple24() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>> tType = new TupleTypeInfo<Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(fTypes)___			return new ProjectCross<I1, I2, Tuple24<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,project,tuple24,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t,type,new,tuple,type,info,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,f,types,return,new,project,cross,i1,i2,tuple24,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> projectTuple11() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> tType = new TupleTypeInfo<Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(fTypes)___			return new ProjectCross<I1, I2, Tuple11<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,project,tuple11,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t,type,new,tuple,type,info,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,f,types,return,new,project,cross,i1,i2,tuple11,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1405024514;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1405090423;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1406821655;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1406830680;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411372797;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411399886;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411473593;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1411718446;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types()}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1412164980;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling {@link CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1412166614;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> DefaultCross -> public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes);1415874087;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection that needs to be converted into a_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross} to complete the_Cross transformation by calling_{@link org.apache.flink.api.java.operators.CrossOperator.CrossProjection#types(Class)}.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public CrossProjection<I1, I2> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(input1, input2, firstFieldIndexes, null)__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,that,needs,to,be,converted,into,a,link,org,apache,flink,api,java,operators,cross,operator,project,cross,to,complete,the,cross,transformation,by,calling,link,org,apache,flink,api,java,operators,cross,operator,cross,projection,types,class,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,cross,projection,i1,i2,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,input1,input2,first,field,indexes,null
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1418225395;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1418225396;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1418760487;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1420730997;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1420738577;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1422405541;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1423570503;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1427097830;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1433741389;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1446112342;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1454679829;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1455101486;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1462899491;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1474380620;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1491417674;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> CrossProjection -> public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19();1500970016;Projects a pair of crossed elements to a {@link Tuple} with the previously selected fields.__@return The projected data set.__@see Tuple_@see DataSet;public <T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> projectTuple19() {_			TypeInformation<?>[] fTypes = extractFieldTypes(fieldIndexes)__			TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> tType = new TupleTypeInfo<Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(fTypes)___			return new ProjectCross<I1, I2, Tuple19<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>(this.ds1, this.ds2, this.fieldIndexes, this.isFieldInFirst, tType, this, hint)__		};projects,a,pair,of,crossed,elements,to,a,link,tuple,with,the,previously,selected,fields,return,the,projected,data,set,see,tuple,see,data,set;public,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,project,tuple19,type,information,f,types,extract,field,types,field,indexes,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t,type,new,tuple,type,info,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,f,types,return,new,project,cross,i1,i2,tuple19,t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,this,ds1,this,ds2,this,field,indexes,this,is,field,in,first,t,type,this,hint
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		@PublicEvolving 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1455101486;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		@PublicEvolving_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,evolving,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		@PublicEvolving 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1462899491;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		@PublicEvolving_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,evolving,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		@PublicEvolving 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1474380620;Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		@PublicEvolving_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,evolving,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		@PublicEvolving 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1491417674;@deprecated Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		@PublicEvolving_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>)this.getResultType()___			if(types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i=0_ i<types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type "+typeClass.getSimpleName()+" at position "+i+" does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,evolving,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> ProjectCross -> @SuppressWarnings({ "hiding", "unchecked" }) 		@Deprecated 		@PublicEvolving 		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types);1500970016;@deprecated Deprecated method only kept for compatibility.;@SuppressWarnings({ "hiding", "unchecked" })_		@Deprecated_		@PublicEvolving_		public <OUT extends Tuple> CrossOperator<I1, I2, OUT> types(Class<?>... types) {_			TupleTypeInfo<OUT> typeInfo = (TupleTypeInfo<OUT>) this.getResultType()___			if (types.length != typeInfo.getArity()) {_				throw new InvalidProgramException("Provided types do not match projection.")__			}_			for (int i = 0_ i < types.length_ i++) {_				Class<?> typeClass = types[i]__				if (!typeClass.equals(typeInfo.getTypeAt(i).getTypeClass())) {_					throw new InvalidProgramException("Provided type " + typeClass.getSimpleName() + " at position " + i + " does not match projection")__				}_			}_			return (CrossOperator<I1, I2, OUT>) this__		};deprecated,deprecated,method,only,kept,for,compatibility;suppress,warnings,hiding,unchecked,deprecated,public,evolving,public,out,extends,tuple,cross,operator,i1,i2,out,types,class,types,tuple,type,info,out,type,info,tuple,type,info,out,this,get,result,type,if,types,length,type,info,get,arity,throw,new,invalid,program,exception,provided,types,do,not,match,projection,for,int,i,0,i,types,length,i,class,type,class,types,i,if,type,class,equals,type,info,get,type,at,i,get,type,class,throw,new,invalid,program,exception,provided,type,type,class,get,simple,name,at,position,i,does,not,match,projection,return,cross,operator,i1,i2,out,this
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1418225395;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A CrossProjection to complete the Cross transformation.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.CrossProjection_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,cross,projection,to,complete,the,cross,transformation,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,cross,projection,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1418225396;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1418760487;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1420730997;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null).projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1420738577;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1422405541;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1423570503;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1427097830;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1433741389;Initiates a ProjectCross transformation and projects the first cross input<br/>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br/>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1446112342;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1454679829;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1455101486;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1462899491;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1474380620;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1491417674;Initiates a ProjectCross transformation and projects the first cross input<br>_If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.<br>__Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,br,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,br,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
CrossOperator -> DefaultCross -> public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes);1500970016;Initiates a ProjectCross transformation and projects the first cross input.__<p>If the first cross input is a {@link Tuple} {@link DataSet}, fields can be selected by their index._If the first cross input is not a Tuple DataSet, no parameters should be passed.__<p>Fields of the first and second input can be added by chaining the method calls of_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectFirst(int...)} and_{@link org.apache.flink.api.java.operators.CrossOperator.ProjectCross#projectSecond(int...)}.__<b>Note: With the current implementation, the Project transformation looses type information.</b>__@param firstFieldIndexes If the first input is a Tuple DataSet, the indexes of the selected fields._For a non-Tuple DataSet, do not provide parameters._The order of fields in the output tuple is defined by to the order of field indexes._@return A ProjectCross which represents the projected cross result.__@see Tuple_@see DataSet_@see org.apache.flink.api.java.operators.CrossOperator.ProjectCross;public <OUT extends Tuple> ProjectCross<I1, I2, OUT> projectFirst(int... firstFieldIndexes) {_			return new CrossProjection<I1, I2>(getInput1(), getInput2(), firstFieldIndexes, null, getCrossHint())_						.projectTupleX()__		};initiates,a,project,cross,transformation,and,projects,the,first,cross,input,p,if,the,first,cross,input,is,a,link,tuple,link,data,set,fields,can,be,selected,by,their,index,if,the,first,cross,input,is,not,a,tuple,data,set,no,parameters,should,be,passed,p,fields,of,the,first,and,second,input,can,be,added,by,chaining,the,method,calls,of,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,first,int,and,link,org,apache,flink,api,java,operators,cross,operator,project,cross,project,second,int,b,note,with,the,current,implementation,the,project,transformation,looses,type,information,b,param,first,field,indexes,if,the,first,input,is,a,tuple,data,set,the,indexes,of,the,selected,fields,for,a,non,tuple,data,set,do,not,provide,parameters,the,order,of,fields,in,the,output,tuple,is,defined,by,to,the,order,of,field,indexes,return,a,project,cross,which,represents,the,projected,cross,result,see,tuple,see,data,set,see,org,apache,flink,api,java,operators,cross,operator,project,cross;public,out,extends,tuple,project,cross,i1,i2,out,project,first,int,first,field,indexes,return,new,cross,projection,i1,i2,get,input1,get,input2,first,field,indexes,null,get,cross,hint,project,tuple,x
