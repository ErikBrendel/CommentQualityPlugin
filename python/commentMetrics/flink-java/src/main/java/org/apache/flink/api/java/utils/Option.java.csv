# id;timestamp;commentText;codeText;commentWords;codeWords
Option -> public Option help(String helpText);1448287361;Add a help text, explaining the parameter.__@param helpText - the help text._@return the updated Option;public Option help(String helpText) {_		this.helpText = helpText__		return this__	};add,a,help,text,explaining,the,parameter,param,help,text,the,help,text,return,the,updated,option;public,option,help,string,help,text,this,help,text,help,text,return,this
Option -> public Option help(String helpText);1455477986;Add a help text, explaining the parameter.__@param helpText - the help text._@return the updated Option;public Option help(String helpText) {_		this.helpText = helpText__		return this__	};add,a,help,text,explaining,the,parameter,param,help,text,the,help,text,return,the,updated,option;public,option,help,string,help,text,this,help,text,help,text,return,this
Option -> public Option help(String helpText);1500387265;Add a help text, explaining the parameter.__@param helpText - the help text._@return the updated Option;public Option help(String helpText) {_		this.helpText = helpText__		return this__	};add,a,help,text,explaining,the,parameter,param,help,text,the,help,text,return,the,updated,option;public,option,help,string,help,text,this,help,text,help,text,return,this
Option -> public Option help(String helpText);1508481109;Add a help text, explaining the parameter.__@param helpText - the help text._@return the updated Option;public Option help(String helpText) {_		this.helpText = helpText__		return this__	};add,a,help,text,explaining,the,parameter,param,help,text,the,help,text,return,the,updated,option;public,option,help,string,help,text,this,help,text,help,text,return,this
Option -> public Option alt(String shortName);1448287361;Define an alternative / short name of the parameter._Only one alternative per parameter is allowed.__@param shortName - short version of the parameter name_@return the updated Option;public Option alt(String shortName) {_		this.shortName = shortName__		return this__	};define,an,alternative,short,name,of,the,parameter,only,one,alternative,per,parameter,is,allowed,param,short,name,short,version,of,the,parameter,name,return,the,updated,option;public,option,alt,string,short,name,this,short,name,short,name,return,this
Option -> public Option alt(String shortName);1455477986;Define an alternative / short name of the parameter._Only one alternative per parameter is allowed.__@param shortName - short version of the parameter name_@return the updated Option;public Option alt(String shortName) {_		this.shortName = shortName__		return this__	};define,an,alternative,short,name,of,the,parameter,only,one,alternative,per,parameter,is,allowed,param,short,name,short,version,of,the,parameter,name,return,the,updated,option;public,option,alt,string,short,name,this,short,name,short,name,return,this
Option -> public Option alt(String shortName);1500387265;Define an alternative / short name of the parameter._Only one alternative per parameter is allowed.__@param shortName - short version of the parameter name_@return the updated Option;public Option alt(String shortName) {_		this.shortName = shortName__		return this__	};define,an,alternative,short,name,of,the,parameter,only,one,alternative,per,parameter,is,allowed,param,short,name,short,version,of,the,parameter,name,return,the,updated,option;public,option,alt,string,short,name,this,short,name,short,name,return,this
Option -> public Option alt(String shortName);1508481109;Define an alternative / short name of the parameter._Only one alternative per parameter is allowed.__@param shortName - short version of the parameter name_@return the updated Option;public Option alt(String shortName) {_		this.shortName = shortName__		return this__	};define,an,alternative,short,name,of,the,parameter,only,one,alternative,per,parameter,is,allowed,param,short,name,short,version,of,the,parameter,name,return,the,updated,option;public,option,alt,string,short,name,this,short,name,short,name,return,this
Option -> public Option type(OptionType type);1448287361;Define the type of the Option.__@param type - the type which the the value of the Option can be casted to._@return the updated Option;public Option type(OptionType type) {_		this.type = type__		return this__	};define,the,type,of,the,option,param,type,the,type,which,the,the,value,of,the,option,can,be,casted,to,return,the,updated,option;public,option,type,option,type,type,this,type,type,return,this
Option -> public Option type(OptionType type);1455477986;Define the type of the Option.__@param type - the type which the the value of the Option can be casted to._@return the updated Option;public Option type(OptionType type) {_		this.type = type__		return this__	};define,the,type,of,the,option,param,type,the,type,which,the,the,value,of,the,option,can,be,casted,to,return,the,updated,option;public,option,type,option,type,type,this,type,type,return,this
Option -> public Option type(OptionType type);1500387265;Define the type of the Option.__@param type - the type which the the value of the Option can be casted to._@return the updated Option;public Option type(OptionType type) {_		this.type = type__		return this__	};define,the,type,of,the,option,param,type,the,type,which,the,the,value,of,the,option,can,be,casted,to,return,the,updated,option;public,option,type,option,type,type,this,type,type,return,this
Option -> public Option type(OptionType type);1508481109;Define the type of the Option.__@param type - the type which the value of the Option can be casted to._@return the updated Option;public Option type(OptionType type) {_		this.type = type__		return this__	};define,the,type,of,the,option,param,type,the,type,which,the,value,of,the,option,can,be,casted,to,return,the,updated,option;public,option,type,option,type,type,this,type,type,return,this
Option -> public Option defaultValue(String defaultValue) throws RequiredParametersException;1448287361;Define a default value for the option.__Throws an exception if the list of possible values for the parameter is not empty and the default value passed_is not in the list.__@param defaultValue - the default value_@return the updated Option;public Option defaultValue(String defaultValue) throws RequiredParametersException {_		if (this.choices.isEmpty()) {_			return this.setDefaultValue(defaultValue)__		} else {_			if (this.choices.contains(defaultValue)) {_				return this.setDefaultValue(defaultValue)__			} else {_				throw new RequiredParametersException("Default value " + defaultValue +_						" is not in the list of valid values for option " + this.longName)__			}_		}_	};define,a,default,value,for,the,option,throws,an,exception,if,the,list,of,possible,values,for,the,parameter,is,not,empty,and,the,default,value,passed,is,not,in,the,list,param,default,value,the,default,value,return,the,updated,option;public,option,default,value,string,default,value,throws,required,parameters,exception,if,this,choices,is,empty,return,this,set,default,value,default,value,else,if,this,choices,contains,default,value,return,this,set,default,value,default,value,else,throw,new,required,parameters,exception,default,value,default,value,is,not,in,the,list,of,valid,values,for,option,this,long,name
Option -> public Option defaultValue(String defaultValue) throws RequiredParametersException;1455477986;Define a default value for the option.__Throws an exception if the list of possible values for the parameter is not empty and the default value passed_is not in the list.__@param defaultValue - the default value_@return the updated Option;public Option defaultValue(String defaultValue) throws RequiredParametersException {_		if (this.choices.isEmpty()) {_			return this.setDefaultValue(defaultValue)__		} else {_			if (this.choices.contains(defaultValue)) {_				return this.setDefaultValue(defaultValue)__			} else {_				throw new RequiredParametersException("Default value " + defaultValue +_						" is not in the list of valid values for option " + this.longName)__			}_		}_	};define,a,default,value,for,the,option,throws,an,exception,if,the,list,of,possible,values,for,the,parameter,is,not,empty,and,the,default,value,passed,is,not,in,the,list,param,default,value,the,default,value,return,the,updated,option;public,option,default,value,string,default,value,throws,required,parameters,exception,if,this,choices,is,empty,return,this,set,default,value,default,value,else,if,this,choices,contains,default,value,return,this,set,default,value,default,value,else,throw,new,required,parameters,exception,default,value,default,value,is,not,in,the,list,of,valid,values,for,option,this,long,name
Option -> public Option defaultValue(String defaultValue) throws RequiredParametersException;1500387265;Define a default value for the option.__@param defaultValue - the default value_@return the updated Option_@throws RequiredParametersException if the list of possible values for the parameter is not empty and the default_value passed is not in the list.;public Option defaultValue(String defaultValue) throws RequiredParametersException {_		if (this.choices.isEmpty()) {_			return this.setDefaultValue(defaultValue)__		} else {_			if (this.choices.contains(defaultValue)) {_				return this.setDefaultValue(defaultValue)__			} else {_				throw new RequiredParametersException("Default value " + defaultValue +_						" is not in the list of valid values for option " + this.longName)__			}_		}_	};define,a,default,value,for,the,option,param,default,value,the,default,value,return,the,updated,option,throws,required,parameters,exception,if,the,list,of,possible,values,for,the,parameter,is,not,empty,and,the,default,value,passed,is,not,in,the,list;public,option,default,value,string,default,value,throws,required,parameters,exception,if,this,choices,is,empty,return,this,set,default,value,default,value,else,if,this,choices,contains,default,value,return,this,set,default,value,default,value,else,throw,new,required,parameters,exception,default,value,default,value,is,not,in,the,list,of,valid,values,for,option,this,long,name
Option -> public Option defaultValue(String defaultValue) throws RequiredParametersException;1508481109;Define a default value for the option.__@param defaultValue - the default value_@return the updated Option_@throws RequiredParametersException if the list of possible values for the parameter is not empty and the default_value passed is not in the list.;public Option defaultValue(String defaultValue) throws RequiredParametersException {_		if (this.choices.isEmpty()) {_			return this.setDefaultValue(defaultValue)__		} else {_			if (this.choices.contains(defaultValue)) {_				return this.setDefaultValue(defaultValue)__			} else {_				throw new RequiredParametersException("Default value " + defaultValue +_						" is not in the list of valid values for option " + this.longName)__			}_		}_	};define,a,default,value,for,the,option,param,default,value,the,default,value,return,the,updated,option,throws,required,parameters,exception,if,the,list,of,possible,values,for,the,parameter,is,not,empty,and,the,default,value,passed,is,not,in,the,list;public,option,default,value,string,default,value,throws,required,parameters,exception,if,this,choices,is,empty,return,this,set,default,value,default,value,else,if,this,choices,contains,default,value,return,this,set,default,value,default,value,else,throw,new,required,parameters,exception,default,value,default,value,is,not,in,the,list,of,valid,values,for,option,this,long,name
Option -> public Option choices(String... choices) throws RequiredParametersException;1448287361;Restrict the list of possible values of the parameter.__@param choices - the allowed values of the parameter._@return the updated Option;public Option choices(String... choices) throws RequiredParametersException {_		if (this.defaultValue != null) {_			if (Arrays.asList(choices).contains(defaultValue)) {_				Collections.addAll(this.choices, choices)__			} else {_				throw new RequiredParametersException("Valid values for option " + this.longName +_						" do not contain defined default value " + defaultValue)__			}_		} else {_			Collections.addAll(this.choices, choices)__		}_		return this__	};restrict,the,list,of,possible,values,of,the,parameter,param,choices,the,allowed,values,of,the,parameter,return,the,updated,option;public,option,choices,string,choices,throws,required,parameters,exception,if,this,default,value,null,if,arrays,as,list,choices,contains,default,value,collections,add,all,this,choices,choices,else,throw,new,required,parameters,exception,valid,values,for,option,this,long,name,do,not,contain,defined,default,value,default,value,else,collections,add,all,this,choices,choices,return,this
Option -> public Option choices(String... choices) throws RequiredParametersException;1455477986;Restrict the list of possible values of the parameter.__@param choices - the allowed values of the parameter._@return the updated Option;public Option choices(String... choices) throws RequiredParametersException {_		if (this.defaultValue != null) {_			if (Arrays.asList(choices).contains(defaultValue)) {_				Collections.addAll(this.choices, choices)__			} else {_				throw new RequiredParametersException("Valid values for option " + this.longName +_						" do not contain defined default value " + defaultValue)__			}_		} else {_			Collections.addAll(this.choices, choices)__		}_		return this__	};restrict,the,list,of,possible,values,of,the,parameter,param,choices,the,allowed,values,of,the,parameter,return,the,updated,option;public,option,choices,string,choices,throws,required,parameters,exception,if,this,default,value,null,if,arrays,as,list,choices,contains,default,value,collections,add,all,this,choices,choices,else,throw,new,required,parameters,exception,valid,values,for,option,this,long,name,do,not,contain,defined,default,value,default,value,else,collections,add,all,this,choices,choices,return,this
Option -> public Option choices(String... choices) throws RequiredParametersException;1500387265;Restrict the list of possible values of the parameter.__@param choices - the allowed values of the parameter._@return the updated Option;public Option choices(String... choices) throws RequiredParametersException {_		if (this.defaultValue != null) {_			if (Arrays.asList(choices).contains(defaultValue)) {_				Collections.addAll(this.choices, choices)__			} else {_				throw new RequiredParametersException("Valid values for option " + this.longName +_						" do not contain defined default value " + defaultValue)__			}_		} else {_			Collections.addAll(this.choices, choices)__		}_		return this__	};restrict,the,list,of,possible,values,of,the,parameter,param,choices,the,allowed,values,of,the,parameter,return,the,updated,option;public,option,choices,string,choices,throws,required,parameters,exception,if,this,default,value,null,if,arrays,as,list,choices,contains,default,value,collections,add,all,this,choices,choices,else,throw,new,required,parameters,exception,valid,values,for,option,this,long,name,do,not,contain,defined,default,value,default,value,else,collections,add,all,this,choices,choices,return,this
Option -> public Option choices(String... choices) throws RequiredParametersException;1508481109;Restrict the list of possible values of the parameter.__@param choices - the allowed values of the parameter._@return the updated Option;public Option choices(String... choices) throws RequiredParametersException {_		if (this.defaultValue != null) {_			if (Arrays.asList(choices).contains(defaultValue)) {_				Collections.addAll(this.choices, choices)__			} else {_				throw new RequiredParametersException("Valid values for option " + this.longName +_						" do not contain defined default value " + defaultValue)__			}_		} else {_			Collections.addAll(this.choices, choices)__		}_		return this__	};restrict,the,list,of,possible,values,of,the,parameter,param,choices,the,allowed,values,of,the,parameter,return,the,updated,option;public,option,choices,string,choices,throws,required,parameters,exception,if,this,default,value,null,if,arrays,as,list,choices,contains,default,value,collections,add,all,this,choices,choices,else,throw,new,required,parameters,exception,valid,values,for,option,this,long,name,do,not,contain,defined,default,value,default,value,else,collections,add,all,this,choices,choices,return,this
