# id;timestamp;commentText;codeText;commentWords;codeWords
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1451905579;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {__			_			Keys.ExpressionKeys<T> ek__			try {_				isValidSortKeyType(fieldExpression)__				ek = new Keys.ExpressionKeys<>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				isValidSortKeyType(fieldExpression)___				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,is,valid,sort,key,type,field,expression,ek,new,keys,expression,keys,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,is,valid,sort,key,type,field,expression,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1453803418;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1454428544;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1422957090;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br/>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {_			_			Keys.ExpressionKeys<T> ek__			try {_				ek = new Keys.ExpressionKeys<T>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1423234850;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br/>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {_			_			Keys.ExpressionKeys<T> ek__			try {_				ek = new Keys.ExpressionKeys<T>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1427097830;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br/>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {_			_			Keys.ExpressionKeys<T> ek__			try {_				ek = new Keys.ExpressionKeys<T>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1428086525;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br/>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {__			_			Keys.ExpressionKeys<T> ek__			try {_				isValidSortKeyType(fieldExpression)__				ek = new Keys.ExpressionKeys<T>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				isValidSortKeyType(fieldExpression)___				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,is,valid,sort,key,type,field,expression,ek,new,keys,expression,keys,t,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,is,valid,sort,key,type,field,expression,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1446112342;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		if(this.type instanceof CompositeType) {__			_			Keys.ExpressionKeys<T> ek__			try {_				isValidSortKeyType(fieldExpression)__				ek = new Keys.ExpressionKeys<T>(new String[]{fieldExpression}, this.type)__			} catch(IllegalArgumentException iae) {_				throw new InvalidProgramException("Invalid specification of field expression.", iae)__			}_			fields = ek.computeLogicalKeyPositions()__			numFields = fields.length__			orders = new Order[numFields]__			Arrays.fill(orders, order)__		} else {_			fieldExpression = fieldExpression.trim()__			if (!(fieldExpression.equals("*") || fieldExpression.equals("_"))) {_				throw new InvalidProgramException("Output sorting of non-composite types can only be defined on the full type. " +_						"Use a field wildcard for that (\"*\" or \"_\")")__			} else {_				isValidSortKeyType(fieldExpression)___				numFields = 1__				fields = new int[]{0}__				orders = new Order[]{order}__			}_		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,if,this,type,instanceof,composite,type,keys,expression,keys,t,ek,try,is,valid,sort,key,type,field,expression,ek,new,keys,expression,keys,t,new,string,field,expression,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,fields,ek,compute,logical,key,positions,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,else,field,expression,field,expression,trim,if,field,expression,equals,field,expression,equals,throw,new,invalid,program,exception,output,sorting,of,non,composite,types,can,only,be,defined,on,the,full,type,use,a,field,wildcard,for,that,or,else,is,valid,sort,key,type,field,expression,num,fields,1,fields,new,int,0,orders,new,order,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1405024514;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1405090423;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1411399886;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1411473593;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1412346153;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1415869469;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1422957090;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> public DataSink<T> setParallelism(int dop);1423234850;Sets the degree of parallelism for this data sink._The degree must be 1 or more.__@param dop The degree of parallelism for this data sink._@return This data sink with set degree of parallelism.;public DataSink<T> setParallelism(int dop) {_		_		if(dop < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.dop = dop__		_		return this__	};sets,the,degree,of,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,dop,the,degree,of,parallelism,for,this,data,sink,return,this,data,sink,with,set,degree,of,parallelism;public,data,sink,t,set,parallelism,int,dop,if,dop,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,dop,dop,return,this
DataSink -> @PublicEvolving 	public ResourceSpec getMinResources();1488304750;Returns the minimum resources of this data sink. If no minimum resources have been set,_this returns the default resource profile.__@return The minimum resources of this data sink.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};returns,the,minimum,resources,of,this,data,sink,if,no,minimum,resources,have,been,set,this,returns,the,default,resource,profile,return,the,minimum,resources,of,this,data,sink;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DataSink -> @PublicEvolving 	public ResourceSpec getMinResources();1489671807;Returns the minimum resources of this data sink. If no minimum resources have been set,_this returns the default resource profile.__@return The minimum resources of this data sink.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};returns,the,minimum,resources,of,this,data,sink,if,no,minimum,resources,have,been,set,this,returns,the,default,resource,profile,return,the,minimum,resources,of,this,data,sink;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DataSink -> @PublicEvolving 	public ResourceSpec getMinResources();1491417674;Returns the minimum resources of this data sink. If no minimum resources have been set,_this returns the default resource profile.__@return The minimum resources of this data sink.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};returns,the,minimum,resources,of,this,data,sink,if,no,minimum,resources,have,been,set,this,returns,the,default,resource,profile,return,the,minimum,resources,of,this,data,sink;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DataSink -> @PublicEvolving 	public ResourceSpec getMinResources();1500970016;Returns the minimum resources of this data sink. If no minimum resources have been set,_this returns the default resource profile.__@return The minimum resources of this data sink.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return this.minResources__	};returns,the,minimum,resources,of,this,data,sink,if,no,minimum,resources,have,been,set,this,returns,the,default,resource,profile,return,the,minimum,resources,of,this,data,sink;public,evolving,public,resource,spec,get,min,resources,return,this,min,resources
DataSink -> public DataSink<T> sortLocalOutput(int field, Order order);1422957090;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br/>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = new int[] {field}__			this.sortOrders = new Order[] {order}__		} else {_			_			int newLength = this.sortKeyPositions.length + 1__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			this.sortKeyPositions[newLength-1] = field__			this.sortOrders[newLength-1] = order__		}_		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,if,this,sort,key,positions,null,this,sort,key,positions,new,int,field,this,sort,orders,new,order,order,else,int,new,length,this,sort,key,positions,length,1,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,this,sort,key,positions,new,length,1,field,this,sort,orders,new,length,1,order,return,this
DataSink -> public DataSink<T> sortLocalOutput(int field, Order order);1423234850;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br/>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}__		_		Keys.ExpressionKeys<T> ek__		try {_			ek = new Keys.ExpressionKeys<T>(new int[]{field}, this.type)__		} catch(IllegalArgumentException iae) {_			throw new InvalidProgramException("Invalid specification of field expression.", iae)__		}_		int[] flatKeys = ek.computeLogicalKeyPositions()___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,int,field,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,int,flat,keys,ek,compute,logical,key,positions,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> public DataSink<T> sortLocalOutput(int field, Order order);1427097830;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br/>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}__		_		Keys.ExpressionKeys<T> ek__		try {_			ek = new Keys.ExpressionKeys<T>(new int[]{field}, this.type)__		} catch(IllegalArgumentException iae) {_			throw new InvalidProgramException("Invalid specification of field expression.", iae)__		}_		int[] flatKeys = ek.computeLogicalKeyPositions()___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,int,field,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,int,flat,keys,ek,compute,logical,key,positions,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> public DataSink<T> sortLocalOutput(int field, Order order);1428086525;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.</br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br/>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		_		Keys.ExpressionKeys<T> ek__		try {_			ek = new Keys.ExpressionKeys<T>(new int[]{field}, this.type)__		} catch(IllegalArgumentException iae) {_			throw new InvalidProgramException("Invalid specification of field expression.", iae)__		}_		int[] flatKeys = ek.computeLogicalKeyPositions()___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,int,field,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,int,flat,keys,ek,compute,logical,key,positions,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> public DataSink<T> sortLocalOutput(int field, Order order);1446112342;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		_		Keys.ExpressionKeys<T> ek__		try {_			ek = new Keys.ExpressionKeys<T>(new int[]{field}, this.type)__		} catch(IllegalArgumentException iae) {_			throw new InvalidProgramException("Invalid specification of field expression.", iae)__		}_		int[] flatKeys = ek.computeLogicalKeyPositions()___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,t,new,int,field,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,int,flat,keys,ek,compute,logical,key,positions,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @PublicEvolving 	public ResourceSpec getPreferredResources();1488304750;Returns the preferred resources of this data sink. If no preferred resources have been set,_this returns the default resource profile.__@return The preferred resources of this data sink.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};returns,the,preferred,resources,of,this,data,sink,if,no,preferred,resources,have,been,set,this,returns,the,default,resource,profile,return,the,preferred,resources,of,this,data,sink;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DataSink -> @PublicEvolving 	public ResourceSpec getPreferredResources();1489671807;Returns the preferred resources of this data sink. If no preferred resources have been set,_this returns the default resource profile.__@return The preferred resources of this data sink.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};returns,the,preferred,resources,of,this,data,sink,if,no,preferred,resources,have,been,set,this,returns,the,default,resource,profile,return,the,preferred,resources,of,this,data,sink;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DataSink -> @PublicEvolving 	public ResourceSpec getPreferredResources();1491417674;Returns the preferred resources of this data sink. If no preferred resources have been set,_this returns the default resource profile.__@return The preferred resources of this data sink.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};returns,the,preferred,resources,of,this,data,sink,if,no,preferred,resources,have,been,set,this,returns,the,default,resource,profile,return,the,preferred,resources,of,this,data,sink;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DataSink -> @PublicEvolving 	public ResourceSpec getPreferredResources();1500970016;Returns the preferred resources of this data sink. If no preferred resources have been set,_this returns the default resource profile.__@return The preferred resources of this data sink.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return this.preferredResources__	};returns,the,preferred,resources,of,this,data,sink,if,no,preferred,resources,have,been,set,this,returns,the,default,resource,profile,return,the,preferred,resources,of,this,data,sink;public,evolving,public,resource,spec,get,preferred,resources,return,this,preferred,resources
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(int field, Order order);1451905579;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(int field, Order order) {__		if (!this.type.isTupleType()) {_			throw new InvalidProgramException("Specifying order keys via field positions is only valid for tuple data types")__		}_		if (field >= this.type.getArity()) {_			throw new InvalidProgramException("Order key out of tuple bounds.")__		}_		isValidSortKeyType(field)___		_		Keys.ExpressionKeys<T> ek__		try {_			ek = new Keys.ExpressionKeys<>(new int[]{field}, this.type)__		} catch(IllegalArgumentException iae) {_			throw new InvalidProgramException("Invalid specification of field expression.", iae)__		}_		int[] flatKeys = ek.computeLogicalKeyPositions()___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,data,sink,t,sort,local,output,int,field,order,order,if,this,type,is,tuple,type,throw,new,invalid,program,exception,specifying,order,keys,via,field,positions,is,only,valid,for,tuple,data,types,if,field,this,type,get,arity,throw,new,invalid,program,exception,order,key,out,of,tuple,bounds,is,valid,sort,key,type,field,keys,expression,keys,t,ek,try,ek,new,keys,expression,keys,new,int,field,this,type,catch,illegal,argument,exception,iae,throw,new,invalid,program,exception,invalid,specification,of,field,expression,iae,int,flat,keys,ek,compute,logical,key,positions,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(int field, Order order);1453803418;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	public DataSink<T> sortLocalOutput(int field, Order order);1454428544;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1455101486;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1460563153;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1461271239;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1465304462;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1488304750;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1488304750;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1489671807;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1491417674;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b><br>_Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order__@deprecated Use {@link DataSet#sortPartition(String, Order)} instead;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for(int i=0_ i<numFields_ i++) {_				this.sortKeyPositions[oldLength+i] = fields[i]__				this.sortOrders[oldLength+i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,br,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order,deprecated,use,link,data,set,sort,partition,string,order,instead;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(String fieldExpression, Order order);1500970016;Sorts each local partition of a data set on the field(s) specified by the field expression_in the specified {@link Order} before it is emitted by the output format.__<p><b>Note: Non-composite types can only be sorted on the full element which is specified by_a wildcard expression ("*" or "_").</b>__<p>Data sets of composite types (Tuple or Pojo) can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(String, Order)} calls.__@param fieldExpression The field expression for the field(s) on which the data set is locally sorted._@param order The Order in which the specified field(s) are locally sorted._@return This data sink operator with specified output order.__@see Order__@deprecated Use {@link DataSet#sortPartition(String, Order)} instead;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(String fieldExpression, Order order) {__		int numFields__		int[] fields__		Order[] orders___		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(fieldExpression, this.type)__		fields = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(fieldExpression, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		numFields = fields.length__		orders = new Order[numFields]__		Arrays.fill(orders, order)___		if (this.sortKeyPositions == null) {_			_			this.sortKeyPositions = fields__			this.sortOrders = orders__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + numFields__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)__			for (int i = 0_ i < numFields_ i++) {_				this.sortKeyPositions[oldLength + i] = fields[i]__				this.sortOrders[oldLength + i] = orders[i]__			}_		}__		return this__	};sorts,each,local,partition,of,a,data,set,on,the,field,s,specified,by,the,field,expression,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,p,b,note,non,composite,types,can,only,be,sorted,on,the,full,element,which,is,specified,by,a,wildcard,expression,or,b,p,data,sets,of,composite,types,tuple,or,pojo,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,string,order,calls,param,field,expression,the,field,expression,for,the,field,s,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,field,s,are,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,order,deprecated,use,link,data,set,sort,partition,string,order,instead;deprecated,public,evolving,public,data,sink,t,sort,local,output,string,field,expression,order,order,int,num,fields,int,fields,order,orders,keys,expression,keys,t,ek,new,keys,expression,keys,field,expression,this,type,fields,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,expression,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,num,fields,fields,length,orders,new,order,num,fields,arrays,fill,orders,order,if,this,sort,key,positions,null,this,sort,key,positions,fields,this,sort,orders,orders,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,num,fields,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,num,fields,i,this,sort,key,positions,old,length,i,fields,i,this,sort,orders,old,length,i,orders,i,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1415869469;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1422957090;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1423234850;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1427097830;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1428086525;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1446112342;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1451905579;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1453803418;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1454428544;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1454679829;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1455101486;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1460563153;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1461271239;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1465304462;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1488304750;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1488304750;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1489671807;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1491417674;Pass a configuration to the OutputFormat_@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> public DataSink<T> withParameters(Configuration parameters);1500970016;Pass a configuration to the OutputFormat._@param parameters Configuration parameters;public DataSink<T> withParameters(Configuration parameters) {_		this.parameters = parameters__		return this__	};pass,a,configuration,to,the,output,format,param,parameters,configuration,parameters;public,data,sink,t,with,parameters,configuration,parameters,this,parameters,parameters,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec resources);1489671807;Sets the resources for this data sink, and the minimum and preferred resources are the same by default.__@param resources The resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		this.minResources = resources__		this.preferredResources = resources___		return this__	};sets,the,resources,for,this,data,sink,and,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,this,min,resources,resources,this,preferred,resources,resources,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec resources);1491417674;Sets the resources for this data sink, and the minimum and preferred resources are the same by default.__@param resources The resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		this.minResources = resources__		this.preferredResources = resources___		return this__	};sets,the,resources,for,this,data,sink,and,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,this,min,resources,resources,this,preferred,resources,resources,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec resources);1500970016;Sets the resources for this data sink, and the minimum and preferred resources are the same by default.__@param resources The resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		this.minResources = resources__		this.preferredResources = resources___		return this__	};sets,the,resources,for,this,data,sink,and,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,this,min,resources,resources,this,preferred,resources,resources,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1427097830;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1428086525;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1446112342;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1451905579;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1453803418;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1454428544;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1454679829;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1455101486;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1460563153;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		_		if(parallelism < 1) {_			throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__		}_		this.parallelism = parallelism__		_		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1461271239;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		if (parallelism != ExecutionConfig.PARALLELISM_UNKNOWN) {_			if (parallelism < 1 && parallelism != ExecutionConfig.PARALLELISM_DEFAULT) {_				throw new IllegalArgumentException("The parallelism of an operator must be at least 1.")__			}_			this.parallelism = parallelism__		}__		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,if,parallelism,execution,config,if,parallelism,1,parallelism,execution,config,throw,new,illegal,argument,exception,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1465304462;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1489671807;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1491417674;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> public DataSink<T> setParallelism(int parallelism);1500970016;Sets the parallelism for this data sink._The degree must be 1 or more.__@param parallelism The parallelism for this data sink. A value equal to {@link ExecutionConfig#PARALLELISM_DEFAULT}_will use the system default._@return This data sink with set parallelism.;public DataSink<T> setParallelism(int parallelism) {_		Preconditions.checkArgument(parallelism > 0 || parallelism == ExecutionConfig.PARALLELISM_DEFAULT,_			"The parallelism of an operator must be at least 1.")___		this.parallelism = parallelism___		return this__	};sets,the,parallelism,for,this,data,sink,the,degree,must,be,1,or,more,param,parallelism,the,parallelism,for,this,data,sink,a,value,equal,to,link,execution,config,will,use,the,system,default,return,this,data,sink,with,set,parallelism;public,data,sink,t,set,parallelism,int,parallelism,preconditions,check,argument,parallelism,0,parallelism,execution,config,the,parallelism,of,an,operator,must,be,at,least,1,this,parallelism,parallelism,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1455101486;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1460563153;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1461271239;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1465304462;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1488304750;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1488304750;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1489671807;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1491417674;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.<br>_<b>Note: Only tuple data sets can be sorted using integer field indices.</b><br>_The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order__@deprecated Use {@link DataSet#sortPartition(int, Order)} instead;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if(this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for(int i=0_ i<flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength+i] = flatKeys[i]__				this.sortOrders[oldLength+i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,br,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,br,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order,deprecated,use,link,data,set,sort,partition,int,order,instead;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> @Deprecated 	@PublicEvolving 	public DataSink<T> sortLocalOutput(int field, Order order);1500970016;Sorts each local partition of a {@link org.apache.flink.api.java.tuple.Tuple} data set_on the specified field in the specified {@link Order} before it is emitted by the output format.__<p><b>Note: Only tuple data sets can be sorted using integer field indices.</b>__<p>The tuple data set can be sorted on multiple fields in different orders_by chaining {@link #sortLocalOutput(int, Order)} calls.__@param field The Tuple field on which the data set is locally sorted._@param order The Order in which the specified Tuple field is locally sorted._@return This data sink operator with specified output order.__@see org.apache.flink.api.java.tuple.Tuple_@see Order__@deprecated Use {@link DataSet#sortPartition(int, Order)} instead;@Deprecated_	@PublicEvolving_	public DataSink<T> sortLocalOutput(int field, Order order) {__		_		Keys.ExpressionKeys<T> ek = new Keys.ExpressionKeys<>(field, this.type)__		int[] flatKeys = ek.computeLogicalKeyPositions()___		if (!Keys.ExpressionKeys.isSortKey(field, this.type)) {_			throw new InvalidProgramException("Selected sort key is not a sortable type")__		}__		if (this.sortKeyPositions == null) {_			_			this.sortKeyPositions = flatKeys__			this.sortOrders = new Order[flatKeys.length]__			Arrays.fill(this.sortOrders, order)__		} else {_			_			int oldLength = this.sortKeyPositions.length__			int newLength = oldLength + flatKeys.length__			this.sortKeyPositions = Arrays.copyOf(this.sortKeyPositions, newLength)__			this.sortOrders = Arrays.copyOf(this.sortOrders, newLength)___			for (int i = 0_ i < flatKeys.length_ i++) {_				this.sortKeyPositions[oldLength + i] = flatKeys[i]__				this.sortOrders[oldLength + i] = order__			}_		}__		return this__	};sorts,each,local,partition,of,a,link,org,apache,flink,api,java,tuple,tuple,data,set,on,the,specified,field,in,the,specified,link,order,before,it,is,emitted,by,the,output,format,p,b,note,only,tuple,data,sets,can,be,sorted,using,integer,field,indices,b,p,the,tuple,data,set,can,be,sorted,on,multiple,fields,in,different,orders,by,chaining,link,sort,local,output,int,order,calls,param,field,the,tuple,field,on,which,the,data,set,is,locally,sorted,param,order,the,order,in,which,the,specified,tuple,field,is,locally,sorted,return,this,data,sink,operator,with,specified,output,order,see,org,apache,flink,api,java,tuple,tuple,see,order,deprecated,use,link,data,set,sort,partition,int,order,instead;deprecated,public,evolving,public,data,sink,t,sort,local,output,int,field,order,order,keys,expression,keys,t,ek,new,keys,expression,keys,field,this,type,int,flat,keys,ek,compute,logical,key,positions,if,keys,expression,keys,is,sort,key,field,this,type,throw,new,invalid,program,exception,selected,sort,key,is,not,a,sortable,type,if,this,sort,key,positions,null,this,sort,key,positions,flat,keys,this,sort,orders,new,order,flat,keys,length,arrays,fill,this,sort,orders,order,else,int,old,length,this,sort,key,positions,length,int,new,length,old,length,flat,keys,length,this,sort,key,positions,arrays,copy,of,this,sort,key,positions,new,length,this,sort,orders,arrays,copy,of,this,sort,orders,new,length,for,int,i,0,i,flat,keys,length,i,this,sort,key,positions,old,length,i,flat,keys,i,this,sort,orders,old,length,i,order,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for this data sink. and the lower and upper resource limits_will be considered in resource resize feature for future plan.__@param minResources The minimum resources for this data sink._@param preferredResources The preferred resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		this.minResources = minResources__		this.preferredResources = preferredResources___		return this__	};sets,the,minimum,and,preferred,resources,for,this,data,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,data,sink,param,preferred,resources,the,preferred,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,this,min,resources,min,resources,this,preferred,resources,preferred,resources,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1491417674;Sets the minimum and preferred resources for this data sink. and the lower and upper resource limits_will be considered in resource resize feature for future plan.__@param minResources The minimum resources for this data sink._@param preferredResources The preferred resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		this.minResources = minResources__		this.preferredResources = preferredResources___		return this__	};sets,the,minimum,and,preferred,resources,for,this,data,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,data,sink,param,preferred,resources,the,preferred,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,this,min,resources,min,resources,this,preferred,resources,preferred,resources,return,this
DataSink -> private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1500970016;Sets the minimum and preferred resources for this data sink. and the lower and upper resource limits_will be considered in resource resize feature for future plan.__@param minResources The minimum resources for this data sink._@param preferredResources The preferred resources for this data sink._@return The data sink with set minimum and preferred resources.;private DataSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		this.minResources = minResources__		this.preferredResources = preferredResources___		return this__	};sets,the,minimum,and,preferred,resources,for,this,data,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,data,sink,param,preferred,resources,the,preferred,resources,for,this,data,sink,return,the,data,sink,with,set,minimum,and,preferred,resources;private,data,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,this,min,resources,min,resources,this,preferred,resources,preferred,resources,return,this
DataSink -> public int getParallelism();1405024514;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1405090423;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1411399886;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1411473593;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1412346153;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1415869469;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1422957090;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1423234850;Returns the degree of parallelism of this data sink.__@return The degree of parallelism of this data sink.;public int getParallelism() {_		return this.dop__	};returns,the,degree,of,parallelism,of,this,data,sink,return,the,degree,of,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,dop
DataSink -> public int getParallelism();1427097830;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1428086525;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1446112342;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1451905579;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1453803418;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1454428544;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1454679829;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1455101486;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1460563153;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1461271239;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1465304462;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1488304750;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1488304750;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1489671807;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1491417674;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public int getParallelism();1500970016;Returns the parallelism of this data sink.__@return The parallelism of this data sink.;public int getParallelism() {_		return this.parallelism__	};returns,the,parallelism,of,this,data,sink,return,the,parallelism,of,this,data,sink;public,int,get,parallelism,return,this,parallelism
DataSink -> public Configuration getParameters();1415869469;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1422957090;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1423234850;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1427097830;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1428086525;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1446112342;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1451905579;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1453803418;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1454428544;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1454679829;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1455101486;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1460563153;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1461271239;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1465304462;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1488304750;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1488304750;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1489671807;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1491417674;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
DataSink -> public Configuration getParameters();1500970016;@return Configuration for the OutputFormat.;public Configuration getParameters() {_		return this.parameters__	};return,configuration,for,the,output,format;public,configuration,get,parameters,return,this,parameters
