# id;timestamp;commentText;codeText;commentWords;codeWords
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(String... fields);1444400361;Continues a Join transformation and defines the fields of the second join_{@link DataSet} that should be used as join keys.<br/>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(String... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,string,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(String... fields);1446112342;Continues a Join transformation and defines the fields of the second join_{@link DataSet} that should be used as join keys.<br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(String... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,string,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(String... fields);1454428544;Continues a Join transformation and defines the fields of the second join_{@link DataSet} that should be used as join keys.<br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(String... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,string,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(String... fields);1454679829;Continues a Join transformation and defines the fields of the second join_{@link DataSet} that should be used as join keys.<br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(String... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,string,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(String... fields);1500970016;Continues a Join transformation and defines the fields of the second join_{@link DataSet} that should be used as join keys.__<p>The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(String... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,p,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,string,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(int... fields);1444400361;Continues a Join transformation. <br/>_Defines the {@link Tuple} fields of the first join {@link DataSet} that should be used as join keys.<br/>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br/>__@param fields The indexes of the other Tuple fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(int... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,link,tuple,fields,of,the,first,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,other,tuple,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,int,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(int... fields);1446112342;Continues a Join transformation. <br>_Defines the {@link Tuple} fields of the first join {@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__@param fields The indexes of the other Tuple fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(int... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,link,tuple,fields,of,the,first,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,other,tuple,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,int,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(int... fields);1454428544;Continues a Join transformation. <br>_Defines the {@link Tuple} fields of the first join {@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__@param fields The indexes of the other Tuple fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(int... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,link,tuple,fields,of,the,first,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,other,tuple,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,int,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(int... fields);1454679829;Continues a Join transformation. <br>_Defines the {@link Tuple} fields of the first join {@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__@param fields The indexes of the other Tuple fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(int... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,link,tuple,fields,of,the,first,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,param,fields,the,indexes,of,the,other,tuple,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,int,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(int... fields);1500970016;Continues a Join transformation.__<p>Defines the {@link Tuple} fields of the first join {@link DataSet} that should be used as join keys.__<p><b>Note: Fields can only be selected as join keys on Tuple DataSets.</b>__@param fields The indexes of the other Tuple fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(int... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,p,defines,the,link,tuple,fields,of,the,first,join,link,data,set,that,should,be,used,as,join,keys,p,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,param,fields,the,indexes,of,the,other,tuple,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,int,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(String... fields);1444400361;Continues a Join transformation. <br/>_Defines the fields of the first join {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(String... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,fields,of,the,first,join,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,string,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(String... fields);1446112342;Continues a Join transformation. <br>_Defines the fields of the first join {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(String... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,fields,of,the,first,join,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,string,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(String... fields);1454428544;Continues a Join transformation. <br>_Defines the fields of the first join {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(String... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,fields,of,the,first,join,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,string,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(String... fields);1454679829;Continues a Join transformation. <br>_Defines the fields of the first join {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(String... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,br,defines,the,fields,of,the,first,join,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,string,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> public JoinOperatorSetsPredicateBase where(String... fields);1500970016;Continues a Join transformation.__<p>Defines the fields of the first join {@link DataSet} that should be used as grouping keys. Fields_are the names of member fields of the underlying type of the data set.__@param fields The  fields of the first join DataSets that should be used as keys._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see Tuple_@see DataSet;public JoinOperatorSetsPredicateBase where(String... fields) {_		return new JoinOperatorSetsPredicateBase(new Keys.ExpressionKeys<>(fields, input1.getType()))__	};continues,a,join,transformation,p,defines,the,fields,of,the,first,join,link,data,set,that,should,be,used,as,grouping,keys,fields,are,the,names,of,member,fields,of,the,underlying,type,of,the,data,set,param,fields,the,fields,of,the,first,join,data,sets,that,should,be,used,as,keys,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,tuple,see,data,set;public,join,operator,sets,predicate,base,where,string,fields,return,new,join,operator,sets,predicate,base,new,keys,expression,keys,fields,input1,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(int... fields);1444400361;Continues a Join transformation and defines the {@link Tuple} fields of the second join_{@link DataSet} that should be used as join keys.<br/>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br/>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The indexes of the Tuple fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(int... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,link,tuple,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,indexes,of,the,tuple,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,int,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(int... fields);1446112342;Continues a Join transformation and defines the {@link Tuple} fields of the second join_{@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The indexes of the Tuple fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(int... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,link,tuple,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,indexes,of,the,tuple,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,int,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(int... fields);1454428544;Continues a Join transformation and defines the {@link Tuple} fields of the second join_{@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The indexes of the Tuple fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(int... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,link,tuple,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,indexes,of,the,tuple,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,int,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(int... fields);1454679829;Continues a Join transformation and defines the {@link Tuple} fields of the second join_{@link DataSet} that should be used as join keys.<br>_<b>Note: Fields can only be selected as join keys on Tuple DataSets.</b><br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The indexes of the Tuple fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(int... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,link,tuple,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,br,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,indexes,of,the,tuple,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,int,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public JoinFunctionAssigner<I1, I2> equalTo(int... fields);1500970016;Continues a Join transformation and defines the {@link Tuple} fields of the second join_{@link DataSet} that should be used as join keys.__<p><b>Note: Fields can only be selected as join keys on Tuple DataSets.</b>__<p>The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param fields The indexes of the Tuple fields of the second join DataSet that should be used as keys._@return A JoinFunctionAssigner.;public JoinFunctionAssigner<I1, I2> equalTo(int... fields) {_			return createJoinFunctionAssigner(new Keys.ExpressionKeys<>(fields, input2.getType()))__		};continues,a,join,transformation,and,defines,the,link,tuple,fields,of,the,second,join,link,data,set,that,should,be,used,as,join,keys,p,b,note,fields,can,only,be,selected,as,join,keys,on,tuple,data,sets,b,p,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,fields,the,indexes,of,the,tuple,fields,of,the,second,join,data,set,that,should,be,used,as,keys,return,a,join,function,assigner;public,join,function,assigner,i1,i2,equal,to,int,fields,return,create,join,function,assigner,new,keys,expression,keys,fields,input2,get,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector);1444400361;Continues a Join transformation and defines a {@link KeySelector} function for the second join {@link DataSet}.</br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is joined. </br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param keySelector The KeySelector function which extracts the key values from the second DataSet on which it is joined._@return A JoinFunctionAssigner.;public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return createJoinFunctionAssigner(new Keys.SelectorFunctionKeys<>(keySelector, input2.getType(), keyType))__		};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,second,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,joined,return,a,join,function,assigner;public,k,join,function,assigner,i1,i2,equal,to,key,selector,i2,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,create,join,function,assigner,new,keys,selector,function,keys,key,selector,input2,get,type,key,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector);1446112342;Continues a Join transformation and defines a {@link KeySelector} function for the second join {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is joined. <br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param keySelector The KeySelector function which extracts the key values from the second DataSet on which it is joined._@return A JoinFunctionAssigner.;public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return createJoinFunctionAssigner(new Keys.SelectorFunctionKeys<>(keySelector, input2.getType(), keyType))__		};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,second,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,joined,return,a,join,function,assigner;public,k,join,function,assigner,i1,i2,equal,to,key,selector,i2,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,create,join,function,assigner,new,keys,selector,function,keys,key,selector,input2,get,type,key,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector);1454428544;Continues a Join transformation and defines a {@link KeySelector} function for the second join {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is joined. <br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param keySelector The KeySelector function which extracts the key values from the second DataSet on which it is joined._@return A JoinFunctionAssigner.;public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return createJoinFunctionAssigner(new Keys.SelectorFunctionKeys<>(keySelector, input2.getType(), keyType))__		};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,second,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,joined,return,a,join,function,assigner;public,k,join,function,assigner,i1,i2,equal,to,key,selector,i2,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,create,join,function,assigner,new,keys,selector,function,keys,key,selector,input2,get,type,key,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector);1454679829;Continues a Join transformation and defines a {@link KeySelector} function for the second join {@link DataSet}.<br>_The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is joined. <br>__The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param keySelector The KeySelector function which extracts the key values from the second DataSet on which it is joined._@return A JoinFunctionAssigner.;public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return createJoinFunctionAssigner(new Keys.SelectorFunctionKeys<>(keySelector, input2.getType(), keyType))__		};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,second,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,joined,return,a,join,function,assigner;public,k,join,function,assigner,i1,i2,equal,to,key,selector,i2,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,create,join,function,assigner,new,keys,selector,function,keys,key,selector,input2,get,type,key,type
JoinOperatorSetsBase -> JoinOperatorSetsPredicateBase -> public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector);1500970016;Continues a Join transformation and defines a {@link KeySelector} function for the second join {@link DataSet}.__<p>The KeySelector function is called for each element of the second DataSet and extracts a single_key value on which the DataSet is joined.__<p>The resulting {@link JoinFunctionAssigner} needs to be finished by providing a_{@link JoinFunction} by calling {@link JoinFunctionAssigner#with(JoinFunction)}__@param keySelector The KeySelector function which extracts the key values from the second DataSet on which it is joined._@return A JoinFunctionAssigner.;public <K> JoinFunctionAssigner<I1, I2> equalTo(KeySelector<I2, K> keySelector) {_			TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return createJoinFunctionAssigner(new Keys.SelectorFunctionKeys<>(keySelector, input2.getType(), keyType))__		};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,second,join,link,data,set,p,the,key,selector,function,is,called,for,each,element,of,the,second,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,p,the,resulting,link,join,function,assigner,needs,to,be,finished,by,providing,a,link,join,function,by,calling,link,join,function,assigner,with,join,function,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,second,data,set,on,which,it,is,joined,return,a,join,function,assigner;public,k,join,function,assigner,i1,i2,equal,to,key,selector,i2,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,create,join,function,assigner,new,keys,selector,function,keys,key,selector,input2,get,type,key,type
JoinOperatorSetsBase -> public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector);1444400361;Continues a Join transformation and defines a {@link KeySelector} function for the first join {@link DataSet}.</br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is joined. </br>__@param keySelector The KeySelector function which extracts the key values from the DataSet on which it is joined._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see KeySelector_@see DataSet;public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new JoinOperatorSetsPredicateBase(new Keys.SelectorFunctionKeys<>(keySelector, input1.getType(), keyType))__	};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,first,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,joined,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,key,selector,see,data,set;public,k,join,operator,sets,predicate,base,where,key,selector,i1,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,join,operator,sets,predicate,base,new,keys,selector,function,keys,key,selector,input1,get,type,key,type
JoinOperatorSetsBase -> public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector);1446112342;Continues a Join transformation and defines a {@link KeySelector} function for the first join {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is joined. <br>__@param keySelector The KeySelector function which extracts the key values from the DataSet on which it is joined._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see KeySelector_@see DataSet;public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new JoinOperatorSetsPredicateBase(new Keys.SelectorFunctionKeys<>(keySelector, input1.getType(), keyType))__	};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,first,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,joined,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,key,selector,see,data,set;public,k,join,operator,sets,predicate,base,where,key,selector,i1,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,join,operator,sets,predicate,base,new,keys,selector,function,keys,key,selector,input1,get,type,key,type
JoinOperatorSetsBase -> public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector);1454428544;Continues a Join transformation and defines a {@link KeySelector} function for the first join {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is joined. <br>__@param keySelector The KeySelector function which extracts the key values from the DataSet on which it is joined._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see KeySelector_@see DataSet;public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new JoinOperatorSetsPredicateBase(new Keys.SelectorFunctionKeys<>(keySelector, input1.getType(), keyType))__	};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,first,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,joined,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,key,selector,see,data,set;public,k,join,operator,sets,predicate,base,where,key,selector,i1,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,join,operator,sets,predicate,base,new,keys,selector,function,keys,key,selector,input1,get,type,key,type
JoinOperatorSetsBase -> public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector);1454679829;Continues a Join transformation and defines a {@link KeySelector} function for the first join {@link DataSet}.<br>_The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is joined. <br>__@param keySelector The KeySelector function which extracts the key values from the DataSet on which it is joined._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see KeySelector_@see DataSet;public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new JoinOperatorSetsPredicateBase(new Keys.SelectorFunctionKeys<>(keySelector, input1.getType(), keyType))__	};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,first,join,link,data,set,br,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,br,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,joined,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,key,selector,see,data,set;public,k,join,operator,sets,predicate,base,where,key,selector,i1,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,join,operator,sets,predicate,base,new,keys,selector,function,keys,key,selector,input1,get,type,key,type
JoinOperatorSetsBase -> public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector);1500970016;Continues a Join transformation and defines a {@link KeySelector} function for the first join {@link DataSet}.__<p>The KeySelector function is called for each element of the first DataSet and extracts a single_key value on which the DataSet is joined.__@param keySelector The KeySelector function which extracts the key values from the DataSet on which it is joined._@return An incomplete Join transformation._Call {@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(int...)} or_{@link org.apache.flink.api.java.operators.join.JoinOperatorSetsBase.JoinOperatorSetsPredicateBase#equalTo(KeySelector)}_to continue the Join.__@see KeySelector_@see DataSet;public <K> JoinOperatorSetsPredicateBase where(KeySelector<I1, K> keySelector) {_		TypeInformation<K> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new JoinOperatorSetsPredicateBase(new Keys.SelectorFunctionKeys<>(keySelector, input1.getType(), keyType))__	};continues,a,join,transformation,and,defines,a,link,key,selector,function,for,the,first,join,link,data,set,p,the,key,selector,function,is,called,for,each,element,of,the,first,data,set,and,extracts,a,single,key,value,on,which,the,data,set,is,joined,param,key,selector,the,key,selector,function,which,extracts,the,key,values,from,the,data,set,on,which,it,is,joined,return,an,incomplete,join,transformation,call,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,int,or,link,org,apache,flink,api,java,operators,join,join,operator,sets,base,join,operator,sets,predicate,base,equal,to,key,selector,to,continue,the,join,see,key,selector,see,data,set;public,k,join,operator,sets,predicate,base,where,key,selector,i1,k,key,selector,type,information,k,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,join,operator,sets,predicate,base,new,keys,selector,function,keys,key,selector,input1,get,type,key,type
