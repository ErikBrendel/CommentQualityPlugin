# id;timestamp;commentText;codeText;commentWords;codeWords
CoordVector -> public double[] getCoordinates();1448385411;Returns the coordinate vector of a multi-dimensional point.__@return The coordinate vector of a multi-dimensional point.;public double[] getCoordinates() {_		return this.coordinates__	};returns,the,coordinate,vector,of,a,multi,dimensional,point,return,the,coordinate,vector,of,a,multi,dimensional,point;public,double,get,coordinates,return,this,coordinates
CoordVector -> public double[] getCoordinates();1457441341;Returns the coordinate vector of a multi-dimensional point.__@return The coordinate vector of a multi-dimensional point.;public double[] getCoordinates() {_		return this.coordinates__	};returns,the,coordinate,vector,of,a,multi,dimensional,point,return,the,coordinate,vector,of,a,multi,dimensional,point;public,double,get,coordinates,return,this,coordinates
CoordVector -> public double[] getCoordinates();1499899067;Returns the coordinate vector of a multi-dimensional point.__@return The coordinate vector of a multi-dimensional point.;public double[] getCoordinates() {_		return this.coordinates__	};returns,the,coordinate,vector,of,a,multi,dimensional,point,return,the,coordinate,vector,of,a,multi,dimensional,point;public,double,get,coordinates,return,this,coordinates
CoordVector -> public double[] getCoordinates();1515177485;Returns the coordinate vector of a multi-dimensional point.__@return The coordinate vector of a multi-dimensional point.;public double[] getCoordinates() {_		return this.coordinates__	};returns,the,coordinate,vector,of,a,multi,dimensional,point,return,the,coordinate,vector,of,a,multi,dimensional,point;public,double,get,coordinates,return,this,coordinates
CoordVector -> public CoordVector();1448385411;Initializes a blank coordinate vector. Required for deserialization!;public CoordVector() {_		coordinates = null__	};initializes,a,blank,coordinate,vector,required,for,deserialization;public,coord,vector,coordinates,null
CoordVector -> public CoordVector();1457441341;Initializes a blank coordinate vector. Required for deserialization!;public CoordVector() {_		coordinates = null__	};initializes,a,blank,coordinate,vector,required,for,deserialization;public,coord,vector,coordinates,null
CoordVector -> public CoordVector();1499899067;Initializes a blank coordinate vector. Required for deserialization!;public CoordVector() {_		coordinates = null__	};initializes,a,blank,coordinate,vector,required,for,deserialization;public,coord,vector,coordinates,null
CoordVector -> public CoordVector();1515177485;Initializes a blank coordinate vector. Required for deserialization!;public CoordVector() {_		coordinates = null__	};initializes,a,blank,coordinate,vector,required,for,deserialization;public,coord,vector,coordinates,null
CoordVector -> @Override 	public int compareTo(CoordVector o);1448385411;Compares this coordinate vector to another key.__@return -1 if the other key is not of type CoordVector. If the other_key is also a CoordVector but its length differs from this_coordinates vector, -1 is return if this coordinate vector is_smaller and 1 if it is larger. If both coordinate vectors_have the same length, the coordinates of both are compared._If a coordinate of this coordinate vector is smaller than the_corresponding coordinate of the other vector -1 is returned_and 1 otherwise. If all coordinates are identical 0 is_returned.;@Override_	public int compareTo(CoordVector o) {_		_		if (o.coordinates.length > this.coordinates.length) {_			return -1__		}_		else if (o.coordinates.length < this.coordinates.length) {_			return 1__		}__		_		for (int i = 0_ i < this.coordinates.length_ i++) {_			if (o.coordinates[i] > this.coordinates[i]) {_				return -1__			} else if (o.coordinates[i] < this.coordinates[i]) {_				return 1__			}_		}_		return 0__	};compares,this,coordinate,vector,to,another,key,return,1,if,the,other,key,is,not,of,type,coord,vector,if,the,other,key,is,also,a,coord,vector,but,its,length,differs,from,this,coordinates,vector,1,is,return,if,this,coordinate,vector,is,smaller,and,1,if,it,is,larger,if,both,coordinate,vectors,have,the,same,length,the,coordinates,of,both,are,compared,if,a,coordinate,of,this,coordinate,vector,is,smaller,than,the,corresponding,coordinate,of,the,other,vector,1,is,returned,and,1,otherwise,if,all,coordinates,are,identical,0,is,returned;override,public,int,compare,to,coord,vector,o,if,o,coordinates,length,this,coordinates,length,return,1,else,if,o,coordinates,length,this,coordinates,length,return,1,for,int,i,0,i,this,coordinates,length,i,if,o,coordinates,i,this,coordinates,i,return,1,else,if,o,coordinates,i,this,coordinates,i,return,1,return,0
CoordVector -> @Override 	public int compareTo(CoordVector o);1457441341;Compares this coordinate vector to another key.__@return -1 if the other key is not of type CoordVector. If the other_key is also a CoordVector but its length differs from this_coordinates vector, -1 is return if this coordinate vector is_smaller and 1 if it is larger. If both coordinate vectors_have the same length, the coordinates of both are compared._If a coordinate of this coordinate vector is smaller than the_corresponding coordinate of the other vector -1 is returned_and 1 otherwise. If all coordinates are identical 0 is_returned.;@Override_	public int compareTo(CoordVector o) {_		_		if (o.coordinates.length > this.coordinates.length) {_			return -1__		}_		else if (o.coordinates.length < this.coordinates.length) {_			return 1__		}__		_		for (int i = 0_ i < this.coordinates.length_ i++) {_			if (o.coordinates[i] > this.coordinates[i]) {_				return -1__			} else if (o.coordinates[i] < this.coordinates[i]) {_				return 1__			}_		}_		return 0__	};compares,this,coordinate,vector,to,another,key,return,1,if,the,other,key,is,not,of,type,coord,vector,if,the,other,key,is,also,a,coord,vector,but,its,length,differs,from,this,coordinates,vector,1,is,return,if,this,coordinate,vector,is,smaller,and,1,if,it,is,larger,if,both,coordinate,vectors,have,the,same,length,the,coordinates,of,both,are,compared,if,a,coordinate,of,this,coordinate,vector,is,smaller,than,the,corresponding,coordinate,of,the,other,vector,1,is,returned,and,1,otherwise,if,all,coordinates,are,identical,0,is,returned;override,public,int,compare,to,coord,vector,o,if,o,coordinates,length,this,coordinates,length,return,1,else,if,o,coordinates,length,this,coordinates,length,return,1,for,int,i,0,i,this,coordinates,length,i,if,o,coordinates,i,this,coordinates,i,return,1,else,if,o,coordinates,i,this,coordinates,i,return,1,return,0
CoordVector -> @Override 	public int compareTo(CoordVector o);1499899067;Compares this coordinate vector to another key.__@return -1 if the other key is not of type CoordVector. If the other_key is also a CoordVector but its length differs from this_coordinates vector, -1 is return if this coordinate vector is_smaller and 1 if it is larger. If both coordinate vectors_have the same length, the coordinates of both are compared._If a coordinate of this coordinate vector is smaller than the_corresponding coordinate of the other vector -1 is returned_and 1 otherwise. If all coordinates are identical 0 is_returned.;@Override_	public int compareTo(CoordVector o) {_		_		if (o.coordinates.length > this.coordinates.length) {_			return -1__		}_		else if (o.coordinates.length < this.coordinates.length) {_			return 1__		}__		_		for (int i = 0_ i < this.coordinates.length_ i++) {_			if (o.coordinates[i] > this.coordinates[i]) {_				return -1__			} else if (o.coordinates[i] < this.coordinates[i]) {_				return 1__			}_		}_		return 0__	};compares,this,coordinate,vector,to,another,key,return,1,if,the,other,key,is,not,of,type,coord,vector,if,the,other,key,is,also,a,coord,vector,but,its,length,differs,from,this,coordinates,vector,1,is,return,if,this,coordinate,vector,is,smaller,and,1,if,it,is,larger,if,both,coordinate,vectors,have,the,same,length,the,coordinates,of,both,are,compared,if,a,coordinate,of,this,coordinate,vector,is,smaller,than,the,corresponding,coordinate,of,the,other,vector,1,is,returned,and,1,otherwise,if,all,coordinates,are,identical,0,is,returned;override,public,int,compare,to,coord,vector,o,if,o,coordinates,length,this,coordinates,length,return,1,else,if,o,coordinates,length,this,coordinates,length,return,1,for,int,i,0,i,this,coordinates,length,i,if,o,coordinates,i,this,coordinates,i,return,1,else,if,o,coordinates,i,this,coordinates,i,return,1,return,0
CoordVector -> @Override 	public int compareTo(CoordVector o);1515177485;Compares this coordinate vector to another key.__@return -1 if the other key is not of type CoordVector. If the other_key is also a CoordVector but its length differs from this_coordinates vector, -1 is return if this coordinate vector is_smaller and 1 if it is larger. If both coordinate vectors_have the same length, the coordinates of both are compared._If a coordinate of this coordinate vector is smaller than the_corresponding coordinate of the other vector -1 is returned_and 1 otherwise. If all coordinates are identical 0 is_returned.;@Override_	public int compareTo(CoordVector o) {_		_		if (o.coordinates.length > this.coordinates.length) {_			return -1__		}_		else if (o.coordinates.length < this.coordinates.length) {_			return 1__		}__		_		for (int i = 0_ i < this.coordinates.length_ i++) {_			if (o.coordinates[i] > this.coordinates[i]) {_				return -1__			} else if (o.coordinates[i] < this.coordinates[i]) {_				return 1__			}_		}_		return 0__	};compares,this,coordinate,vector,to,another,key,return,1,if,the,other,key,is,not,of,type,coord,vector,if,the,other,key,is,also,a,coord,vector,but,its,length,differs,from,this,coordinates,vector,1,is,return,if,this,coordinate,vector,is,smaller,and,1,if,it,is,larger,if,both,coordinate,vectors,have,the,same,length,the,coordinates,of,both,are,compared,if,a,coordinate,of,this,coordinate,vector,is,smaller,than,the,corresponding,coordinate,of,the,other,vector,1,is,returned,and,1,otherwise,if,all,coordinates,are,identical,0,is,returned;override,public,int,compare,to,coord,vector,o,if,o,coordinates,length,this,coordinates,length,return,1,else,if,o,coordinates,length,this,coordinates,length,return,1,for,int,i,0,i,this,coordinates,length,i,if,o,coordinates,i,this,coordinates,i,return,1,else,if,o,coordinates,i,this,coordinates,i,return,1,return,0
CoordVector -> public void setCoordinates(double[] coordinates);1448385411;Sets the coordinate vector of a multi-dimensional point.__@param coordinates The dimension values of the point.;public void setCoordinates(double[] coordinates) {_		this.coordinates = coordinates__	};sets,the,coordinate,vector,of,a,multi,dimensional,point,param,coordinates,the,dimension,values,of,the,point;public,void,set,coordinates,double,coordinates,this,coordinates,coordinates
CoordVector -> public void setCoordinates(double[] coordinates);1457441341;Sets the coordinate vector of a multi-dimensional point.__@param coordinates The dimension values of the point.;public void setCoordinates(double[] coordinates) {_		this.coordinates = coordinates__	};sets,the,coordinate,vector,of,a,multi,dimensional,point,param,coordinates,the,dimension,values,of,the,point;public,void,set,coordinates,double,coordinates,this,coordinates,coordinates
CoordVector -> public void setCoordinates(double[] coordinates);1499899067;Sets the coordinate vector of a multi-dimensional point.__@param coordinates The dimension values of the point.;public void setCoordinates(double[] coordinates) {_		this.coordinates = coordinates__	};sets,the,coordinate,vector,of,a,multi,dimensional,point,param,coordinates,the,dimension,values,of,the,point;public,void,set,coordinates,double,coordinates,this,coordinates,coordinates
CoordVector -> public void setCoordinates(double[] coordinates);1515177485;Sets the coordinate vector of a multi-dimensional point.__@param coordinates The dimension values of the point.;public void setCoordinates(double[] coordinates) {_		this.coordinates = coordinates__	};sets,the,coordinate,vector,of,a,multi,dimensional,point,param,coordinates,the,dimension,values,of,the,point;public,void,set,coordinates,double,coordinates,this,coordinates,coordinates
CoordVector -> public CoordVector(Double[] coordinates);1448385411;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(Double[] coordinates) {_		this.coordinates = new double[coordinates.length]__		for (int i = 0_ i < coordinates.length_ i++) {_			this.coordinates[i] = coordinates[i]__		}_	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,new,double,coordinates,length,for,int,i,0,i,coordinates,length,i,this,coordinates,i,coordinates,i
CoordVector -> public CoordVector(Double[] coordinates);1457441341;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(Double[] coordinates) {_		this.coordinates = new double[coordinates.length]__		for (int i = 0_ i < coordinates.length_ i++) {_			this.coordinates[i] = coordinates[i]__		}_	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,new,double,coordinates,length,for,int,i,0,i,coordinates,length,i,this,coordinates,i,coordinates,i
CoordVector -> public CoordVector(Double[] coordinates);1499899067;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(Double[] coordinates) {_		this.coordinates = new double[coordinates.length]__		for (int i = 0_ i < coordinates.length_ i++) {_			this.coordinates[i] = coordinates[i]__		}_	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,new,double,coordinates,length,for,int,i,0,i,coordinates,length,i,this,coordinates,i,coordinates,i
CoordVector -> public CoordVector(Double[] coordinates);1515177485;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(Double[] coordinates) {_		this.coordinates = new double[coordinates.length]__		for (int i = 0_ i < coordinates.length_ i++) {_			this.coordinates[i] = coordinates[i]__		}_	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,new,double,coordinates,length,for,int,i,0,i,coordinates,length,i,this,coordinates,i,coordinates,i
CoordVector -> public CoordVector(double[] coordinates);1448385411;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(double[] coordinates) {_		this.coordinates = coordinates__	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,coordinates
CoordVector -> public CoordVector(double[] coordinates);1457441341;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(double[] coordinates) {_		this.coordinates = coordinates__	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,coordinates
CoordVector -> public CoordVector(double[] coordinates);1499899067;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(double[] coordinates) {_		this.coordinates = coordinates__	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,coordinates
CoordVector -> public CoordVector(double[] coordinates);1515177485;Initializes a coordinate vector.__@param coordinates The coordinate vector of a multi-dimensional point.;public CoordVector(double[] coordinates) {_		this.coordinates = coordinates__	};initializes,a,coordinate,vector,param,coordinates,the,coordinate,vector,of,a,multi,dimensional,point;public,coord,vector,double,coordinates,this,coordinates,coordinates
CoordVector -> public double computeEuclidianDistance(CoordVector cv);1448385411;Computes the Euclidian distance between this coordinate vector and a_second coordinate vector.__@param cv The coordinate vector to which the distance is computed._@return The Euclidian distance to coordinate vector cv. If cv has a_different length than this coordinate vector, -1 is returned.;public double computeEuclidianDistance(CoordVector cv) {_		_		if (cv.coordinates.length != this.coordinates.length) {_			return -1.0__		}__		double quadSum = 0.0__		for (int i = 0_ i < this.coordinates.length_ i++) {_			double diff = this.coordinates[i] - cv.coordinates[i]__			quadSum += diff*diff__		}_		return Math.sqrt(quadSum)__	};computes,the,euclidian,distance,between,this,coordinate,vector,and,a,second,coordinate,vector,param,cv,the,coordinate,vector,to,which,the,distance,is,computed,return,the,euclidian,distance,to,coordinate,vector,cv,if,cv,has,a,different,length,than,this,coordinate,vector,1,is,returned;public,double,compute,euclidian,distance,coord,vector,cv,if,cv,coordinates,length,this,coordinates,length,return,1,0,double,quad,sum,0,0,for,int,i,0,i,this,coordinates,length,i,double,diff,this,coordinates,i,cv,coordinates,i,quad,sum,diff,diff,return,math,sqrt,quad,sum
CoordVector -> public double computeEuclidianDistance(CoordVector cv);1457441341;Computes the Euclidian distance between this coordinate vector and a_second coordinate vector.__@param cv The coordinate vector to which the distance is computed._@return The Euclidian distance to coordinate vector cv. If cv has a_different length than this coordinate vector, -1 is returned.;public double computeEuclidianDistance(CoordVector cv) {_		_		if (cv.coordinates.length != this.coordinates.length) {_			return -1.0__		}__		double quadSum = 0.0__		for (int i = 0_ i < this.coordinates.length_ i++) {_			double diff = this.coordinates[i] - cv.coordinates[i]__			quadSum += diff*diff__		}_		return Math.sqrt(quadSum)__	};computes,the,euclidian,distance,between,this,coordinate,vector,and,a,second,coordinate,vector,param,cv,the,coordinate,vector,to,which,the,distance,is,computed,return,the,euclidian,distance,to,coordinate,vector,cv,if,cv,has,a,different,length,than,this,coordinate,vector,1,is,returned;public,double,compute,euclidian,distance,coord,vector,cv,if,cv,coordinates,length,this,coordinates,length,return,1,0,double,quad,sum,0,0,for,int,i,0,i,this,coordinates,length,i,double,diff,this,coordinates,i,cv,coordinates,i,quad,sum,diff,diff,return,math,sqrt,quad,sum
CoordVector -> public double computeEuclidianDistance(CoordVector cv);1499899067;Computes the Euclidian distance between this coordinate vector and a_second coordinate vector.__@param cv The coordinate vector to which the distance is computed._@return The Euclidian distance to coordinate vector cv. If cv has a_different length than this coordinate vector, -1 is returned.;public double computeEuclidianDistance(CoordVector cv) {_		_		if (cv.coordinates.length != this.coordinates.length) {_			return -1.0__		}__		double quadSum = 0.0__		for (int i = 0_ i < this.coordinates.length_ i++) {_			double diff = this.coordinates[i] - cv.coordinates[i]__			quadSum += diff * diff__		}_		return Math.sqrt(quadSum)__	};computes,the,euclidian,distance,between,this,coordinate,vector,and,a,second,coordinate,vector,param,cv,the,coordinate,vector,to,which,the,distance,is,computed,return,the,euclidian,distance,to,coordinate,vector,cv,if,cv,has,a,different,length,than,this,coordinate,vector,1,is,returned;public,double,compute,euclidian,distance,coord,vector,cv,if,cv,coordinates,length,this,coordinates,length,return,1,0,double,quad,sum,0,0,for,int,i,0,i,this,coordinates,length,i,double,diff,this,coordinates,i,cv,coordinates,i,quad,sum,diff,diff,return,math,sqrt,quad,sum
