# id;timestamp;commentText;codeText;commentWords;codeWords
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1489819457;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE), resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,2,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1489819457;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE), resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,2,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1489819457;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5", "WM:0", "WM:2", "WM:" + Long.MAX_VALUE), resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,2,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,2,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1494867029;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1499899067;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1506334011;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1507799553;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1508846480;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testWatermarkForwarding() throws Exception;1515481551;Verify that watermarks are forwarded to all side outputs.;@Test_	public void testWatermarkForwarding() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<String> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(3)___		DataStream<Integer> dataStream = env.addSource(new SourceFunction<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_				ctx.collectWithTimestamp(1, 0)__				ctx.emitWatermark(new Watermark(0))__				ctx.collectWithTimestamp(2, 1)__				ctx.collectWithTimestamp(5, 2)__				ctx.emitWatermark(new Watermark(2))__				ctx.collectWithTimestamp(3, 3)__				ctx.collectWithTimestamp(4, 4)__			}__			@Override_			public void cancel() {__			}_		})___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		class WatermarkReifier_				extends AbstractStreamOperator<String>_				implements OneInputStreamOperator<String, String> {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(StreamRecord<String> element) throws Exception {_				output.collect(new StreamRecord<>("E:" + element.getValue()))__			}__			@Override_			public void processWatermark(Watermark mark) throws Exception {_				super.processWatermark(mark)__				output.collect(new StreamRecord<>("WM:" + mark.getTimestamp()))__			}_		}__		passThroughtStream_				.getSideOutput(sideOutputTag1)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink1)___		passThroughtStream_				.getSideOutput(sideOutputTag2)_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(sideOutputResultSink2)___		passThroughtStream_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return value.toString()__					}_				})_				.transform("ReifyWatermarks", BasicTypeInfo.STRING_TYPE_INFO, new WatermarkReifier())_				.addSink(resultSink)___		env.execute()___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:sideout-1", "E:sideout-2", "E:sideout-3", "E:sideout-4", "E:sideout-5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				sideOutputResultSink1.getSortedResult())___		assertEquals(_				Arrays.asList("E:1", "E:2", "E:3", "E:4", "E:5",_						"WM:0", "WM:0", "WM:0",_						"WM:2", "WM:2", "WM:2" ,_						"WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE, "WM:" + Long.MAX_VALUE),_				resultSink.getSortedResult())__	};verify,that,watermarks,are,forwarded,to,all,side,outputs;test,public,void,test,watermark,forwarding,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,string,result,sink,new,test,list,result,sink,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,3,data,stream,integer,data,stream,env,add,source,new,source,function,integer,private,static,final,long,serial,version,uid,1l,override,public,void,run,source,context,integer,ctx,throws,exception,ctx,collect,with,timestamp,1,0,ctx,emit,watermark,new,watermark,0,ctx,collect,with,timestamp,2,1,ctx,collect,with,timestamp,5,2,ctx,emit,watermark,new,watermark,2,ctx,collect,with,timestamp,3,3,ctx,collect,with,timestamp,4,4,override,public,void,cancel,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,class,watermark,reifier,extends,abstract,stream,operator,string,implements,one,input,stream,operator,string,string,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,stream,record,string,element,throws,exception,output,collect,new,stream,record,e,element,get,value,override,public,void,process,watermark,watermark,mark,throws,exception,super,process,watermark,mark,output,collect,new,stream,record,wm,mark,get,timestamp,pass,throught,stream,get,side,output,side,output,tag1,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,side,output,result,sink2,pass,throught,stream,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,value,to,string,transform,reify,watermarks,basic,type,info,new,watermark,reifier,add,sink,result,sink,env,execute,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,sideout,1,e,sideout,2,e,sideout,3,e,sideout,4,e,sideout,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,e,1,e,2,e,3,e,4,e,5,wm,0,wm,0,wm,0,wm,2,wm,2,wm,2,wm,long,wm,long,wm,long,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1489819457;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1489819457;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1489819457;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1489819457;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1494867029;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1499899067;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1506334011;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1507799553;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1508846480;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutput() throws Exception;1515481551;Test keyed ProcessFunction side output.;@Test_	public void testKeyedProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,process,function,side,output;test,public,void,test,keyed,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception;1508846480;Test keyed CoProcessFunction side output with multiple consumers.;@Test_	public void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side1"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("side2"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.keyBy(i -> i)_				.connect(ds2.keyBy(i -> i))_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 4) {_							out.collect(value)__							ctx.output(sideOutputTag1, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 4) {_							out.collect(value)__							ctx.output(sideOutputTag2, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1)__		passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout1-3"), sideOutputResultSink1.getSortedResult())__		assertEquals(Arrays.asList("sideout2-4", "sideout2-5"), sideOutputResultSink2.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,co,process,function,side,output,with,multiple,consumers;test,public,void,test,keyed,co,process,function,side,output,with,multiple,consumers,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side1,final,output,tag,string,side,output,tag2,new,output,tag,string,side2,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,key,by,i,i,connect,ds2,key,by,i,i,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag1,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag2,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,add,sink,side,output,result,sink2,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout1,3,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,sideout2,4,sideout2,5,side,output,result,sink2,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception;1515481551;Test keyed CoProcessFunction side output with multiple consumers.;@Test_	public void testKeyedCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side1"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("side2"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.keyBy(i -> i)_				.connect(ds2.keyBy(i -> i))_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 4) {_							out.collect(value)__							ctx.output(sideOutputTag1, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 4) {_							out.collect(value)__							ctx.output(sideOutputTag2, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1)__		passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout1-3"), sideOutputResultSink1.getSortedResult())__		assertEquals(Arrays.asList("sideout2-4", "sideout2-5"), sideOutputResultSink2.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,co,process,function,side,output,with,multiple,consumers;test,public,void,test,keyed,co,process,function,side,output,with,multiple,consumers,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side1,final,output,tag,string,side,output,tag2,new,output,tag,string,side2,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,key,by,i,i,connect,ds2,key,by,i,i,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag1,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag2,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,add,sink,side,output,result,sink2,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout1,3,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,sideout2,4,sideout2,5,side,output,result,sink2,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception;1508846480;Test CoProcessFunction side output with multiple consumers.;@Test_	public void testCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side1"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("side2"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.connect(ds2)_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 4) {_							out.collect(value)__							ctx.output(sideOutputTag1, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 4) {_							out.collect(value)__							ctx.output(sideOutputTag2, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1)__		passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout1-3"), sideOutputResultSink1.getSortedResult())__		assertEquals(Arrays.asList("sideout2-4", "sideout2-5"), sideOutputResultSink2.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,co,process,function,side,output,with,multiple,consumers;test,public,void,test,co,process,function,side,output,with,multiple,consumers,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side1,final,output,tag,string,side,output,tag2,new,output,tag,string,side2,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,connect,ds2,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag1,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag2,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,add,sink,side,output,result,sink2,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout1,3,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,sideout2,4,sideout2,5,side,output,result,sink2,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception;1515481551;Test CoProcessFunction side output with multiple consumers.;@Test_	public void testCoProcessFunctionSideOutputWithMultipleConsumers() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side1"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("side2"){}___		TestListResultSink<String> sideOutputResultSink1 = new TestListResultSink<>()__		TestListResultSink<String> sideOutputResultSink2 = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.connect(ds2)_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 4) {_							out.collect(value)__							ctx.output(sideOutputTag1, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 4) {_							out.collect(value)__							ctx.output(sideOutputTag2, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1)__		passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout1-3"), sideOutputResultSink1.getSortedResult())__		assertEquals(Arrays.asList("sideout2-4", "sideout2-5"), sideOutputResultSink2.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,co,process,function,side,output,with,multiple,consumers;test,public,void,test,co,process,function,side,output,with,multiple,consumers,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side1,final,output,tag,string,side,output,tag2,new,output,tag,string,side2,test,list,result,sink,string,side,output,result,sink1,new,test,list,result,sink,test,list,result,sink,string,side,output,result,sink2,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,connect,ds2,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag1,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,4,out,collect,value,ctx,output,side,output,tag2,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink1,pass,throught,stream,get,side,output,side,output,tag2,add,sink,side,output,result,sink2,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout1,3,side,output,result,sink1,get,sorted,result,assert,equals,arrays,as,list,sideout2,4,sideout2,5,side,output,result,sink2,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test keyed ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(otherSideOutputTag, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,keyed,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,keyed,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,other,side,output,tag,sideout,string,value,of,value,get,side,output,side,output,tag,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test keyed ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,keyed,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,keyed,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test keyed ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testKeyedProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.keyBy(new KeySelector<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer getKey(Integer value) throws Exception {_						return value__					}_				})_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,keyed,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,keyed,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,key,by,new,key,selector,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,get,key,integer,value,throws,exception,return,value,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedCoProcessFunctionSideOutput() throws Exception;1508846480;Test keyed CoProcessFunction side output.;@Test_	public void testKeyedCoProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.keyBy(i -> i)_				.connect(ds2.keyBy(i -> i))_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout2-3", "sideout2-4", "sideout2-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,co,process,function,side,output;test,public,void,test,keyed,co,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,key,by,i,i,connect,ds2,key,by,i,i,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout2,3,sideout2,4,sideout2,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testKeyedCoProcessFunctionSideOutput() throws Exception;1515481551;Test keyed CoProcessFunction side output.;@Test_	public void testKeyedCoProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.keyBy(i -> i)_				.connect(ds2.keyBy(i -> i))_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout2-3", "sideout2-4", "sideout2-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,keyed,co,process,function,side,output;test,public,void,test,keyed,co,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,key,by,i,i,connect,ds2,key,by,i,i,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout2,3,sideout2,4,sideout2,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1489819457;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1489819457;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1489819457;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1489819457;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1489819457;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1494867029;Test window late arriving events stream;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L__					_					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for(Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1499899067;Test window late arriving events stream.;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for (Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1506334011;Test window late arriving events stream.;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for (Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1507799553;Test window late arriving events stream.;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for (Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1508846480;Test window late arriving events stream.;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for (Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testAllWindowLateArrivingEvents() throws Exception;1515481551;Test window late arriving events stream.;@Test_	public void testAllWindowLateArrivingEvents() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(1)__		see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		OutputTag<Integer> lateDataTag = new OutputTag<Integer>("late"){}___		SingleOutputStreamOperator<Integer> windowOperator = dataStream_				.assignTimestampsAndWatermarks(new TestWatermarkAssigner())_				.timeWindowAll(Time.milliseconds(1), Time.milliseconds(1))_				.sideOutputLateData(lateDataTag)_				.apply(new AllWindowFunction<Integer, Integer, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(TimeWindow window, Iterable<Integer> values, Collector<Integer> out) throws Exception {_							for (Integer val : values) {_								out.collect(val)__							}_					}_				})___		windowOperator_				.getSideOutput(lateDataTag)_				.flatMap(new FlatMapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap(Integer value, Collector<String> out) throws Exception {_						out.collect("late-" + String.valueOf(value))__					}_				})_				.addSink(sideOutputResultSink)___		see.execute()__		assertEquals(sideOutputResultSink.getSortedResult(), Arrays.asList("late-3", "late-4"))___	};test,window,late,arriving,events,stream;test,public,void,test,all,window,late,arriving,events,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,1,see,set,stream,time,characteristic,time,characteristic,event,time,data,stream,integer,data,stream,see,from,collection,elements,output,tag,integer,late,data,tag,new,output,tag,integer,late,single,output,stream,operator,integer,window,operator,data,stream,assign,timestamps,and,watermarks,new,test,watermark,assigner,time,window,all,time,milliseconds,1,time,milliseconds,1,side,output,late,data,late,data,tag,apply,new,all,window,function,integer,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,integer,values,collector,integer,out,throws,exception,for,integer,val,values,out,collect,val,window,operator,get,side,output,late,data,tag,flat,map,new,flat,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,integer,value,collector,string,out,throws,exception,out,collect,late,string,value,of,value,add,sink,side,output,result,sink,see,execute,assert,equals,side,output,result,sink,get,sorted,result,arrays,as,list,late,3,late,4
SideOutputITCase -> @Test 	public void testCoProcessFunctionSideOutput() throws Exception;1508846480;Test CoProcessFunction side output.;@Test_	public void testCoProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.connect(ds2)_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout2-3", "sideout2-4", "sideout2-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,co,process,function,side,output;test,public,void,test,co,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,connect,ds2,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout2,3,sideout2,4,sideout2,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testCoProcessFunctionSideOutput() throws Exception;1515481551;Test CoProcessFunction side output.;@Test_	public void testCoProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> ds1 = see.fromCollection(elements)__		DataStream<Integer> ds2 = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = ds1_				.connect(ds2)_				.process(new CoProcessFunction<Integer, Integer, Integer>() {_					@Override_					public void processElement1(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value < 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout1-" + String.valueOf(value))__						}_					}__					@Override_					public void processElement2(Integer value, Context ctx, Collector<Integer> out) throws Exception {_						if (value >= 3) {_							out.collect(value)__							ctx.output(sideOutputTag, "sideout2-" + String.valueOf(value))__						}_					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout1-1", "sideout1-2", "sideout2-3", "sideout2-4", "sideout2-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,co,process,function,side,output;test,public,void,test,co,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,ds1,see,from,collection,elements,data,stream,integer,ds2,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,ds1,connect,ds2,process,new,co,process,function,integer,integer,integer,override,public,void,process,element1,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout1,string,value,of,value,override,public,void,process,element2,integer,value,context,ctx,collector,integer,out,throws,exception,if,value,3,out,collect,value,ctx,output,side,output,tag,sideout2,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout1,1,sideout1,2,sideout2,3,sideout2,4,sideout2,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1489819457;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1489819457;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1489819457;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag1, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag1,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag1,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1489819457;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1494867029;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1499899067;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1506334011;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1507799553;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1508846480;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutput() throws Exception;1515481551;Test ProcessFunction side output.;@Test_	public void testProcessFunctionSideOutput() throws Exception {_		final OutputTag<String> sideOutputTag = new OutputTag<String>("side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()__		TestListResultSink<Integer> resultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		SingleOutputStreamOperator<Integer> passThroughtStream = dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag, "sideout-" + String.valueOf(value))__					}_				})___		passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink)__		passThroughtStream.addSink(resultSink)__		see.execute()___		assertEquals(Arrays.asList("sideout-1", "sideout-2", "sideout-3", "sideout-4", "sideout-5"), sideOutputResultSink.getSortedResult())__		assertEquals(Arrays.asList(1, 2, 3, 4, 5), resultSink.getSortedResult())__	};test,process,function,side,output;test,public,void,test,process,function,side,output,throws,exception,final,output,tag,string,side,output,tag,new,output,tag,string,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,test,list,result,sink,integer,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,single,output,stream,operator,integer,pass,throught,stream,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag,sideout,string,value,of,value,pass,throught,stream,get,side,output,side,output,tag,add,sink,side,output,result,sink,pass,throught,stream,add,sink,result,sink,see,execute,assert,equals,arrays,as,list,sideout,1,sideout,2,sideout,3,sideout,4,sideout,5,side,output,result,sink,get,sorted,result,assert,equals,arrays,as,list,1,2,3,4,5,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(otherSideOutputTag, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,other,side,output,tag,sideout,string,value,of,value,get,side,output,side,output,tag,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1489819457;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1494867029;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1499899067;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1506334011;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1507799553;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1508846480;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
SideOutputITCase -> @Test 	public void testProcessFunctionSideOutputWithWrongTag() throws Exception;1515481551;Test ProcessFunction side outputs with wrong {@code OutputTag}.;@Test_	public void testProcessFunctionSideOutputWithWrongTag() throws Exception {_		final OutputTag<String> sideOutputTag1 = new OutputTag<String>("side"){}__		final OutputTag<String> sideOutputTag2 = new OutputTag<String>("other-side"){}___		TestListResultSink<String> sideOutputResultSink = new TestListResultSink<>()___		StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment()__		see.setParallelism(3)___		DataStream<Integer> dataStream = see.fromCollection(elements)___		dataStream_				.process(new ProcessFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public void processElement(_							Integer value, Context ctx, Collector<Integer> out) throws Exception {_						out.collect(value)__						ctx.output(sideOutputTag2, "sideout-" + String.valueOf(value))__					}_				}).getSideOutput(sideOutputTag1).addSink(sideOutputResultSink)___		see.execute()___		assertEquals(Arrays.asList(), sideOutputResultSink.getSortedResult())__	};test,process,function,side,outputs,with,wrong,code,output,tag;test,public,void,test,process,function,side,output,with,wrong,tag,throws,exception,final,output,tag,string,side,output,tag1,new,output,tag,string,side,final,output,tag,string,side,output,tag2,new,output,tag,string,other,side,test,list,result,sink,string,side,output,result,sink,new,test,list,result,sink,stream,execution,environment,see,stream,execution,environment,get,execution,environment,see,set,parallelism,3,data,stream,integer,data,stream,see,from,collection,elements,data,stream,process,new,process,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,integer,value,context,ctx,collector,integer,out,throws,exception,out,collect,value,ctx,output,side,output,tag2,sideout,string,value,of,value,get,side,output,side,output,tag1,add,sink,side,output,result,sink,see,execute,assert,equals,arrays,as,list,side,output,result,sink,get,sorted,result
