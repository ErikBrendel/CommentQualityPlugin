# id;timestamp;commentText;codeText;commentWords;codeWords
SessionEventGeneratorImpl -> @Override 	public boolean hasMoreEvents();1468773073;@see EventGenerator;@Override_	public boolean hasMoreEvents() {_		return producedEventsCount < getAllEventsCount()__	};see,event,generator;override,public,boolean,has,more,events,return,produced,events,count,get,all,events,count
SessionEventGeneratorImpl -> @Override 	public boolean hasMoreEvents();1469010023;@see EventGenerator;@Override_	public boolean hasMoreEvents() {_		return producedEventsCount < getAllEventsCount()__	};see,event,generator;override,public,boolean,has,more,events,return,produced,events,count,get,all,events,count
SessionEventGeneratorImpl -> @Override 	public boolean hasMoreEvents();1496173247;@see EventGenerator;@Override_	public boolean hasMoreEvents() {_		return producedEventsCount < getAllEventsCount()__	};see,event,generator;override,public,boolean,has,more,events,return,produced,events,count,get,all,events,count
SessionEventGeneratorImpl -> private boolean isTriggered(long globalWatermark);1468773073;@param globalWatermark_@return true if the session window for this session has already triggered at global watermark;private boolean isTriggered(long globalWatermark) {_		return globalWatermark >= maxTimestamp + getGap() - 1__	};param,global,watermark,return,true,if,the,session,window,for,this,session,has,already,triggered,at,global,watermark;private,boolean,is,triggered,long,global,watermark,return,global,watermark,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private boolean isTriggered(long globalWatermark);1469010023;@param globalWatermark the current global watermark_@return true if the session window for this session has already triggered at global watermark;private boolean isTriggered(long globalWatermark) {_		return globalWatermark >= maxTimestamp + getGap() - 1__	};param,global,watermark,the,current,global,watermark,return,true,if,the,session,window,for,this,session,has,already,triggered,at,global,watermark;private,boolean,is,triggered,long,global,watermark,return,global,watermark,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private boolean isTriggered(long globalWatermark);1496173247;@param globalWatermark the current global watermark_@return true if the session window for this session has already triggered at global watermark;private boolean isTriggered(long globalWatermark) {_		return globalWatermark >= maxTimestamp + getGap() - 1__	};param,global,watermark,the,current,global,watermark,return,true,if,the,session,window,for,this,session,has,already,triggered,at,global,watermark;private,boolean,is,triggered,long,global,watermark,return,global,watermark,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private long getTriggerTimestamp();1468773073;@return timestamp of the watermark at which the window for this session will trigger;private long getTriggerTimestamp() {_		return maxTimestamp + getGap() - 1__	};return,timestamp,of,the,watermark,at,which,the,window,for,this,session,will,trigger;private,long,get,trigger,timestamp,return,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private long getTriggerTimestamp();1469010023;@return timestamp of the watermark at which the window for this session will trigger;private long getTriggerTimestamp() {_		return maxTimestamp + getGap() - 1__	};return,timestamp,of,the,watermark,at,which,the,window,for,this,session,will,trigger;private,long,get,trigger,timestamp,return,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private long getTriggerTimestamp();1496173247;@return timestamp of the watermark at which the window for this session will trigger;private long getTriggerTimestamp() {_		return maxTimestamp + getGap() - 1__	};return,timestamp,of,the,watermark,at,which,the,window,for,this,session,will,trigger;private,long,get,trigger,timestamp,return,max,timestamp,get,gap,1
SessionEventGeneratorImpl -> private long generateTimelyInSessionTimestamp();1469010023;@return a timestamp in the session that is timely;private long generateTimelyInSessionTimestamp() {_		int chosenTimestampIndex = randomGenerator.choseRandomIndex(orderedTimelyTimestamps)__		_		_		return orderedTimelyTimestamps.remove(chosenTimestampIndex)__	};return,a,timestamp,in,the,session,that,is,timely;private,long,generate,timely,in,session,timestamp,int,chosen,timestamp,index,random,generator,chose,random,index,ordered,timely,timestamps,return,ordered,timely,timestamps,remove,chosen,timestamp,index
SessionEventGeneratorImpl -> private long generateTimelyInSessionTimestamp();1496173247;@return a timestamp in the session that is timely;private long generateTimelyInSessionTimestamp() {_		int chosenTimestampIndex = randomGenerator.choseRandomIndex(orderedTimelyTimestamps)__		_		_		return orderedTimelyTimestamps.remove(chosenTimestampIndex)__	};return,a,timestamp,in,the,session,that,is,timely;private,long,generate,timely,in,session,timestamp,int,chosen,timestamp,index,random,generator,chose,random,index,ordered,timely,timestamps,return,ordered,timely,timestamps,remove,chosen,timestamp,index
SessionEventGeneratorImpl -> @Override 	public EventGenerator<K, E> getNextGenerator(long globalWatermark);1468773073;@see EventGenerator;@Override_	public EventGenerator<K, E> getNextGenerator(long globalWatermark) {_		StreamConfiguration streamConfiguration = configuration.getStreamConfiguration()__		SessionConfiguration<K, E> sessionConfiguration = configuration.getSessionConfiguration()___		_		long maxAdditionalGap = streamConfiguration.getMaxAdditionalSessionGap()__		long nextStartTime = Math.max(_				getAfterLatenessTimestamp() + randomGenerator.randomLongBetween(0, maxAdditionalGap),_				globalWatermark)___		sessionConfiguration = configuration.getSessionConfiguration().getFollowupSessionConfiguration(nextStartTime)__		SessionStreamConfiguration<K, E> sessionStreamConfiguration =_				new SessionStreamConfiguration<>(sessionConfiguration, streamConfiguration)___		return new SessionEventGeneratorImpl<>(sessionStreamConfiguration, randomGenerator)__	};see,event,generator;override,public,event,generator,k,e,get,next,generator,long,global,watermark,stream,configuration,stream,configuration,configuration,get,stream,configuration,session,configuration,k,e,session,configuration,configuration,get,session,configuration,long,max,additional,gap,stream,configuration,get,max,additional,session,gap,long,next,start,time,math,max,get,after,lateness,timestamp,random,generator,random,long,between,0,max,additional,gap,global,watermark,session,configuration,configuration,get,session,configuration,get,followup,session,configuration,next,start,time,session,stream,configuration,k,e,session,stream,configuration,new,session,stream,configuration,session,configuration,stream,configuration,return,new,session,event,generator,impl,session,stream,configuration,random,generator
SessionEventGeneratorImpl -> @Override 	public EventGenerator<K, E> getNextGenerator(long globalWatermark);1469010023;@see EventGenerator;@Override_	public EventGenerator<K, E> getNextGenerator(long globalWatermark) {_		GeneratorConfiguration generatorConfiguration = configuration.getGeneratorConfiguration()__		SessionConfiguration<K, E> sessionConfiguration = configuration.getSessionConfiguration()___		_		long maxAdditionalGap = generatorConfiguration.getMaxAdditionalSessionGap()__		long nextStartTime = Math.max(_				getAfterLatenessTimestamp() + randomGenerator.randomLongBetween(0, maxAdditionalGap),_				globalWatermark)___		sessionConfiguration = sessionConfiguration.getFollowupSessionConfiguration(nextStartTime)__		SessionGeneratorConfiguration<K, E> sessionGeneratorConfiguration =_				new SessionGeneratorConfiguration<>(sessionConfiguration, generatorConfiguration)___		return new SessionEventGeneratorImpl<>(sessionGeneratorConfiguration, randomGenerator)__	};see,event,generator;override,public,event,generator,k,e,get,next,generator,long,global,watermark,generator,configuration,generator,configuration,configuration,get,generator,configuration,session,configuration,k,e,session,configuration,configuration,get,session,configuration,long,max,additional,gap,generator,configuration,get,max,additional,session,gap,long,next,start,time,math,max,get,after,lateness,timestamp,random,generator,random,long,between,0,max,additional,gap,global,watermark,session,configuration,session,configuration,get,followup,session,configuration,next,start,time,session,generator,configuration,k,e,session,generator,configuration,new,session,generator,configuration,session,configuration,generator,configuration,return,new,session,event,generator,impl,session,generator,configuration,random,generator
SessionEventGeneratorImpl -> @Override 	public EventGenerator<K, E> getNextGenerator(long globalWatermark);1496173247;@see EventGenerator;@Override_	public EventGenerator<K, E> getNextGenerator(long globalWatermark) {_		GeneratorConfiguration generatorConfiguration = configuration.getGeneratorConfiguration()__		SessionConfiguration<K, E> sessionConfiguration = configuration.getSessionConfiguration()___		_		long maxAdditionalGap = generatorConfiguration.getMaxAdditionalSessionGap()__		long nextStartTime = Math.max(_				getAfterLatenessTimestamp() + randomGenerator.randomLongBetween(0, maxAdditionalGap),_				globalWatermark)___		sessionConfiguration = sessionConfiguration.getFollowupSessionConfiguration(nextStartTime)__		SessionGeneratorConfiguration<K, E> sessionGeneratorConfiguration =_				new SessionGeneratorConfiguration<>(sessionConfiguration, generatorConfiguration)___		return new SessionEventGeneratorImpl<>(sessionGeneratorConfiguration, randomGenerator)__	};see,event,generator;override,public,event,generator,k,e,get,next,generator,long,global,watermark,generator,configuration,generator,configuration,configuration,get,generator,configuration,session,configuration,k,e,session,configuration,configuration,get,session,configuration,long,max,additional,gap,generator,configuration,get,max,additional,session,gap,long,next,start,time,math,max,get,after,lateness,timestamp,random,generator,random,long,between,0,max,additional,gap,global,watermark,session,configuration,session,configuration,get,followup,session,configuration,next,start,time,session,generator,configuration,k,e,session,generator,configuration,new,session,generator,configuration,session,configuration,generator,configuration,return,new,session,event,generator,impl,session,generator,configuration,random,generator
SessionEventGeneratorImpl -> private long generateArbitraryInSessionTimestamp();1469010023;@return a timestamp in the session;private long generateArbitraryInSessionTimestamp() {_		return randomGenerator.randomLongBetween(minTimestamp, maxTimestamp + 1)__	};return,a,timestamp,in,the,session;private,long,generate,arbitrary,in,session,timestamp,return,random,generator,random,long,between,min,timestamp,max,timestamp,1
SessionEventGeneratorImpl -> private long generateArbitraryInSessionTimestamp();1496173247;@return a timestamp in the session;private long generateArbitraryInSessionTimestamp() {_		return randomGenerator.randomLongBetween(minTimestamp, maxTimestamp + 1)__	};return,a,timestamp,in,the,session;private,long,generate,arbitrary,in,session,timestamp,return,random,generator,random,long,between,min,timestamp,max,timestamp,1
SessionEventGeneratorImpl -> private boolean isAfterLateness(long globalWatermark);1468773073;@param globalWatermark_@return true if all future generated events are after lateness w.r.t global watermark;private boolean isAfterLateness(long globalWatermark) {_		return globalWatermark >= getAfterLatenessTimestamp()__	};param,global,watermark,return,true,if,all,future,generated,events,are,after,lateness,w,r,t,global,watermark;private,boolean,is,after,lateness,long,global,watermark,return,global,watermark,get,after,lateness,timestamp
SessionEventGeneratorImpl -> private boolean isAfterLateness(long globalWatermark);1469010023;@param globalWatermark the current global watermark_@return true if all future generated events are after lateness w.r.t global watermark;private boolean isAfterLateness(long globalWatermark) {_		return globalWatermark >= getAfterLatenessTimestamp()__	};param,global,watermark,the,current,global,watermark,return,true,if,all,future,generated,events,are,after,lateness,w,r,t,global,watermark;private,boolean,is,after,lateness,long,global,watermark,return,global,watermark,get,after,lateness,timestamp
SessionEventGeneratorImpl -> private boolean isAfterLateness(long globalWatermark);1496173247;@param globalWatermark the current global watermark_@return true if all future generated events are after lateness w.r.t global watermark;private boolean isAfterLateness(long globalWatermark) {_		return globalWatermark >= getAfterLatenessTimestamp()__	};param,global,watermark,the,current,global,watermark,return,true,if,all,future,generated,events,are,after,lateness,w,r,t,global,watermark;private,boolean,is,after,lateness,long,global,watermark,return,global,watermark,get,after,lateness,timestamp
SessionEventGeneratorImpl -> private long getAfterLatenessTimestamp();1468773073;@return timestamp of the watermark at events for this session are after the lateness;private long getAfterLatenessTimestamp() {_		return getTriggerTimestamp() + getLateness()__	};return,timestamp,of,the,watermark,at,events,for,this,session,are,after,the,lateness;private,long,get,after,lateness,timestamp,return,get,trigger,timestamp,get,lateness
SessionEventGeneratorImpl -> private long getAfterLatenessTimestamp();1469010023;@return timestamp of the watermark at events for this session are after the lateness;private long getAfterLatenessTimestamp() {_		return getTriggerTimestamp() + getLateness()__	};return,timestamp,of,the,watermark,at,events,for,this,session,are,after,the,lateness;private,long,get,after,lateness,timestamp,return,get,trigger,timestamp,get,lateness
SessionEventGeneratorImpl -> private long getAfterLatenessTimestamp();1496173247;@return timestamp of the watermark at events for this session are after the lateness;private long getAfterLatenessTimestamp() {_		return getTriggerTimestamp() + getLateness()__	};return,timestamp,of,the,watermark,at,events,for,this,session,are,after,the,lateness;private,long,get,after,lateness,timestamp,return,get,trigger,timestamp,get,lateness
SessionEventGeneratorImpl -> @Override 	public long getLocalWatermark();1468773073;@see EventGenerator;@Override_	public long getLocalWatermark() {_		return timingAwareEventGenerator.getLocalWatermark()__	};see,event,generator;override,public,long,get,local,watermark,return,timing,aware,event,generator,get,local,watermark
SessionEventGeneratorImpl -> @Override 	public long getLocalWatermark();1469010023;@see EventGenerator;@Override_	public long getLocalWatermark() {_		return timingAwareEventGenerator.getLocalWatermark()__	};see,event,generator;override,public,long,get,local,watermark,return,timing,aware,event,generator,get,local,watermark
SessionEventGeneratorImpl -> @Override 	public long getLocalWatermark();1496173247;@see EventGenerator;@Override_	public long getLocalWatermark() {_		return timingAwareEventGenerator.getLocalWatermark()__	};see,event,generator;override,public,long,get,local,watermark,return,timing,aware,event,generator,get,local,watermark
SessionEventGeneratorImpl -> private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession);1468773073;pre-computes and stores the timestamps for timely events in this session in a list (ordered)__@param minTimestamp              the minimum event time in the session_@param onTimeEventCountInSession the number of timestamps to generate;private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession) {_		long generatedTimestamp = minTimestamp___		for (int i = 1_ i < onTimeEventCountInSession_ ++i) {_			orderedTimelyTimestamps.add(generatedTimestamp)__			generatedTimestamp += randomGenerator.randomLongBetween(0, getGap() - 1)__		}__		orderedTimelyTimestamps.add(generatedTimestamp)__	};pre,computes,and,stores,the,timestamps,for,timely,events,in,this,session,in,a,list,ordered,param,min,timestamp,the,minimum,event,time,in,the,session,param,on,time,event,count,in,session,the,number,of,timestamps,to,generate;private,void,generate,ordered,timely,timestamps,long,min,timestamp,int,on,time,event,count,in,session,long,generated,timestamp,min,timestamp,for,int,i,1,i,on,time,event,count,in,session,i,ordered,timely,timestamps,add,generated,timestamp,generated,timestamp,random,generator,random,long,between,0,get,gap,1,ordered,timely,timestamps,add,generated,timestamp
SessionEventGeneratorImpl -> private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession);1469010023;pre-computes and stores the timestamps for timely events in this session in a list (ordered)__@param minTimestamp              the minimum event time in the session_@param onTimeEventCountInSession the number of timestamps to generate;private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession) {_		long generatedTimestamp = minTimestamp___		for (int i = 1_ i < onTimeEventCountInSession_ ++i) {_			orderedTimelyTimestamps.add(generatedTimestamp)__			generatedTimestamp += randomGenerator.randomLongBetween(0, getGap() - 1)__		}__		orderedTimelyTimestamps.add(generatedTimestamp)__	};pre,computes,and,stores,the,timestamps,for,timely,events,in,this,session,in,a,list,ordered,param,min,timestamp,the,minimum,event,time,in,the,session,param,on,time,event,count,in,session,the,number,of,timestamps,to,generate;private,void,generate,ordered,timely,timestamps,long,min,timestamp,int,on,time,event,count,in,session,long,generated,timestamp,min,timestamp,for,int,i,1,i,on,time,event,count,in,session,i,ordered,timely,timestamps,add,generated,timestamp,generated,timestamp,random,generator,random,long,between,0,get,gap,1,ordered,timely,timestamps,add,generated,timestamp
SessionEventGeneratorImpl -> private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession);1496173247;Pre-computes and stores the timestamps for timely events in this session in a list (ordered).__@param minTimestamp              the minimum event time in the session_@param onTimeEventCountInSession the number of timestamps to generate;private void generateOrderedTimelyTimestamps(long minTimestamp, int onTimeEventCountInSession) {_		long generatedTimestamp = minTimestamp___		for (int i = 1_ i < onTimeEventCountInSession_ ++i) {_			orderedTimelyTimestamps.add(generatedTimestamp)__			generatedTimestamp += randomGenerator.randomLongBetween(0, getGap() - 1)__		}__		orderedTimelyTimestamps.add(generatedTimestamp)__	};pre,computes,and,stores,the,timestamps,for,timely,events,in,this,session,in,a,list,ordered,param,min,timestamp,the,minimum,event,time,in,the,session,param,on,time,event,count,in,session,the,number,of,timestamps,to,generate;private,void,generate,ordered,timely,timestamps,long,min,timestamp,int,on,time,event,count,in,session,long,generated,timestamp,min,timestamp,for,int,i,1,i,on,time,event,count,in,session,i,ordered,timely,timestamps,add,generated,timestamp,generated,timestamp,random,generator,random,long,between,0,get,gap,1,ordered,timely,timestamps,add,generated,timestamp
SessionEventGeneratorImpl -> public SessionEventGeneratorImpl( 			SessionGeneratorConfiguration<K, E> configuration, LongRandomGenerator randomGenerator);1469010023;@param configuration   session generator configuration_@param randomGenerator random engine for the event generation;public SessionEventGeneratorImpl(_			SessionGeneratorConfiguration<K, E> configuration, LongRandomGenerator randomGenerator) {_		Preconditions.checkNotNull(configuration)__		Preconditions.checkNotNull(randomGenerator)___		this.producedEventsCount = 0__		this.configuration = configuration__		this.randomGenerator = randomGenerator___		_		final int timelyEventsInSessionCount = configuration.getSessionConfiguration().getNumberOfTimelyEvents()__		this.orderedTimelyTimestamps = new ArrayList<>(timelyEventsInSessionCount)__		this.minTimestamp = configuration.getSessionConfiguration().getMinEventTimestamp()__		generateOrderedTimelyTimestamps(minTimestamp, timelyEventsInSessionCount)__		this.maxTimestamp = orderedTimelyTimestamps.get(orderedTimelyTimestamps.size() - 1)__		this.timingAwareEventGenerator = new TimelyGenerator()__	};param,configuration,session,generator,configuration,param,random,generator,random,engine,for,the,event,generation;public,session,event,generator,impl,session,generator,configuration,k,e,configuration,long,random,generator,random,generator,preconditions,check,not,null,configuration,preconditions,check,not,null,random,generator,this,produced,events,count,0,this,configuration,configuration,this,random,generator,random,generator,final,int,timely,events,in,session,count,configuration,get,session,configuration,get,number,of,timely,events,this,ordered,timely,timestamps,new,array,list,timely,events,in,session,count,this,min,timestamp,configuration,get,session,configuration,get,min,event,timestamp,generate,ordered,timely,timestamps,min,timestamp,timely,events,in,session,count,this,max,timestamp,ordered,timely,timestamps,get,ordered,timely,timestamps,size,1,this,timing,aware,event,generator,new,timely,generator
SessionEventGeneratorImpl -> public SessionEventGeneratorImpl( 			SessionGeneratorConfiguration<K, E> configuration, LongRandomGenerator randomGenerator);1496173247;@param configuration   session generator configuration_@param randomGenerator random engine for the event generation;public SessionEventGeneratorImpl(_			SessionGeneratorConfiguration<K, E> configuration, LongRandomGenerator randomGenerator) {_		Preconditions.checkNotNull(configuration)__		Preconditions.checkNotNull(randomGenerator)___		this.producedEventsCount = 0__		this.configuration = configuration__		this.randomGenerator = randomGenerator___		_		final int timelyEventsInSessionCount = configuration.getSessionConfiguration().getNumberOfTimelyEvents()__		this.orderedTimelyTimestamps = new ArrayList<>(timelyEventsInSessionCount)__		this.minTimestamp = configuration.getSessionConfiguration().getMinEventTimestamp()__		generateOrderedTimelyTimestamps(minTimestamp, timelyEventsInSessionCount)__		this.maxTimestamp = orderedTimelyTimestamps.get(orderedTimelyTimestamps.size() - 1)__		this.timingAwareEventGenerator = new TimelyGenerator()__	};param,configuration,session,generator,configuration,param,random,generator,random,engine,for,the,event,generation;public,session,event,generator,impl,session,generator,configuration,k,e,configuration,long,random,generator,random,generator,preconditions,check,not,null,configuration,preconditions,check,not,null,random,generator,this,produced,events,count,0,this,configuration,configuration,this,random,generator,random,generator,final,int,timely,events,in,session,count,configuration,get,session,configuration,get,number,of,timely,events,this,ordered,timely,timestamps,new,array,list,timely,events,in,session,count,this,min,timestamp,configuration,get,session,configuration,get,min,event,timestamp,generate,ordered,timely,timestamps,min,timestamp,timely,events,in,session,count,this,max,timestamp,ordered,timely,timestamps,get,ordered,timely,timestamps,size,1,this,timing,aware,event,generator,new,timely,generator
SessionEventGeneratorImpl -> @Override 	public boolean canGenerateEventAtWatermark(long globalWatermark);1469010023;@see EventGenerator;@Override_	public boolean canGenerateEventAtWatermark(long globalWatermark) {_		return timingAwareEventGenerator.canGenerateEventAtWatermark(globalWatermark)__	};see,event,generator;override,public,boolean,can,generate,event,at,watermark,long,global,watermark,return,timing,aware,event,generator,can,generate,event,at,watermark,global,watermark
SessionEventGeneratorImpl -> @Override 	public boolean canGenerateEventAtWatermark(long globalWatermark);1496173247;@see EventGenerator;@Override_	public boolean canGenerateEventAtWatermark(long globalWatermark) {_		return timingAwareEventGenerator.canGenerateEventAtWatermark(globalWatermark)__	};see,event,generator;override,public,boolean,can,generate,event,at,watermark,long,global,watermark,return,timing,aware,event,generator,can,generate,event,at,watermark,global,watermark
SessionEventGeneratorImpl -> @Override 	public E generateEvent(long globalWatermark);1468773073;@see EventGenerator;@Override_	public E generateEvent(long globalWatermark) {_		if (hasMoreEvents()) {_			++producedEventsCount__			E event = timingAwareEventGenerator.generateEvent(globalWatermark)___			while (!timingAwareEventGenerator.hasMoreEvents()) {_				timingAwareEventGenerator = timingAwareEventGenerator.getNextGenerator(globalWatermark)__			}__			return event__		} else {_			throw new IllegalStateException("All events exhausted")__		}_	};see,event,generator;override,public,e,generate,event,long,global,watermark,if,has,more,events,produced,events,count,e,event,timing,aware,event,generator,generate,event,global,watermark,while,timing,aware,event,generator,has,more,events,timing,aware,event,generator,timing,aware,event,generator,get,next,generator,global,watermark,return,event,else,throw,new,illegal,state,exception,all,events,exhausted
SessionEventGeneratorImpl -> @Override 	public E generateEvent(long globalWatermark);1469010023;@see EventGenerator;@Override_	public E generateEvent(long globalWatermark) {_		if (hasMoreEvents()) {_			++producedEventsCount__			E event = timingAwareEventGenerator.generateEvent(globalWatermark)___			while (!timingAwareEventGenerator.hasMoreEvents()) {_				timingAwareEventGenerator = timingAwareEventGenerator.getNextGenerator(globalWatermark)__			}__			return event__		} else {_			throw new IllegalStateException("All events exhausted")__		}_	};see,event,generator;override,public,e,generate,event,long,global,watermark,if,has,more,events,produced,events,count,e,event,timing,aware,event,generator,generate,event,global,watermark,while,timing,aware,event,generator,has,more,events,timing,aware,event,generator,timing,aware,event,generator,get,next,generator,global,watermark,return,event,else,throw,new,illegal,state,exception,all,events,exhausted
SessionEventGeneratorImpl -> @Override 	public E generateEvent(long globalWatermark);1496173247;@see EventGenerator;@Override_	public E generateEvent(long globalWatermark) {_		if (hasMoreEvents()) {_			++producedEventsCount__			E event = timingAwareEventGenerator.generateEvent(globalWatermark)___			while (!timingAwareEventGenerator.hasMoreEvents()) {_				timingAwareEventGenerator = timingAwareEventGenerator.getNextGenerator(globalWatermark)__			}__			return event__		} else {_			throw new IllegalStateException("All events exhausted")__		}_	};see,event,generator;override,public,e,generate,event,long,global,watermark,if,has,more,events,produced,events,count,e,event,timing,aware,event,generator,generate,event,global,watermark,while,timing,aware,event,generator,has,more,events,timing,aware,event,generator,timing,aware,event,generator,get,next,generator,global,watermark,return,event,else,throw,new,illegal,state,exception,all,events,exhausted
