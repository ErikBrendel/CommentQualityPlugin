# id;timestamp;commentText;codeText;commentWords;codeWords
CoGroupJoinITCase -> @Test 	public void testCoGroupOperatorWithCheckpoint() throws Exception;1496173247;Verifies that pipelines including {@link CoGroupedStreams} can be checkpointed properly,_which includes snapshotting configurations of any involved serializers.__@see <a href="https://issues.apache.org/jira/browse/FLINK-6808">FLINK-6808</a>;@Test_	public void testCoGroupOperatorWithCheckpoint() throws Exception {__		_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(1)___		DataStream<Tuple2<String, Integer>> source1 = env.fromElements(Tuple2.of("a", 0), Tuple2.of("b", 3))__		DataStream<Tuple2<String, Integer>> source2 = env.fromElements(Tuple2.of("a", 1), Tuple2.of("b", 6))___		DataStream<String> coGroupWindow = source1.coGroup(source2)_			.where(new Tuple2KeyExtractor())_			.equalTo(new Tuple2KeyExtractor())_			.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))_			.apply(new CoGroupFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {_				@Override_				public void coGroup(Iterable<Tuple2<String, Integer>> first,_									Iterable<Tuple2<String, Integer>> second,_									Collector<String> out) throws Exception {_					out.collect(first + ":" + second)__				}_			})___		OneInputTransformation<Tuple2<String, Integer>, String> transform = (OneInputTransformation<Tuple2<String, Integer>, String>) coGroupWindow.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, String> operator = transform.getOperator()___		_		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new Tuple2KeyExtractor(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.open()__		testHarness.snapshot(0L, 0L)__	};verifies,that,pipelines,including,link,co,grouped,streams,can,be,checkpointed,properly,which,includes,snapshotting,configurations,of,any,involved,serializers,see,a,href,https,issues,apache,org,jira,browse,flink,6808,flink,6808,a;test,public,void,test,co,group,operator,with,checkpoint,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,1,data,stream,tuple2,string,integer,source1,env,from,elements,tuple2,of,a,0,tuple2,of,b,3,data,stream,tuple2,string,integer,source2,env,from,elements,tuple2,of,a,1,tuple2,of,b,6,data,stream,string,co,group,window,source1,co,group,source2,where,new,tuple2key,extractor,equal,to,new,tuple2key,extractor,window,tumbling,event,time,windows,of,time,of,3,time,unit,milliseconds,apply,new,co,group,function,tuple2,string,integer,tuple2,string,integer,string,override,public,void,co,group,iterable,tuple2,string,integer,first,iterable,tuple2,string,integer,second,collector,string,out,throws,exception,out,collect,first,second,one,input,transformation,tuple2,string,integer,string,transform,one,input,transformation,tuple2,string,integer,string,co,group,window,get,transformation,one,input,stream,operator,tuple2,string,integer,string,operator,transform,get,operator,one,input,stream,operator,test,harness,tuple2,string,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple2key,extractor,basic,type,info,test,harness,open,test,harness,snapshot,0l,0l
CoGroupJoinITCase -> @Test 	public void testCoGroupOperatorWithCheckpoint() throws Exception;1496409332;Verifies that pipelines including {@link CoGroupedStreams} can be checkpointed properly,_which includes snapshotting configurations of any involved serializers.__@see <a href="https://issues.apache.org/jira/browse/FLINK-6808">FLINK-6808</a>;@Test_	public void testCoGroupOperatorWithCheckpoint() throws Exception {__		_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(1)___		DataStream<Tuple2<String, Integer>> source1 = env.fromElements(Tuple2.of("a", 0), Tuple2.of("b", 3))__		DataStream<Tuple2<String, Integer>> source2 = env.fromElements(Tuple2.of("a", 1), Tuple2.of("b", 6))___		DataStream<String> coGroupWindow = source1.coGroup(source2)_			.where(new Tuple2KeyExtractor())_			.equalTo(new Tuple2KeyExtractor())_			.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))_			.apply(new CoGroupFunction<Tuple2<String,Integer>, Tuple2<String,Integer>, String>() {_				@Override_				public void coGroup(Iterable<Tuple2<String, Integer>> first,_									Iterable<Tuple2<String, Integer>> second,_									Collector<String> out) throws Exception {_					out.collect(first + ":" + second)__				}_			})___		OneInputTransformation<Tuple2<String, Integer>, String> transform = (OneInputTransformation<Tuple2<String, Integer>, String>) coGroupWindow.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, String> operator = transform.getOperator()___		_		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new Tuple2KeyExtractor(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.open()__		testHarness.snapshot(0L, 0L)__	};verifies,that,pipelines,including,link,co,grouped,streams,can,be,checkpointed,properly,which,includes,snapshotting,configurations,of,any,involved,serializers,see,a,href,https,issues,apache,org,jira,browse,flink,6808,flink,6808,a;test,public,void,test,co,group,operator,with,checkpoint,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,1,data,stream,tuple2,string,integer,source1,env,from,elements,tuple2,of,a,0,tuple2,of,b,3,data,stream,tuple2,string,integer,source2,env,from,elements,tuple2,of,a,1,tuple2,of,b,6,data,stream,string,co,group,window,source1,co,group,source2,where,new,tuple2key,extractor,equal,to,new,tuple2key,extractor,window,tumbling,event,time,windows,of,time,of,3,time,unit,milliseconds,apply,new,co,group,function,tuple2,string,integer,tuple2,string,integer,string,override,public,void,co,group,iterable,tuple2,string,integer,first,iterable,tuple2,string,integer,second,collector,string,out,throws,exception,out,collect,first,second,one,input,transformation,tuple2,string,integer,string,transform,one,input,transformation,tuple2,string,integer,string,co,group,window,get,transformation,one,input,stream,operator,tuple2,string,integer,string,operator,transform,get,operator,one,input,stream,operator,test,harness,tuple2,string,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple2key,extractor,basic,type,info,test,harness,open,test,harness,snapshot,0l,0l
CoGroupJoinITCase -> @Test 	public void testCoGroupOperatorWithCheckpoint() throws Exception;1508854815;Verifies that pipelines including {@link CoGroupedStreams} can be checkpointed properly,_which includes snapshotting configurations of any involved serializers.__@see <a href="https://issues.apache.org/jira/browse/FLINK-6808">FLINK-6808</a>;@Test_	public void testCoGroupOperatorWithCheckpoint() throws Exception {__		_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)__		env.setParallelism(1)___		DataStream<Tuple2<String, Integer>> source1 = env.fromElements(Tuple2.of("a", 0), Tuple2.of("b", 3))__		DataStream<Tuple2<String, Integer>> source2 = env.fromElements(Tuple2.of("a", 1), Tuple2.of("b", 6))___		DataStream<String> coGroupWindow = source1.coGroup(source2)_			.where(new Tuple2KeyExtractor())_			.equalTo(new Tuple2KeyExtractor())_			.window(TumblingEventTimeWindows.of(Time.of(3, TimeUnit.MILLISECONDS)))_			.apply(new CoGroupFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, String>() {_				@Override_				public void coGroup(Iterable<Tuple2<String, Integer>> first,_									Iterable<Tuple2<String, Integer>> second,_									Collector<String> out) throws Exception {_					out.collect(first + ":" + second)__				}_			})___		OneInputTransformation<Tuple2<String, Integer>, String> transform = (OneInputTransformation<Tuple2<String, Integer>, String>) coGroupWindow.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, String> operator = transform.getOperator()___		_		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, String> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new Tuple2KeyExtractor(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.open()__		testHarness.snapshot(0L, 0L)__	};verifies,that,pipelines,including,link,co,grouped,streams,can,be,checkpointed,properly,which,includes,snapshotting,configurations,of,any,involved,serializers,see,a,href,https,issues,apache,org,jira,browse,flink,6808,flink,6808,a;test,public,void,test,co,group,operator,with,checkpoint,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,env,set,parallelism,1,data,stream,tuple2,string,integer,source1,env,from,elements,tuple2,of,a,0,tuple2,of,b,3,data,stream,tuple2,string,integer,source2,env,from,elements,tuple2,of,a,1,tuple2,of,b,6,data,stream,string,co,group,window,source1,co,group,source2,where,new,tuple2key,extractor,equal,to,new,tuple2key,extractor,window,tumbling,event,time,windows,of,time,of,3,time,unit,milliseconds,apply,new,co,group,function,tuple2,string,integer,tuple2,string,integer,string,override,public,void,co,group,iterable,tuple2,string,integer,first,iterable,tuple2,string,integer,second,collector,string,out,throws,exception,out,collect,first,second,one,input,transformation,tuple2,string,integer,string,transform,one,input,transformation,tuple2,string,integer,string,co,group,window,get,transformation,one,input,stream,operator,tuple2,string,integer,string,operator,transform,get,operator,one,input,stream,operator,test,harness,tuple2,string,integer,string,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple2key,extractor,basic,type,info,test,harness,open,test,harness,snapshot,0l,0l
