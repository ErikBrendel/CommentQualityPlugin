# id;timestamp;commentText;codeText;commentWords;codeWords
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1497328697;Changing field types of a POJO as keyed state should require a state migration;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		assumeTrue("Running only for RocksDBStateBackend until FLINK-6804 has been fixed.", stateBackend instanceof RocksDBStateBackend)__		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,assume,true,running,only,for,rocks,dbstate,backend,until,flink,6804,has,been,fixed,state,backend,instanceof,rocks,dbstate,backend,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1497328757;Changing field types of a POJO as keyed state should require a state migration;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1499899067;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1515213012;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1516295283;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1516626397;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1519567828;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1519568061;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1526978549;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1528212859;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithKeyedState() throws Exception;1550821417;Changing field types of a POJO as keyed state should require a state migration.;@Test_	public void testChangedFieldTypesWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1497328757;We should be able to handle a changed field order of a POJO as operator state;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1499899067;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1515213012;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1516295283;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1516626397;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1519567828;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1519568061;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1526978549;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1528212859;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithOperatorState() throws Exception;1550821417;We should be able to handle a changed field order of a POJO as operator state.;@Test_	public void testChangedFieldOrderWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, false)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,operator,state;test,public,void,test,changed,field,order,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1497328757;Changing field types of a POJO as operator state should require a state migration;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1499899067;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1515213012;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1516295283;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1516626397;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1519567828;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1519568061;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1526978549;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1528212859;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldTypesWithOperatorState() throws Exception;1550821417;Changing field types of a POJO as operator state should require a state migration.;@Test_	public void testChangedFieldTypesWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_C, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};changing,field,types,of,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,changed,field,types,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1497328757;Adding fields to a POJO as operator state should require a state migration;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1499899067;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1515213012;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1516295283;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1516626397;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1519567828;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1519568061;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1526978549;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1528212859;Adding fields to a POJO as operator state should require a state migration.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,additional,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,true,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithOperatorState() throws Exception;1550821417;Adding fields to a POJO as operator state should succeed.;@Test_	public void testAdditionalFieldWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, false)__	};adding,fields,to,a,pojo,as,operator,state,should,succeed;test,public,void,test,additional,field,with,operator,state,throws,exception,test,pojo,serializer,upgrade,true,false
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1497328757;Removing fields from a POJO as keyed state should require a state migration;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1499899067;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1515213012;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1516295283;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1516626397;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1519567828;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1519568061;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1526978549;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1528212859;Removing fields from a POJO as keyed state should require a state migration.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,missing,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,false,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithKeyedState() throws Exception;1550821417;Removing fields from a POJO as keyed state should succeed.;@Test_	public void testMissingFieldWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, true)__	};removing,fields,from,a,pojo,as,keyed,state,should,succeed;test,public,void,test,missing,field,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,false,true
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1497328697;Adding fields to a POJO as keyed state should require a state migration;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		assumeTrue("Running only for RocksDBStateBackend until FLINK-6804 has been fixed.", stateBackend instanceof RocksDBStateBackend)__		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,assume,true,running,only,for,rocks,dbstate,backend,until,flink,6804,has,been,fixed,state,backend,instanceof,rocks,dbstate,backend,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1497328757;Adding fields to a POJO as keyed state should require a state migration;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1499899067;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1515213012;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1516295283;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1516626397;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1519567828;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1519568061;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1526978549;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1528212859;Adding fields to a POJO as keyed state should require a state migration.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};adding,fields,to,a,pojo,as,keyed,state,should,require,a,state,migration;test,public,void,test,additional,field,with,keyed,state,throws,exception,try,test,pojo,serializer,upgrade,true,true,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testAdditionalFieldWithKeyedState() throws Exception;1550821417;Adding fields to a POJO as keyed state should succeed.;@Test_	public void testAdditionalFieldWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_D, true, true)__	};adding,fields,to,a,pojo,as,keyed,state,should,succeed;test,public,void,test,additional,field,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1497328697;We should be able to handle a changed field order of a POJO as keyed state;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1497328757;We should be able to handle a changed field order of a POJO as keyed state;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1499899067;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1515213012;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1516295283;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1516626397;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1519567828;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1519568061;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1526978549;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1528212859;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testChangedFieldOrderWithKeyedState() throws Exception;1550821417;We should be able to handle a changed field order of a POJO as keyed state.;@Test_	public void testChangedFieldOrderWithKeyedState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_B, true, true)__	};we,should,be,able,to,handle,a,changed,field,order,of,a,pojo,as,keyed,state;test,public,void,test,changed,field,order,with,keyed,state,throws,exception,test,pojo,serializer,upgrade,true,true
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1497328757;Removing fields from a POJO as operator state should require a state migration;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1499899067;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1515213012;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1516295283;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1516626397;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1519567828;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1519568061;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1526978549;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1528212859;Removing fields from a POJO as operator state should require a state migration.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		try {_			testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__			fail("Expected a state migration exception.")__		} catch (Exception e) {_			if (CommonTestUtils.containsCause(e, StateMigrationException.class)) {_				_			} else {_				throw e__			}_		}_	};removing,fields,from,a,pojo,as,operator,state,should,require,a,state,migration;test,public,void,test,missing,field,with,operator,state,throws,exception,try,test,pojo,serializer,upgrade,false,false,fail,expected,a,state,migration,exception,catch,exception,e,if,common,test,utils,contains,cause,e,state,migration,exception,class,else,throw,e
PojoSerializerUpgradeTest -> @Test 	public void testMissingFieldWithOperatorState() throws Exception;1550821417;Removing fields from a POJO as operator state should succeed.;@Test_	public void testMissingFieldWithOperatorState() throws Exception {_		testPojoSerializerUpgrade(SOURCE_A, SOURCE_E, false, false)__	};removing,fields,from,a,pojo,as,operator,state,should,succeed;test,public,void,test,missing,field,with,operator,state,throws,exception,test,pojo,serializer,upgrade,false,false
