# id;timestamp;commentText;codeText;commentWords;codeWords
CoStreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1438675870;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())__						_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.groupBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
CoStreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1441628919;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.groupBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value
CoStreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1443714973;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value
CoStreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1444053424;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value
CoStreamCheckpointingITCase -> @Test 	public void testCoStreamCheckpointingProgram() throws Exception;1479839013;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testCoStreamCheckpointingProgram() throws Exception {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(PARALLELISM)__		env.enableCheckpointing(50)__		env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS, NUM_STRINGS / 5))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})___		TestUtils.tryExecute(env, "Fault Tolerance Test")___		__		long filterSum = 0__		for (long l : StringRichFilterFunction.counts) {_			filterSum += l__		}__		long coMapSum = 0__		for (long l : LeftIdentityCoRichFlatMapFunction.counts) {_			coMapSum += l__		}__		long mapSum = 0__		for (long l : StringPrefixCountRichMapFunction.counts) {_			mapSum += l__		}__		long countSum = 0__		for (long l : StatefulCounterFunction.counts) {_			countSum += l__		}__		_		assertEquals(NUM_STRINGS, filterSum)__		assertEquals(NUM_STRINGS, coMapSum)__		assertEquals(NUM_STRINGS, mapSum)__		assertEquals(NUM_STRINGS, countSum)__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;test,public,void,test,co,stream,checkpointing,program,throws,exception,assert,true,broken,test,setup,40,0,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,enable,checkpointing,50,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,data,stream,string,stream,env,add,source,new,string,generating,source,function,5,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,test,utils,try,execute,env,fault,tolerance,test,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,co,map,sum,0,for,long,l,left,identity,co,rich,flat,map,function,counts,co,map,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,co,map,sum,assert,equals,map,sum,assert,equals,count,sum
CoStreamCheckpointingITCase -> @Test 	public void testCoStreamCheckpointingProgram() throws Exception;1482241993;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testCoStreamCheckpointingProgram() throws Exception {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(PARALLELISM)__		env.enableCheckpointing(50)__		env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS, NUM_STRINGS / 5))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})___		TestUtils.tryExecute(env, "Fault Tolerance Test")___		__		long filterSum = 0__		for (long l : StringRichFilterFunction.counts) {_			filterSum += l__		}__		long coMapSum = 0__		for (long l : LeftIdentityCoRichFlatMapFunction.counts) {_			coMapSum += l__		}__		long mapSum = 0__		for (long l : StringPrefixCountRichMapFunction.counts) {_			mapSum += l__		}__		long countSum = 0__		for (long l : StatefulCounterFunction.counts) {_			countSum += l__		}__		_		assertEquals(NUM_STRINGS, filterSum)__		assertEquals(NUM_STRINGS, coMapSum)__		assertEquals(NUM_STRINGS, mapSum)__		assertEquals(NUM_STRINGS, countSum)__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;test,public,void,test,co,stream,checkpointing,program,throws,exception,assert,true,broken,test,setup,40,0,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,enable,checkpointing,50,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,data,stream,string,stream,env,add,source,new,string,generating,source,function,5,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,test,utils,try,execute,env,fault,tolerance,test,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,co,map,sum,0,for,long,l,left,identity,co,rich,flat,map,function,counts,co,map,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,co,map,sum,assert,equals,map,sum,assert,equals,count,sum
CoStreamCheckpointingITCase -> @Test 	public void testCoStreamCheckpointingProgram() throws Exception;1496173247;Runs the following program._<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testCoStreamCheckpointingProgram() throws Exception {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(PARALLELISM)__		env.enableCheckpointing(50)__		env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS, NUM_STRINGS / 5))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})___		TestUtils.tryExecute(env, "Fault Tolerance Test")___		__		long filterSum = 0__		for (long l : StringRichFilterFunction.counts) {_			filterSum += l__		}__		long coMapSum = 0__		for (long l : LeftIdentityCoRichFlatMapFunction.counts) {_			coMapSum += l__		}__		long mapSum = 0__		for (long l : StringPrefixCountRichMapFunction.counts) {_			mapSum += l__		}__		long countSum = 0__		for (long l : StatefulCounterFunction.counts) {_			countSum += l__		}__		_		assertEquals(NUM_STRINGS, filterSum)__		assertEquals(NUM_STRINGS, coMapSum)__		assertEquals(NUM_STRINGS, mapSum)__		assertEquals(NUM_STRINGS, countSum)__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;test,public,void,test,co,stream,checkpointing,program,throws,exception,assert,true,broken,test,setup,40,0,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,enable,checkpointing,50,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,data,stream,string,stream,env,add,source,new,string,generating,source,function,5,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,test,utils,try,execute,env,fault,tolerance,test,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,co,map,sum,0,for,long,l,left,identity,co,rich,flat,map,function,counts,co,map,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,co,map,sum,assert,equals,map,sum,assert,equals,count,sum
CoStreamCheckpointingITCase -> @Test 	public void testCoStreamCheckpointingProgram() throws Exception;1508854815;Runs the following program._<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testCoStreamCheckpointingProgram() throws Exception {_		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(PARALLELISM)__		env.enableCheckpointing(50)__		env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS, NUM_STRINGS / 5))___		stream_				_				.filter(new StringRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) {_						_					}_				})___		TestUtils.tryExecute(env, "Fault Tolerance Test")___		__		long filterSum = 0__		for (long l : StringRichFilterFunction.counts) {_			filterSum += l__		}__		long coMapSum = 0__		for (long l : LeftIdentityCoRichFlatMapFunction.counts) {_			coMapSum += l__		}__		long mapSum = 0__		for (long l : StringPrefixCountRichMapFunction.counts) {_			mapSum += l__		}__		long countSum = 0__		for (long l : StatefulCounterFunction.counts) {_			countSum += l__		}__		_		assertEquals(NUM_STRINGS, filterSum)__		assertEquals(NUM_STRINGS, coMapSum)__		assertEquals(NUM_STRINGS, mapSum)__		assertEquals(NUM_STRINGS, countSum)__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;test,public,void,test,co,stream,checkpointing,program,throws,exception,assert,true,broken,test,setup,40,0,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,parallelism,env,enable,checkpointing,50,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,data,stream,string,stream,env,add,source,new,string,generating,source,function,5,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,test,utils,try,execute,env,fault,tolerance,test,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,co,map,sum,0,for,long,l,left,identity,co,rich,flat,map,function,counts,co,map,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,co,map,sum,assert,equals,map,sum,assert,equals,count,sum
