# id;timestamp;commentText;codeText;commentWords;codeWords
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1465604047;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath2, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder1 = new StringBuilder()__		StringBuilder builder2 = new StringBuilder()__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				builder1.append(counter1 + "\n")__			} else {_				counter2 += i__				builder2.append(counter2 + "\n")__			}_		}__		expected1 = builder1.toString()__		expected2 = builder2.toString()___		env.execute()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path1,file,system,write,mode,overwrite,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path2,file,system,write,mode,overwrite,string,builder,builder1,new,string,builder,string,builder,builder2,new,string,builder,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,builder1,append,counter1,n,else,counter2,i,builder2,append,counter2,n,expected1,builder1,to,string,expected2,builder2,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1467989862;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath2, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder1 = new StringBuilder()__		StringBuilder builder2 = new StringBuilder()__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				builder1.append(counter1 + "\n")__			} else {_				counter2 += i__				builder2.append(counter2 + "\n")__			}_		}__		expected1 = builder1.toString()__		expected2 = builder2.toString()___		env.execute()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path1,file,system,write,mode,overwrite,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path2,file,system,write,mode,overwrite,string,builder,builder1,new,string,builder,string,builder,builder2,new,string,builder,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,builder1,append,counter1,n,else,counter2,i,builder2,append,counter2,n,expected1,builder1,to,string,expected2,builder2,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1469711304;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath2, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder1 = new StringBuilder()__		StringBuilder builder2 = new StringBuilder()__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				builder1.append(counter1 + "\n")__			} else {_				counter2 += i__				builder2.append(counter2 + "\n")__			}_		}__		expected1 = builder1.toString()__		expected2 = builder2.toString()___		env.execute()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path1,file,system,write,mode,overwrite,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path2,file,system,write,mode,overwrite,string,builder,builder1,new,string,builder,string,builder,builder2,new,string,builder,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,builder1,append,counter1,n,else,counter2,i,builder2,append,counter2,n,expected1,builder1,to,string,expected2,builder2,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1470067038;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).writeAsText(resultPath2, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder1 = new StringBuilder()__		StringBuilder builder2 = new StringBuilder()__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				builder1.append(counter1 + "\n")__			} else {_				counter2 += i__				builder2.append(counter2 + "\n")__			}_		}__		expected1 = builder1.toString()__		expected2 = builder2.toString()___		env.execute()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path1,file,system,write,mode,overwrite,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,write,as,text,result,path2,file,system,write,mode,overwrite,string,builder,builder1,new,string,builder,string,builder,builder2,new,string,builder,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,builder1,append,counter1,n,else,counter2,i,builder2,append,counter2,n,expected1,builder1,to,string,expected2,builder2,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1476253903;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)____		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collection<Integer> result1 = sinkFunction1.getResult()__		Collections.sort((ArrayList)result1)__		Collection<Integer> result2 = sinkFunction2.getResult()__		Collections.sort((ArrayList)result2)___		Assert.assertArrayEquals(result1.toArray(), expected1.toArray())__		Assert.assertArrayEquals(result2.toArray(), expected2.toArray())___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collection,integer,result1,sink,function1,get,result,collections,sort,array,list,result1,collection,integer,result2,sink,function2,get,result,collections,sort,array,list,result2,assert,assert,array,equals,result1,to,array,expected1,to,array,assert,assert,array,equals,result2,to,array,expected2,to,array,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1481733459;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1482201745;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of Tuple2<Integer, Integer> is created. The stream is grouped according to the first tuple_value. Each group is folded where the second tuple value is summed up.__This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer,Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,up,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1496173247;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of {@code Tuple2<Integer, Integer>} is created. The stream is grouped according to the_first tuple value. Each group is folded where the second tuple value is summed.__<p>This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,code,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,p,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1499008461;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of {@code Tuple2<Integer, Integer>} is created. The stream is grouped according to the_first tuple value. Each group is folded where the second tuple value is summed.__<p>This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,code,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,p,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1502180306;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of {@code Tuple2<Integer, Integer>} is created. The stream is grouped according to the_first tuple value. Each group is folded where the second tuple value is summed.__<p>This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,code,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,p,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testGroupedFoldOperation() throws Exception;1508854815;Tests the proper functioning of the streaming fold operator. For this purpose, a stream_of {@code Tuple2<Integer, Integer>} is created. The stream is grouped according to the_first tuple value. Each group is folded where the second tuple value is summed.__<p>This test relies on the hash function used by the {@link DataStream#keyBy}, which is_assumed to be {@link MathUtils#murmurHash}.;@Test_	public void testGroupedFoldOperation() throws Exception {_		int numElements = 10__		final int numKeys = 2___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> sourceStream = env.addSource(new TupleSource(numElements, numKeys))___		SplitStream<Tuple2<Integer, Integer>> splittedResult = sourceStream_			.keyBy(0)_			.fold(0, new FoldFunction<Tuple2<Integer, Integer>, Integer>() {_				private static final long serialVersionUID = 4875723041825726082L___				@Override_				public Integer fold(Integer accumulator, Tuple2<Integer, Integer> value) throws Exception {_					return accumulator + value.f1__				}_			}).map(new RichMapFunction<Integer, Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = 8538355101606319744L__				int key = -1__				@Override_				public Tuple2<Integer, Integer> map(Integer value) throws Exception {_					if (key == -1){_						key = MathUtils.murmurHash(value) % numKeys__					}_					return new Tuple2<>(key, value)__				}_			}).split(new OutputSelector<Tuple2<Integer, Integer>>() {_				private static final long serialVersionUID = -8439325199163362470L___				@Override_				public Iterable<String> select(Tuple2<Integer, Integer> value) {_					List<String> output = new ArrayList<>()___					output.add(value.f0 + "")__					return output__				}_			})___		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)___		final List<Integer> actualResult1 = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult1)___		splittedResult.select("0").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 2114608668010092995L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction1)___		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)___		final List<Integer> actualResult2 = new ArrayList<>()__		MemorySinkFunction.registerCollection(1, actualResult2)___		splittedResult.select("1").map(new MapFunction<Tuple2<Integer, Integer>, Integer>() {_			private static final long serialVersionUID = 5631104389744681308L___			@Override_			public Integer map(Tuple2<Integer, Integer> value) throws Exception {_				return value.f1__			}_		}).addSink(sinkFunction2)___		Collection<Integer> expected1 = new ArrayList<>(10)__		Collection<Integer> expected2 = new ArrayList<>(10)__		int counter1 = 0__		int counter2 = 0___		for (int i = 0_ i < numElements_ i++) {_			if (MathUtils.murmurHash(i) % numKeys == 0) {_				counter1 += i__				expected1.add(counter1)__			} else {_				counter2 += i__				expected2.add(counter2)__			}_		}__		env.execute()___		Collections.sort(actualResult1)__		Collections.sort(actualResult2)___		Assert.assertEquals(expected1, actualResult1)__		Assert.assertEquals(expected2, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,proper,functioning,of,the,streaming,fold,operator,for,this,purpose,a,stream,of,code,tuple2,integer,integer,is,created,the,stream,is,grouped,according,to,the,first,tuple,value,each,group,is,folded,where,the,second,tuple,value,is,summed,p,this,test,relies,on,the,hash,function,used,by,the,link,data,stream,key,by,which,is,assumed,to,be,link,math,utils,murmur,hash;test,public,void,test,grouped,fold,operation,throws,exception,int,num,elements,10,final,int,num,keys,2,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,stream,env,add,source,new,tuple,source,num,elements,num,keys,split,stream,tuple2,integer,integer,splitted,result,source,stream,key,by,0,fold,0,new,fold,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,4875723041825726082l,override,public,integer,fold,integer,accumulator,tuple2,integer,integer,value,throws,exception,return,accumulator,value,f1,map,new,rich,map,function,integer,tuple2,integer,integer,private,static,final,long,serial,version,uid,8538355101606319744l,int,key,1,override,public,tuple2,integer,integer,map,integer,value,throws,exception,if,key,1,key,math,utils,murmur,hash,value,num,keys,return,new,tuple2,key,value,split,new,output,selector,tuple2,integer,integer,private,static,final,long,serial,version,uid,8439325199163362470l,override,public,iterable,string,select,tuple2,integer,integer,value,list,string,output,new,array,list,output,add,value,f0,return,output,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,memory,sink,function,register,collection,0,actual,result1,splitted,result,select,0,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,2114608668010092995l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function1,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,memory,sink,function,register,collection,1,actual,result2,splitted,result,select,1,map,new,map,function,tuple2,integer,integer,integer,private,static,final,long,serial,version,uid,5631104389744681308l,override,public,integer,map,tuple2,integer,integer,value,throws,exception,return,value,f1,add,sink,sink,function2,collection,integer,expected1,new,array,list,10,collection,integer,expected2,new,array,list,10,int,counter1,0,int,counter2,0,for,int,i,0,i,num,elements,i,if,math,utils,murmur,hash,i,num,keys,0,counter1,i,expected1,add,counter1,else,counter2,i,expected2,add,counter2,env,execute,collections,sort,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected1,actual,result1,assert,assert,equals,expected2,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1481733459;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final AsyncCollector<Integer> collector) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						collector.collect(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(input, function, 2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)____		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(input, function, 2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)____		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i+i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,async,collector,integer,collector,throws,exception,executor,service,submit,new,runnable,override,public,void,run,collector,collect,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1482201745;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5__		final long timeout = 1000L___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final AsyncCollector<Integer> collector) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						collector.collect(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)___		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)____		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i+i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,final,long,timeout,1000l,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,async,collector,integer,collector,throws,exception,executor,service,submit,new,runnable,override,public,void,run,collector,collect,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,timeout,time,unit,milliseconds,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,timeout,time,unit,milliseconds,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1496173247;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5__		final long timeout = 1000L___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final AsyncCollector<Integer> collector) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						collector.collect(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)___		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i + i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,final,long,timeout,1000l,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,async,collector,integer,collector,throws,exception,executor,service,submit,new,runnable,override,public,void,run,collector,collect,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,timeout,time,unit,milliseconds,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,timeout,time,unit,milliseconds,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1499008461;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5__		final long timeout = 1000L___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final ResultFuture<Integer> resultFuture) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						resultFuture.complete(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)___		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i + i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,final,long,timeout,1000l,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,result,future,integer,result,future,throws,exception,executor,service,submit,new,runnable,override,public,void,run,result,future,complete,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,timeout,time,unit,milliseconds,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,timeout,time,unit,milliseconds,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1502180306;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5__		final long timeout = 1000L___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final AsyncCollector<Integer> collector) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						collector.collect(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)___		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i + i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,final,long,timeout,1000l,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,async,collector,integer,collector,throws,exception,executor,service,submit,new,runnable,override,public,void,run,collector,collect,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,timeout,time,unit,milliseconds,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,timeout,time,unit,milliseconds,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testAsyncWaitOperator() throws Exception;1508854815;Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of_elements by doubling their value. This is tested in for the ordered and unordered mode.;@Test_	public void testAsyncWaitOperator() throws Exception {_		final int numElements = 5__		final long timeout = 1000L___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		AsyncFunction<Tuple2<Integer, NonSerializable>, Integer> function = new RichAsyncFunction<Tuple2<Integer, NonSerializable>, Integer>() {_			private static final long serialVersionUID = 7000343199829487985L___			transient ExecutorService executorService___			@Override_			public void open(Configuration parameters) throws Exception {_				super.open(parameters)__				executorService = Executors.newFixedThreadPool(numElements)__			}__			@Override_			public void close() throws Exception {_				super.close()__				executorService.shutdownNow()__			}__			@Override_			public void asyncInvoke(final Tuple2<Integer, NonSerializable> input,_									final ResultFuture<Integer> resultFuture) throws Exception {_				executorService.submit(new Runnable() {_					@Override_					public void run() {_						resultFuture.complete(Collections.singletonList(input.f0 + input.f0))__					}_				})__			}_		}___		DataStream<Integer> orderedResult = AsyncDataStream.orderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2).setParallelism(1)___		_		final MemorySinkFunction sinkFunction1 = new MemorySinkFunction(0)__		final List<Integer> actualResult1 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(0, actualResult1)___		orderedResult.addSink(sinkFunction1).setParallelism(1)___		DataStream<Integer> unorderedResult = AsyncDataStream.unorderedWait(_			input,_			function,_			timeout,_			TimeUnit.MILLISECONDS,_			2)___		_		final MemorySinkFunction sinkFunction2 = new MemorySinkFunction(1)__		final List<Integer> actualResult2 = new ArrayList<>(numElements)__		MemorySinkFunction.registerCollection(1, actualResult2)___		unorderedResult.addSink(sinkFunction2)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(i + i)__		}__		env.execute()___		Assert.assertEquals(expected, actualResult1)___		Collections.sort(actualResult2)__		Assert.assertEquals(expected, actualResult2)___		MemorySinkFunction.clear()__	};tests,the,basic,functionality,of,the,async,wait,operator,processing,a,limited,stream,of,elements,by,doubling,their,value,this,is,tested,in,for,the,ordered,and,unordered,mode;test,public,void,test,async,wait,operator,throws,exception,final,int,num,elements,5,final,long,timeout,1000l,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,async,function,tuple2,integer,non,serializable,integer,function,new,rich,async,function,tuple2,integer,non,serializable,integer,private,static,final,long,serial,version,uid,7000343199829487985l,transient,executor,service,executor,service,override,public,void,open,configuration,parameters,throws,exception,super,open,parameters,executor,service,executors,new,fixed,thread,pool,num,elements,override,public,void,close,throws,exception,super,close,executor,service,shutdown,now,override,public,void,async,invoke,final,tuple2,integer,non,serializable,input,final,result,future,integer,result,future,throws,exception,executor,service,submit,new,runnable,override,public,void,run,result,future,complete,collections,singleton,list,input,f0,input,f0,data,stream,integer,ordered,result,async,data,stream,ordered,wait,input,function,timeout,time,unit,milliseconds,2,set,parallelism,1,final,memory,sink,function,sink,function1,new,memory,sink,function,0,final,list,integer,actual,result1,new,array,list,num,elements,memory,sink,function,register,collection,0,actual,result1,ordered,result,add,sink,sink,function1,set,parallelism,1,data,stream,integer,unordered,result,async,data,stream,unordered,wait,input,function,timeout,time,unit,milliseconds,2,final,memory,sink,function,sink,function2,new,memory,sink,function,1,final,list,integer,actual,result2,new,array,list,num,elements,memory,sink,function,register,collection,1,actual,result2,unordered,result,add,sink,sink,function2,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,i,i,env,execute,assert,assert,equals,expected,actual,result1,collections,sort,actual,result2,assert,assert,equals,expected,actual,result2,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1465604047;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder = new StringBuilder()___		for (int i = 0_ i < numElements_ i++) {_			builder.append(42 + i + "\n")__		}__		expected1 = builder.toString()___		env.execute()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,write,as,text,result,path1,file,system,write,mode,overwrite,string,builder,builder,new,string,builder,for,int,i,0,i,num,elements,i,builder,append,42,i,n,expected1,builder,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1467989862;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder = new StringBuilder()___		for (int i = 0_ i < numElements_ i++) {_			builder.append(42 + i + "\n")__		}__		expected1 = builder.toString()___		env.execute()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,write,as,text,result,path1,file,system,write,mode,overwrite,string,builder,builder,new,string,builder,for,int,i,0,i,num,elements,i,builder,append,42,i,n,expected1,builder,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1469711304;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder = new StringBuilder()___		for (int i = 0_ i < numElements_ i++) {_			builder.append(42 + i + "\n")__		}__		expected1 = builder.toString()___		env.execute()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,write,as,text,result,path1,file,system,write,mode,overwrite,string,builder,builder,new,string,builder,for,int,i,0,i,num,elements,i,builder,append,42,i,n,expected1,builder,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1470067038;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.writeAsText(resultPath1, FileSystem.WriteMode.OVERWRITE)___		StringBuilder builder = new StringBuilder()___		for (int i = 0_ i < numElements_ i++) {_			builder.append(42 + i + "\n")__		}__		expected1 = builder.toString()___		env.execute()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,write,as,text,result,path1,file,system,write,mode,overwrite,string,builder,builder,new,string,builder,for,int,i,0,i,num,elements,i,builder,append,42,i,n,expected1,builder,to,string,env,execute
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1476253903;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i )__		}__		env.execute()___		Collection<Integer> result = sinkFunction.getResult()__		Collections.sort((ArrayList)result)___		Assert.assertArrayEquals(result.toArray(), expected.toArray())___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collection,integer,result,sink,function,get,result,collections,sort,array,list,result,assert,assert,array,equals,result,to,array,expected,to,array,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1481733459;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i )__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1482201745;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i )__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1496173247;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i)__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1499008461;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i)__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1502180306;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i)__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
StreamingOperatorsITCase -> @Test 	public void testFoldOperationWithNonJavaSerializableType() throws Exception;1508854815;Tests whether the fold operation can also be called with non Java serializable types.;@Test_	public void testFoldOperationWithNonJavaSerializableType() throws Exception {_		final int numElements = 10___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, NonSerializable>> input = env.addSource(new NonSerializableTupleSource(numElements))___		final MemorySinkFunction sinkFunction = new MemorySinkFunction(0)__		final ArrayList<Integer> actualResult = new ArrayList<>()__		MemorySinkFunction.registerCollection(0, actualResult)___		input_			.keyBy(0)_			.fold(_				new NonSerializable(42),_				new FoldFunction<Tuple2<Integer, NonSerializable>, NonSerializable>() {_					private static final long serialVersionUID = 2705497830143608897L___					@Override_					public NonSerializable fold(NonSerializable accumulator, Tuple2<Integer, NonSerializable> value) throws Exception {_						return new NonSerializable(accumulator.value + value.f1.value)__					}_			})_			.map(new MapFunction<NonSerializable, Integer>() {_				private static final long serialVersionUID = 6906984044674568945L___				@Override_				public Integer map(NonSerializable value) throws Exception {_					return value.value__				}_			})_			.addSink(sinkFunction)___		Collection<Integer> expected = new ArrayList<>(10)___		for (int i = 0_ i < numElements_ i++) {_			expected.add(42 + i)__		}__		env.execute()___		Collections.sort(actualResult)___		Assert.assertEquals(expected, actualResult)___		MemorySinkFunction.clear()__	};tests,whether,the,fold,operation,can,also,be,called,with,non,java,serializable,types;test,public,void,test,fold,operation,with,non,java,serializable,type,throws,exception,final,int,num,elements,10,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,non,serializable,input,env,add,source,new,non,serializable,tuple,source,num,elements,final,memory,sink,function,sink,function,new,memory,sink,function,0,final,array,list,integer,actual,result,new,array,list,memory,sink,function,register,collection,0,actual,result,input,key,by,0,fold,new,non,serializable,42,new,fold,function,tuple2,integer,non,serializable,non,serializable,private,static,final,long,serial,version,uid,2705497830143608897l,override,public,non,serializable,fold,non,serializable,accumulator,tuple2,integer,non,serializable,value,throws,exception,return,new,non,serializable,accumulator,value,value,f1,value,map,new,map,function,non,serializable,integer,private,static,final,long,serial,version,uid,6906984044674568945l,override,public,integer,map,non,serializable,value,throws,exception,return,value,value,add,sink,sink,function,collection,integer,expected,new,array,list,10,for,int,i,0,i,num,elements,i,expected,add,42,i,env,execute,collections,sort,actual,result,assert,assert,equals,expected,actual,result,memory,sink,function,clear
