# id;timestamp;commentText;codeText;commentWords;codeWords
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1439295120;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction()).shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.groupBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1442858499;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction()).shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.groupBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1444055795;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction()).shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__						_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1445001970;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1445001971;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1454527671;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1454527672;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1454527721;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1463511058;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1484866642;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1499899067;Runs the following program._<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {_		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())_				.shuffle()__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new StatefulCounterFunction())__				_				.keyBy("prefix")_				.map(new OnceFailingPrefixCounter(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {__					@Override_					public void invoke(PrefixCount value) throws Exception {_						_					}_				})__	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,key,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1426972382;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setDegreeOfParallelism(PARALLELISM)____			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__						@Override_						public void cancel() {}_					})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,degree,of,parallelism,parallelism,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,override,public,void,cancel,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1427039049;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setDegreeOfParallelism(PARALLELISM)____			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,degree,of,parallelism,parallelism,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1427382261;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(200)___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1427646872;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(200)___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1429090512;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(200)___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,200,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1429705186;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(200)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,200,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1431459357;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(1000)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int step___				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__				}__				@Override_				public void run(Collector<String> collector) throws Exception {_					for (long i = getRuntimeContext().getIndexOfThisSubtask()_ running && i < NUM_STRINGS_ i += step) {_						char first = (char) ((i % 40) + 40)___						stringBuilder.setLength(0)__						stringBuilder.append(first)___						collector.collect(randomString(stringBuilder, rnd))__					}_				}__				@Override_				public void cancel() {_					running = false__				}_			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,1000,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,override,public,void,run,collector,string,collector,throws,exception,for,long,i,get,runtime,context,get,index,of,this,subtask,running,i,i,step,char,first,char,i,40,40,string,builder,set,length,0,string,builder,append,first,collector,collect,random,string,string,builder,rnd,override,public,void,cancel,running,false,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1432046149;Runs the following program:__<pre>__(source)  ->  (filter)  ->  (map)  ->  (groupBy / reduce)  -> (sink)__</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(1000)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new RichParallelSourceFunction<String>() {__				private Random rnd__				private StringBuilder stringBuilder___				private int index__				private int step__				private boolean running = true___				@Override_				public void open(Configuration parameters) {_					rnd = new Random()__					stringBuilder = new StringBuilder()__					step = getRuntimeContext().getNumberOfParallelSubtasks()__					index = getRuntimeContext().getIndexOfThisSubtask()__				}__				@Override_				public boolean reachedEnd() throws Exception {_					return index >= NUM_STRINGS__				}__				@Override_				public String next() throws Exception {_					char first = (char) ((index % 40) + 40)___					stringBuilder.setLength(0)__					stringBuilder.append(first)___					String result = randomString(stringBuilder, rnd)__					index += step__					return result__				}__			})___			stream_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}__			})___			env.execute()__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,1000,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,rich,parallel,source,function,string,private,random,rnd,private,string,builder,string,builder,private,int,index,private,int,step,private,boolean,running,true,override,public,void,open,configuration,parameters,rnd,new,random,string,builder,new,string,builder,step,get,runtime,context,get,number,of,parallel,subtasks,index,get,runtime,context,get,index,of,this,subtask,override,public,boolean,reached,end,throws,exception,return,index,override,public,string,next,throws,exception,char,first,char,index,40,40,string,builder,set,length,0,string,builder,append,first,string,result,random,string,string,builder,rnd,index,step,return,result,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,env,execute,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1432145811;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		final String COUNT_ACCUMULATOR = "count-acc"__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction())__			_			stream_					_					_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})__					_					_					.startNewChain()_					.map(new RichMapFunction<PrefixCount, PrefixCount>() {_						_						private long count = 0__						_						@Override_						public PrefixCount map(PrefixCount value) {_							count++__							return value__						}__						@Override_						public void close() {_							getRuntimeContext().getLongCounter(COUNT_ACCUMULATOR).add(count)__						}_					})__					_					_					.groupBy("prefix")_					.reduce(new ReduceFunction<PrefixCount>() {_						@Override_						public PrefixCount reduce(PrefixCount value1, PrefixCount value2) {_							value1.count += value2.count__							return value1__						}_					})_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}__						@Override_						public void close() {_							for (Long count : counts.values()) {_								assertEquals(NUM_STRINGS / 40, count.longValue())__							}_						}_					})___			JobExecutionResult result = env.execute()__			_			Long totalCount = (Long) result.getAllAccumulatorResults().get(COUNT_ACCUMULATOR)__			_			assertNotNull("TotalCount accumulator not set", totalCount)__			assertEquals(NUM_STRINGS, totalCount.longValue())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,assert,true,broken,test,setup,40,0,final,string,count,acc,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,start,new,chain,map,new,rich,map,function,prefix,count,prefix,count,private,long,count,0,override,public,prefix,count,map,prefix,count,value,count,return,value,override,public,void,close,get,runtime,context,get,long,counter,add,count,group,by,prefix,reduce,new,reduce,function,prefix,count,override,public,prefix,count,reduce,prefix,count,value1,prefix,count,value2,value1,count,value2,count,return,value1,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,override,public,void,close,for,long,count,counts,values,assert,equals,40,count,long,value,job,execution,result,result,env,execute,long,total,count,long,result,get,all,accumulator,results,get,assert,not,null,total,count,accumulator,not,set,total,count,assert,equals,total,count,long,value,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1432204767;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					_					.filter(new FilterFunction<String>() {_						@Override_						public boolean filter(String value) {_							return value.length() < 100__						}_					})_					.map(new MapFunction<String, PrefixCount>() {__						@Override_						public PrefixCount map(String value) {_							return new PrefixCount(value.substring(0, 1), value, 1L)__						}_					})__					_					_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}_			_			_			_			__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,filter,function,string,override,public,boolean,filter,string,value,return,value,length,100,map,new,map,function,string,prefix,count,override,public,prefix,count,map,string,value,return,new,prefix,count,value,substring,0,1,value,1l,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1433433098;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1433511260;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1435243086;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1435243086;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1435243087;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1435243087;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1436265749;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1436802870;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1438117086;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction())__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.reduce(new OnceFailingReducer(NUM_STRINGS))_					.addSink(new RichSinkFunction<PrefixCount>() {__						private Map<Character, Long> counts = new HashMap<Character, Long>()___						@Override_						public void invoke(PrefixCount value) {_							Character first = value.prefix.charAt(0)__							Long previous = counts.get(first)__							if (previous == null) {_								counts.put(first, value.count)__							} else {_								counts.put(first, Math.max(previous, value.count))__							}_						}________					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}__			_			_			_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,map,map,group,by,reduce,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,rich,sink,function,prefix,count,private,map,character,long,counts,new,hash,map,character,long,override,public,void,invoke,prefix,count,value,character,first,value,prefix,char,at,0,long,previous,counts,get,first,if,previous,null,counts,put,first,value,count,else,counts,put,first,math,max,previous,value,count,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1438267493;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction()).shuffle()__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.map(new OnceFailingPrefixCounter(NUM_STRINGS))_					.addSink(new SinkFunction<PrefixCount>() {__						@Override_						public void invoke(PrefixCount value) throws Exception {_							_						}_					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}_			_			long reduceInputCount = 0__			for(long l: OnceFailingPrefixCounter.counts){_				reduceInputCount += l__			}_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__			assertEquals(NUM_STRINGS, reduceInputCount)__			_			for (Long count : OnceFailingPrefixCounter.prefixCounts.values()) {_				assertEquals(new Long(NUM_STRINGS / 40), count)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,long,reduce,input,count,0,for,long,l,once,failing,prefix,counter,counts,reduce,input,count,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,assert,equals,reduce,input,count,for,long,count,once,failing,prefix,counter,prefix,counts,values,assert,equals,new,long,40,count,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointingITCase -> @Test 	public void runCheckpointedProgram();1438267493;Runs the following program:__<pre>_[ (source)->(filter) ]-s->[ (map) ] -> [ (map) ] -> [ (groupBy/count)->(sink) ]_</pre>;@Test_	public void runCheckpointedProgram() {__		final long NUM_STRINGS = 10000000L__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)__		_		try {_			StreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(_																	"localhost", cluster.getJobManagerRPCPort())__			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()___			DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))__			_			stream_					_					.filter(new StringRichFilterFunction()).shuffle()__					_					.map(new StringPrefixCountRichMapFunction())_					.startNewChain()_					.map(new StatefulCounterFunction())__					_					.groupBy("prefix")_					.map(new OnceFailingPrefixCounter(NUM_STRINGS))_					.addSink(new SinkFunction<PrefixCount>() {__						@Override_						public void invoke(PrefixCount value) throws Exception {_							_						}_					})___			env.execute()__			_			long filterSum = 0__			for (long l : StringRichFilterFunction.counts) {_				filterSum += l__			}__			long mapSum = 0__			for (long l : StringPrefixCountRichMapFunction.counts) {_				mapSum += l__			}__			long countSum = 0__			for (long l : StatefulCounterFunction.counts) {_				countSum += l__			}_			_			long reduceInputCount = 0__			for(long l: OnceFailingPrefixCounter.counts){_				reduceInputCount += l__			}_			_			assertEquals(NUM_STRINGS, filterSum)__			assertEquals(NUM_STRINGS, mapSum)__			assertEquals(NUM_STRINGS, countSum)__			assertEquals(NUM_STRINGS, reduceInputCount)__			_			for (Long count : OnceFailingPrefixCounter.prefixCounts.values()) {_				assertEquals(new Long(NUM_STRINGS / 40), count)__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,s,map,map,group,by,count,sink,pre;test,public,void,run,checkpointed,program,final,long,10000000l,assert,true,broken,test,setup,40,0,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,job,manager,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,shuffle,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,stateful,counter,function,group,by,prefix,map,new,once,failing,prefix,counter,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value,throws,exception,env,execute,long,filter,sum,0,for,long,l,string,rich,filter,function,counts,filter,sum,l,long,map,sum,0,for,long,l,string,prefix,count,rich,map,function,counts,map,sum,l,long,count,sum,0,for,long,l,stateful,counter,function,counts,count,sum,l,long,reduce,input,count,0,for,long,l,once,failing,prefix,counter,counts,reduce,input,count,l,assert,equals,filter,sum,assert,equals,map,sum,assert,equals,count,sum,assert,equals,reduce,input,count,for,long,count,once,failing,prefix,counter,prefix,counts,values,assert,equals,new,long,40,count,catch,exception,e,e,print,stack,trace,fail,e,get,message
