# id;timestamp;commentText;codeText;commentWords;codeWords
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1450188912;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1450356550;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1452875386;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1453721631;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1457519595;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1457706632;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1472659089;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1479839013;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			StreamExecutionEnvironment env = _				StreamExecutionEnvironment.createRemoteEnvironment("localhost", cluster.getLeaderRPCPort())__			_			env.setParallelism(PARALLELISM)__			env.enableCheckpointing(500)__			env.getConfig().disableSysoutLogging()__			_			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ _			_			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))__	_			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,stream,execution,environment,env,stream,execution,environment,create,remote,environment,localhost,cluster,get,leader,rpcport,env,set,parallelism,parallelism,env,enable,checkpointing,500,env,get,config,disable,sysout,logging,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1485446628;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__			assertEquals("test setup broken", PARALLELISM, env.getParallelism())___			env.enableCheckpointing(500)__			env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5_ __			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))___			stream_					_					.filter(new LongRichFilterFunction())_	_					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())_	_					_					.map(new IdentityMapFunction())_					.startNewChain()_	_					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))_				_					.addSink(new DiscardingSink<Tuple1<Long>>())__			_			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)__			_			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.completedCheckpoints,_				LongRichFilterFunction.completedCheckpoints,_				LeftIdentityCoRichFlatMapFunction.completedCheckpoints,_				IdentityMapFunction.completedCheckpoints,_				OnceFailingReducer.completedCheckpoints_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {_					_					assertTrue("No checkpoint notification was received.", _						notifications.size() > 0)__					_					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))__					_					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)__					_					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,assert,equals,test,setup,broken,parallelism,env,get,parallelism,env,enable,checkpointing,500,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,completed,checkpoints,long,rich,filter,function,completed,checkpoints,left,identity,co,rich,flat,map,function,completed,checkpoints,identity,map,function,completed,checkpoints,once,failing,reducer,completed,checkpoints,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1496173247;Runs the following program._<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__			assertEquals("test setup broken", PARALLELISM, env.getParallelism())___			env.enableCheckpointing(500)__			env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5___			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))___			stream_					_					.filter(new LongRichFilterFunction())__					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__					_					.map(new IdentityMapFunction())_					.startNewChain()__					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))__					.addSink(new DiscardingSink<Tuple1<Long>>())___			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)___			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.COMPLETED_CHECKPOINTS,_				LongRichFilterFunction.COMPLETED_CHECKPOINTS,_				LeftIdentityCoRichFlatMapFunction.COMPLETED_CHECKPOINTS,_				IdentityMapFunction.COMPLETED_CHECKPOINTS,_				OnceFailingReducer.COMPLETED_CHECKPOINTS_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {__					assertTrue("No checkpoint notification was received.",_						notifications.size() > 0)___					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))___					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)___					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,assert,equals,test,setup,broken,parallelism,env,get,parallelism,env,enable,checkpointing,500,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,long,rich,filter,function,left,identity,co,rich,flat,map,function,identity,map,function,once,failing,reducer,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Test 	public void testProgram();1508854815;Runs the following program._<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Test_	public void testProgram() {_		try {_			final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__			assertEquals("test setup broken", PARALLELISM, env.getParallelism())___			env.enableCheckpointing(500)__			env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, 0L))___			final int numElements = 10000__			final int numTaskTotal = PARALLELISM * 5___			DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(numElements, numTaskTotal))___			stream_					_					.filter(new LongRichFilterFunction())__					_					.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__					_					.map(new IdentityMapFunction())_					.startNewChain()__					_					.keyBy(0)_					.reduce(new OnceFailingReducer(numElements))__					.addSink(new DiscardingSink<Tuple1<Long>>())___			env.execute()___			final long failureCheckpointID = OnceFailingReducer.failureCheckpointID__			assertNotEquals(0L, failureCheckpointID)___			List<List<Long>[]> allLists = Arrays.asList(_				GeneratingSourceFunction.COMPLETED_CHECKPOINTS,_				LongRichFilterFunction.COMPLETED_CHECKPOINTS,_				LeftIdentityCoRichFlatMapFunction.COMPLETED_CHECKPOINTS,_				IdentityMapFunction.COMPLETED_CHECKPOINTS,_				OnceFailingReducer.COMPLETED_CHECKPOINTS_			)___			for (List<Long>[] parallelNotifications : allLists) {_				for (List<Long> notifications : parallelNotifications) {__					assertTrue("No checkpoint notification was received.",_						notifications.size() > 0)___					assertFalse("Failure checkpoint was marked as completed.",_						notifications.contains(failureCheckpointID))___					assertFalse("No checkpoint received after failure.",_						notifications.get(notifications.size() - 1) == failureCheckpointID)___					assertTrue("Checkpoint notification was received multiple times",_						notifications.size() == new HashSet<Long>(notifications).size())__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;test,public,void,test,program,try,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,assert,equals,test,setup,broken,parallelism,env,get,parallelism,env,enable,checkpointing,500,env,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,0l,final,int,num,elements,10000,final,int,num,task,total,parallelism,5,data,stream,long,stream,env,add,source,new,generating,source,function,num,elements,num,task,total,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,num,elements,add,sink,new,discarding,sink,tuple1,long,env,execute,final,long,failure,checkpoint,id,once,failing,reducer,failure,checkpoint,id,assert,not,equals,0l,failure,checkpoint,id,list,list,long,all,lists,arrays,as,list,generating,source,function,long,rich,filter,function,left,identity,co,rich,flat,map,function,identity,map,function,once,failing,reducer,for,list,long,parallel,notifications,all,lists,for,list,long,notifications,parallel,notifications,assert,true,no,checkpoint,notification,was,received,notifications,size,0,assert,false,failure,checkpoint,was,marked,as,completed,notifications,contains,failure,checkpoint,id,assert,false,no,checkpoint,received,after,failure,notifications,get,notifications,size,1,failure,checkpoint,id,assert,true,checkpoint,notification,was,received,multiple,times,notifications,size,new,hash,set,long,notifications,size,catch,exception,e,e,print,stack,trace,fail,e,get,message
StreamCheckpointNotifierITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1438675870;Runs the following program:__<pre>_[ (source)->(filter)->(map) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		assertTrue("Broken test setup", NUM_STRINGS % 40 == 0)___		DataStream<String> stream = env.addSource(new StringGeneratingSourceFunction(NUM_STRINGS))___		stream_				_				.filter(new StringRichFilterFunction())__						_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new StringPrefixCountRichMapFunction())_				.startNewChain()_				.map(new IdentityMapFunction())__						_				.groupBy("prefix")_				.reduce(new OnceFailingReducer(NUM_STRINGS))_				.addSink(new SinkFunction<PrefixCount>() {_					@Override_					public void invoke(PrefixCount value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,map,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,assert,true,broken,test,setup,40,0,data,stream,string,stream,env,add,source,new,string,generating,source,function,stream,filter,new,string,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,string,prefix,count,rich,map,function,start,new,chain,map,new,identity,map,function,group,by,prefix,reduce,new,once,failing,reducer,add,sink,new,sink,function,prefix,count,override,public,void,invoke,prefix,count,value
StreamCheckpointNotifierITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1439064178;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(NUM_LONGS))___		stream_				_				.filter(new LongRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new IdentityMapFunction())_				.startNewChain()__				_				.groupBy(0)_				.reduce(new OnceFailingReducer(NUM_LONGS))_				.addSink(new SinkFunction<Tuple1<Long>>() {_					@Override_					public void invoke(Tuple1<Long> value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,long,stream,env,add,source,new,generating,source,function,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,group,by,0,reduce,new,once,failing,reducer,add,sink,new,sink,function,tuple1,long,override,public,void,invoke,tuple1,long,value
StreamCheckpointNotifierITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1443714973;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(NUM_LONGS))___		stream_				_				.filter(new LongRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new IdentityMapFunction())_				.startNewChain()__				_				.keyBy(0)_				.reduce(new OnceFailingReducer(NUM_LONGS))_				.addSink(new SinkFunction<Tuple1<Long>>() {_					@Override_					public void invoke(Tuple1<Long> value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,long,stream,env,add,source,new,generating,source,function,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,add,sink,new,sink,function,tuple1,long,override,public,void,invoke,tuple1,long,value
StreamCheckpointNotifierITCase -> @Override 	public void testProgram(StreamExecutionEnvironment env);1444053424;Runs the following program:__<pre>_[ (source)->(filter) ] -> [ (co-map) ] -> [ (map) ] -> [ (groupBy/reduce)->(sink) ]_</pre>;@Override_	public void testProgram(StreamExecutionEnvironment env) {__		DataStream<Long> stream = env.addSource(new GeneratingSourceFunction(NUM_LONGS))___		stream_				_				.filter(new LongRichFilterFunction())__				_				.connect(stream).flatMap(new LeftIdentityCoRichFlatMapFunction())__				_				.map(new IdentityMapFunction())_				.startNewChain()__				_				.keyBy(0)_				.reduce(new OnceFailingReducer(NUM_LONGS))_				.addSink(new SinkFunction<Tuple1<Long>>() {_					@Override_					public void invoke(Tuple1<Long> value) {_						_					}_				})__	};runs,the,following,program,pre,source,filter,co,map,map,group,by,reduce,sink,pre;override,public,void,test,program,stream,execution,environment,env,data,stream,long,stream,env,add,source,new,generating,source,function,stream,filter,new,long,rich,filter,function,connect,stream,flat,map,new,left,identity,co,rich,flat,map,function,map,new,identity,map,function,start,new,chain,key,by,0,reduce,new,once,failing,reducer,add,sink,new,sink,function,tuple1,long,override,public,void,invoke,tuple1,long,value
