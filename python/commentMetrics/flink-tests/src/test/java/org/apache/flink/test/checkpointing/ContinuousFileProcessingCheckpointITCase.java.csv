# id;timestamp;commentText;codeText;commentWords;codeWords
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException;1475792502;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException {__		assert (localFs != null)___		org.apache.hadoop.fs.Path tmp =_			new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)___		FSDataOutputStream stream = localFs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()__		return new Tuple2<>(tmp, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,interrupted,exception,assert,local,fs,null,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,local,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,return,new,tuple2,tmp,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException;1478168468;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException {__		assert (localFs != null)___		org.apache.hadoop.fs.Path tmp =_			new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)___		FSDataOutputStream stream = localFs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()__		return new Tuple2<>(tmp, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,interrupted,exception,assert,local,fs,null,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,local,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,return,new,tuple2,tmp,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException;1488543889;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException {__		assert (localFs != null)___		org.apache.hadoop.fs.Path tmp =_			new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)___		FSDataOutputStream stream = localFs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()__		return new Tuple2<>(tmp, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,interrupted,exception,assert,local,fs,null,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,local,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,return,new,tuple2,tmp,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException;1496173247;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException, InterruptedException {__		assert (localFs != null)___		org.apache.hadoop.fs.Path tmp =_			new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)___		FSDataOutputStream stream = localFs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx + ": " + sampleLine + " " + i + "\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()__		return new Tuple2<>(tmp, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,interrupted,exception,assert,local,fs,null,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,local,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,return,new,tuple2,tmp,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException;1460300202;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (fs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = fs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()__		fs.rename(tmp, file)__		Assert.assertTrue("No result file present", fs.exists(file))__		return new Tuple2<>(file, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,fs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,fs,rename,tmp,file,assert,assert,true,no,result,file,present,fs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException;1465940659;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (fs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = fs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		Assert.assertTrue("Result file present", !fs.exists(file))__		fs.rename(tmp, file)__		Assert.assertTrue("No result file present", fs.exists(file))__		return new Tuple2<>(file, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,fs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,assert,assert,true,result,file,present,fs,exists,file,fs,rename,tmp,file,assert,assert,true,no,result,file,present,fs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingCheckpointITCase -> private Tuple2<Path, String> fillWithData( 		String base, String fileName, int fileIdx, String sampleLine) throws IOException;1466773304;Fill the file with content and put the content in the {@code hdPathContents} list.;private Tuple2<Path, String> fillWithData(_		String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (fs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = fs.create(tmp)__		StringBuilder str = new StringBuilder()__		for(int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		Assert.assertTrue("Result file present", !fs.exists(file))__		fs.rename(tmp, file)__		Assert.assertTrue("No result file present", fs.exists(file))__		return new Tuple2<>(file, str.toString())__	};fill,the,file,with,content,and,put,the,content,in,the,code,hd,path,contents,list;private,tuple2,path,string,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,fs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,fs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,assert,assert,true,result,file,present,fs,exists,file,fs,rename,tmp,file,assert,assert,true,no,result,file,present,fs,exists,file,return,new,tuple2,file,str,to,string
