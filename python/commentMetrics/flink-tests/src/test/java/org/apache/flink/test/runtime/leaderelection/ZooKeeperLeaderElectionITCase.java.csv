# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1435313259;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 3__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			_			for(int i = 0_ i < numJMs - 2_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), timeout)___				Await.ready(future, timeout)___				cluster.clearLeader()___				jm.tell(Kill.getInstance())__			}__			ActorGateway jm = cluster.getLeaderGateway(timeout)___			cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___			Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), timeout)___			Await.ready(future, timeout)___			cluster.clearLeader()___			_			_			Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)___			jm.tell(PoisonPill.getInstance())___			thread.join(timeout.toMillis())___			if(thread.isAlive()) {_				jobSubmission.finished = true__				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}_		} finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if(thread != null && thread.isAlive() && jobSubmission != null) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,3,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,for,int,i,0,i,num,jms,2,i,actor,gateway,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,timeout,await,ready,future,timeout,cluster,clear,leader,jm,tell,kill,get,instance,actor,gateway,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,timeout,await,ready,future,timeout,cluster,clear,leader,tasks,blocking,once,receiver,module,eq,false,jm,tell,poison,pill,get,instance,thread,join,timeout,to,millis,if,thread,is,alive,job,submission,finished,true,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,null,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1441121146;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 3__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getPath())___		_		_		_		configuration.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY, timeout.toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			_			for (int i = 0_ i < numJMs - 2_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), timeout)___				Await.ready(future, timeout)___				cluster.clearLeader()___				jm.tell(Kill.getInstance())__			}__			ActorGateway jm = cluster.getLeaderGateway(timeout)___			cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___			Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), timeout)___			Await.ready(future, timeout)___			cluster.clearLeader()___			_			_			Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)___			jm.tell(PoisonPill.getInstance())___			thread.join(timeout.toMillis())___			if (thread.isAlive()) {_				jobSubmission.finished = true__				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}_		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive() && jobSubmission != null) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,3,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,path,configuration,set,string,config,constants,timeout,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,for,int,i,0,i,num,jms,2,i,actor,gateway,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,timeout,await,ready,future,timeout,cluster,clear,leader,jm,tell,kill,get,instance,actor,gateway,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,timeout,await,ready,future,timeout,cluster,clear,leader,tasks,blocking,once,receiver,module,eq,false,jm,tell,poison,pill,get,instance,thread,join,timeout,to,millis,if,thread,is,alive,job,submission,finished,true,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,null,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1444261927;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getPath())___		_		_		configuration.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,path,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1445247002;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1445511506;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.DEFAULT_EXECUTION_RETRY_DELAY_KEY, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1450188912;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.EXECUTION_RETRY_DELAY_KEY, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1450356550;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1457731872;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", new ExecutionConfig(), sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,new,execution,config,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1462182065;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1470734292;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_HA_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1471870754;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		Configuration configuration = new Configuration()___		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_STORAGE_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,configuration,configuration,new,configuration,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1472659089;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1476631755;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1486739468;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1489680183;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1490105415;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(ConfigConstants.AKKA_ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,config,constants,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1495082080;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(AkkaOptions.ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,akka,options,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1496173247;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(AkkaOptions.ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,akka,options,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1515007198;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(AkkaOptions.ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,akka,options,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1521561714;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())__		configuration.setString(HighAvailabilityOptions.HA_CLUSTER_ID, UUID.randomUUID().toString())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(TaskManagerOptions.NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(AkkaOptions.ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,string,high,availability,options,uuid,random,uuid,to,string,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,task,manager,options,num,slots,per,tm,configuration,set,string,akka,options,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception;1521668193;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderReelection() throws Exception {_		int numJMs = 10__		int numTMs = 2__		int numSlotsPerTM = 3__		int parallelism = numTMs * numSlotsPerTM___		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())__		configuration.setString(HighAvailabilityOptions.HA_CLUSTER_ID, UUID.randomUUID().toString())___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, numSlotsPerTM)___		_		_		configuration.setString(AkkaOptions.ASK_TIMEOUT, AkkaUtils.INF_TIMEOUT().toString())___		Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(true)___		JobVertex sender = new JobVertex("sender")__		JobVertex receiver = new JobVertex("receiver")___		sender.setInvokableClass(Tasks.Sender.class)__		receiver.setInvokableClass(Tasks.BlockingOnceReceiver.class)___		sender.setParallelism(parallelism)__		receiver.setParallelism(parallelism)___		receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE,_			ResultPartitionType.PIPELINED)___		SlotSharingGroup slotSharingGroup = new SlotSharingGroup()__		sender.setSlotSharingGroup(slotSharingGroup)__		receiver.setSlotSharingGroup(slotSharingGroup)___		final JobGraph graph = new JobGraph("Blocking test job", sender, receiver)___		final TestingCluster cluster = new TestingCluster(configuration)___		ActorSystem clientActorSystem = null___		Thread thread = null___		JobSubmitterRunnable jobSubmission = null___		try {_			cluster.start()___			clientActorSystem = cluster.startJobClientActorSystem(graph.getJobID())___			final ActorSystem clientAS = clientActorSystem___			jobSubmission = new JobSubmitterRunnable(clientAS, cluster, graph)___			thread = new Thread(jobSubmission)___			thread.start()___			Deadline deadline = timeout.$times(3).fromNow()___			_			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway jm = cluster.getLeaderGateway(deadline.timeLeft())___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(jm.actor())___				_				log.info("Sent recover all jobs manually to job manager {}.", jm.path())__				jm.tell(JobManagerMessages.getRecoverAllJobs())___				if (i < numJMs - 1) {_					Future<Object> future = jm.ask(new WaitForAllVerticesToBeRunningOrFinished(graph.getJobID()), deadline.timeLeft())___					Await.ready(future, deadline.timeLeft())___					cluster.clearLeader()___					if (i == numJMs - 2) {_						Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false)__					}__					log.info("Kill job manager {}.", jm.path())___					jm.tell(TestingJobManagerMessages.getDisablePostStop())__					jm.tell(Kill.getInstance())__				}_			}__			log.info("Waiting for submitter thread to terminate.")___			thread.join(deadline.timeLeft().toMillis())___			log.info("Submitter thread has terminated.")___			if (thread.isAlive()) {_				fail("The job submission thread did not stop (meaning it did not succeeded in" +_						"executing the test job.")__			}__			Await.result(jobSubmission.resultPromise.future(), deadline.timeLeft())__		}_		finally {_			if (clientActorSystem != null) {_				cluster.shutdownJobClientActorSystem(clientActorSystem)__			}__			if (thread != null && thread.isAlive()) {_				jobSubmission.finished = true__			}_			cluster.stop()__		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,reelection,throws,exception,int,num,jms,10,int,num,tms,2,int,num,slots,per,tm,3,int,parallelism,num,tms,num,slots,per,tm,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,string,high,availability,options,uuid,random,uuid,to,string,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,integer,config,constants,num,slots,per,tm,configuration,set,string,akka,options,akka,utils,to,string,tasks,blocking,once,receiver,module,eq,true,job,vertex,sender,new,job,vertex,sender,job,vertex,receiver,new,job,vertex,receiver,sender,set,invokable,class,tasks,sender,class,receiver,set,invokable,class,tasks,blocking,once,receiver,class,sender,set,parallelism,parallelism,receiver,set,parallelism,parallelism,receiver,connect,new,data,set,as,input,sender,distribution,pattern,pointwise,result,partition,type,pipelined,slot,sharing,group,slot,sharing,group,new,slot,sharing,group,sender,set,slot,sharing,group,slot,sharing,group,receiver,set,slot,sharing,group,slot,sharing,group,final,job,graph,graph,new,job,graph,blocking,test,job,sender,receiver,final,testing,cluster,cluster,new,testing,cluster,configuration,actor,system,client,actor,system,null,thread,thread,null,job,submitter,runnable,job,submission,null,try,cluster,start,client,actor,system,cluster,start,job,client,actor,system,graph,get,job,id,final,actor,system,client,as,client,actor,system,job,submission,new,job,submitter,runnable,client,as,cluster,graph,thread,new,thread,job,submission,thread,start,deadline,deadline,timeout,times,3,from,now,for,int,i,0,i,num,jms,i,actor,gateway,jm,cluster,get,leader,gateway,deadline,time,left,cluster,wait,for,task,managers,to,be,registered,at,job,manager,jm,actor,log,info,sent,recover,all,jobs,manually,to,job,manager,jm,path,jm,tell,job,manager,messages,get,recover,all,jobs,if,i,num,jms,1,future,object,future,jm,ask,new,wait,for,all,vertices,to,be,running,or,finished,graph,get,job,id,deadline,time,left,await,ready,future,deadline,time,left,cluster,clear,leader,if,i,num,jms,2,tasks,blocking,once,receiver,module,eq,false,log,info,kill,job,manager,jm,path,jm,tell,testing,job,manager,messages,get,disable,post,stop,jm,tell,kill,get,instance,log,info,waiting,for,submitter,thread,to,terminate,thread,join,deadline,time,left,to,millis,log,info,submitter,thread,has,terminated,if,thread,is,alive,fail,the,job,submission,thread,did,not,stop,meaning,it,did,not,succeeded,in,executing,the,test,job,await,result,job,submission,result,promise,future,deadline,time,left,finally,if,client,actor,system,null,cluster,shutdown,job,client,actor,system,client,actor,system,if,thread,null,thread,is,alive,job,submission,finished,true,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1435313259;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for(int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1441121146;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getPath())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,path,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1444261927;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getPath())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,path,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1445247002;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1445511506;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1450188912;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1450356550;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1457731872;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1462182065;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_RECOVERY_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1470734292;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.ZOOKEEPER_HA_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1471870754;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		Configuration configuration = new Configuration()___		int numJMs = 10__		int numTMs = 3___		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)__		configuration.setString(ConfigConstants.STATE_BACKEND, "filesystem")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_STORAGE_PATH, tempDirectory.getAbsoluteFile().toURI().toString())___		ForkableFlinkMiniCluster cluster = new ForkableFlinkMiniCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,configuration,configuration,new,configuration,int,num,jms,10,int,num,tms,3,configuration,set,string,config,constants,zookeeper,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,configuration,set,string,config,constants,filesystem,configuration,set,string,config,constants,temp,directory,get,absolute,file,to,uri,to,string,forkable,flink,mini,cluster,cluster,new,forkable,flink,mini,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1472659089;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1476631755;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1486739468;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1489680183;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1490105415;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_						JobManagerMessages.getRequestNumberRegisteredTaskManager(),_						timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		}_		finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1495082080;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1496173247;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1515007198;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1521561714;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())__		configuration.setString(HighAvailabilityOptions.HA_CLUSTER_ID, UUID.randomUUID().toString())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,string,high,availability,options,uuid,random,uuid,to,string,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception;1521668193;Tests that the TaskManagers successfully register at the new leader once the old leader_is terminated.;@Test_	public void testTaskManagerRegistrationAtReelectedLeader() throws Exception {_		File rootFolder = tempFolder.getRoot()___		Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			rootFolder.getPath())__		configuration.setString(HighAvailabilityOptions.HA_CLUSTER_ID, UUID.randomUUID().toString())___		int numJMs = 10__		int numTMs = 3___		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_JOB_MANAGER, numJMs)__		configuration.setInteger(ConfigConstants.LOCAL_NUMBER_TASK_MANAGER, numTMs)___		TestingCluster cluster = new TestingCluster(configuration)___		try {_			cluster.start()___			for (int i = 0_ i < numJMs_ i++) {_				ActorGateway leadingJM = cluster.getLeaderGateway(timeout)___				cluster.waitForTaskManagersToBeRegisteredAtJobManager(leadingJM.actor())___				Future<Object> registeredTMs = leadingJM.ask(_					JobManagerMessages.getRequestNumberRegisteredTaskManager(),_					timeout)___				int numRegisteredTMs = (Integer) Await.result(registeredTMs, timeout)___				assertEquals(numTMs, numRegisteredTMs)___				cluster.clearLeader()__				leadingJM.tell(PoisonPill.getInstance())__			}_		} finally {_			cluster.stop()__		}_	};tests,that,the,task,managers,successfully,register,at,the,new,leader,once,the,old,leader,is,terminated;test,public,void,test,task,manager,registration,at,reelected,leader,throws,exception,file,root,folder,temp,folder,get,root,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,root,folder,get,path,configuration,set,string,high,availability,options,uuid,random,uuid,to,string,int,num,jms,10,int,num,tms,3,configuration,set,integer,config,constants,num,jms,configuration,set,integer,config,constants,num,tms,testing,cluster,cluster,new,testing,cluster,configuration,try,cluster,start,for,int,i,0,i,num,jms,i,actor,gateway,leading,jm,cluster,get,leader,gateway,timeout,cluster,wait,for,task,managers,to,be,registered,at,job,manager,leading,jm,actor,future,object,registered,tms,leading,jm,ask,job,manager,messages,get,request,number,registered,task,manager,timeout,int,num,registered,tms,integer,await,result,registered,tms,timeout,assert,equals,num,tms,num,registered,tms,cluster,clear,leader,leading,jm,tell,poison,pill,get,instance,finally,cluster,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderChange() throws Exception;1548952991;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderChange() throws Exception {_		final int numDispatchers = 3__		final int numTMs = 2__		final int numSlotsPerTM = 2___		final Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			tempFolder.newFolder().getAbsolutePath())___		_		configuration.setLong(ClusterOptions.REFUSED_REGISTRATION_DELAY, 50L)___		final TestingMiniClusterConfiguration miniClusterConfiguration = new TestingMiniClusterConfiguration.Builder()_			.setConfiguration(configuration)_			.setNumberDispatcherResourceManagerComponents(numDispatchers)_			.setNumTaskManagers(numTMs)_			.setNumSlotsPerTaskManager(numSlotsPerTM)_			.build()___		LeaderRetrievalService dispatcherLeaderRetriever = null___		try (TestingMiniCluster miniCluster = new TestingMiniCluster(miniClusterConfiguration)) {_			Deadline timeout = Deadline.fromNow(TEST_TIMEOUT)__			miniCluster.start()___			final int parallelism = numTMs * numSlotsPerTM__			JobGraph jobGraph = createJobGraph(parallelism)___			miniCluster.submitJob(jobGraph).get()___			Collection<DispatcherResourceManagerComponent<?>> dispatcherResourceManagerComponents = miniCluster.getDispatcherResourceManagerComponents()___			final NewLeaderRetriever newLeaderRetriever = new NewLeaderRetriever()__			final HighAvailabilityServices highAvailabilityServices = miniCluster.getHighAvailabilityServices()__			dispatcherLeaderRetriever = highAvailabilityServices.getDispatcherLeaderRetriever()__			dispatcherLeaderRetriever.start(newLeaderRetriever)___			for (int i = 0_ i < numDispatchers - 1_ i++) {_				final DispatcherResourceManagerComponent<?> leadingDispatcherResourceManagerComponent = getLeadingDispatcherResourceManagerComponent(_					dispatcherResourceManagerComponents,_					newLeaderRetriever)___				final Dispatcher dispatcher = leadingDispatcherResourceManagerComponent.getDispatcher()___				CommonTestUtils.waitUntilCondition(() -> dispatcher.requestJobStatus(jobGraph.getJobID(), RPC_TIMEOUT).get() == JobStatus.RUNNING, timeout, 10L)___				leadingDispatcherResourceManagerComponent.closeAsync()__			}__			final DispatcherResourceManagerComponent<?> leadingDispatcherResourceManagerComponent = getLeadingDispatcherResourceManagerComponent(_				dispatcherResourceManagerComponents,_				newLeaderRetriever)___			CompletableFuture<JobResult> jobResultFuture = leadingDispatcherResourceManagerComponent.getDispatcher().requestJobResult(jobGraph.getJobID(), RPC_TIMEOUT)__			BlockingOperator.unblock()___			assertThat(jobResultFuture.get().isSuccess(), is(true))__		} finally {_			if (dispatcherLeaderRetriever != null) {_				dispatcherLeaderRetriever.stop()__			}_		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,change,throws,exception,final,int,num,dispatchers,3,final,int,num,tms,2,final,int,num,slots,per,tm,2,final,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,temp,folder,new,folder,get,absolute,path,configuration,set,long,cluster,options,50l,final,testing,mini,cluster,configuration,mini,cluster,configuration,new,testing,mini,cluster,configuration,builder,set,configuration,configuration,set,number,dispatcher,resource,manager,components,num,dispatchers,set,num,task,managers,num,tms,set,num,slots,per,task,manager,num,slots,per,tm,build,leader,retrieval,service,dispatcher,leader,retriever,null,try,testing,mini,cluster,mini,cluster,new,testing,mini,cluster,mini,cluster,configuration,deadline,timeout,deadline,from,now,mini,cluster,start,final,int,parallelism,num,tms,num,slots,per,tm,job,graph,job,graph,create,job,graph,parallelism,mini,cluster,submit,job,job,graph,get,collection,dispatcher,resource,manager,component,dispatcher,resource,manager,components,mini,cluster,get,dispatcher,resource,manager,components,final,new,leader,retriever,new,leader,retriever,new,new,leader,retriever,final,high,availability,services,high,availability,services,mini,cluster,get,high,availability,services,dispatcher,leader,retriever,high,availability,services,get,dispatcher,leader,retriever,dispatcher,leader,retriever,start,new,leader,retriever,for,int,i,0,i,num,dispatchers,1,i,final,dispatcher,resource,manager,component,leading,dispatcher,resource,manager,component,get,leading,dispatcher,resource,manager,component,dispatcher,resource,manager,components,new,leader,retriever,final,dispatcher,dispatcher,leading,dispatcher,resource,manager,component,get,dispatcher,common,test,utils,wait,until,condition,dispatcher,request,job,status,job,graph,get,job,id,get,job,status,running,timeout,10l,leading,dispatcher,resource,manager,component,close,async,final,dispatcher,resource,manager,component,leading,dispatcher,resource,manager,component,get,leading,dispatcher,resource,manager,component,dispatcher,resource,manager,components,new,leader,retriever,completable,future,job,result,job,result,future,leading,dispatcher,resource,manager,component,get,dispatcher,request,job,result,job,graph,get,job,id,blocking,operator,unblock,assert,that,job,result,future,get,is,success,is,true,finally,if,dispatcher,leader,retriever,null,dispatcher,leader,retriever,stop
ZooKeeperLeaderElectionITCase -> @Test 	public void testJobExecutionOnClusterWithLeaderChange() throws Exception;1550139302;Tests that a job can be executed after a new leader has been elected. For all except for the_last leader, the job is blocking. The JobManager will be terminated while executing the_blocking job. Once only one JobManager is left, it is checked that a non-blocking can be_successfully executed.;@Test_	public void testJobExecutionOnClusterWithLeaderChange() throws Exception {_		final int numDispatchers = 3__		final int numTMs = 2__		final int numSlotsPerTM = 2___		final Configuration configuration = ZooKeeperTestUtils.createZooKeeperHAConfig(_			zkServer.getConnectString(),_			tempFolder.newFolder().getAbsolutePath())___		_		configuration.setLong(ClusterOptions.REFUSED_REGISTRATION_DELAY, 50L)___		final TestingMiniClusterConfiguration miniClusterConfiguration = new TestingMiniClusterConfiguration.Builder()_			.setConfiguration(configuration)_			.setNumberDispatcherResourceManagerComponents(numDispatchers)_			.setNumTaskManagers(numTMs)_			.setNumSlotsPerTaskManager(numSlotsPerTM)_			.build()___		LeaderRetrievalService dispatcherLeaderRetriever = null___		try (TestingMiniCluster miniCluster = new TestingMiniCluster(miniClusterConfiguration)) {_			Deadline timeout = Deadline.fromNow(TEST_TIMEOUT)__			miniCluster.start()___			final int parallelism = numTMs * numSlotsPerTM__			JobGraph jobGraph = createJobGraph(parallelism)___			miniCluster.submitJob(jobGraph).get()___			Collection<DispatcherResourceManagerComponent<?>> dispatcherResourceManagerComponents = miniCluster.getDispatcherResourceManagerComponents()___			final NewLeaderRetriever newLeaderRetriever = new NewLeaderRetriever()__			final HighAvailabilityServices highAvailabilityServices = miniCluster.getHighAvailabilityServices()__			dispatcherLeaderRetriever = highAvailabilityServices.getDispatcherLeaderRetriever()__			dispatcherLeaderRetriever.start(newLeaderRetriever)___			for (int i = 0_ i < numDispatchers - 1_ i++) {_				final DispatcherResourceManagerComponent<?> leadingDispatcherResourceManagerComponent = getLeadingDispatcherResourceManagerComponent(_					dispatcherResourceManagerComponents,_					newLeaderRetriever)___				final Dispatcher dispatcher = leadingDispatcherResourceManagerComponent.getDispatcher()___				CommonTestUtils.waitUntilCondition(() -> dispatcher.requestJobStatus(jobGraph.getJobID(), RPC_TIMEOUT).get() == JobStatus.RUNNING, timeout, 50L)___				leadingDispatcherResourceManagerComponent.closeAsync()__			}__			final DispatcherResourceManagerComponent<?> leadingDispatcherResourceManagerComponent = getLeadingDispatcherResourceManagerComponent(_				dispatcherResourceManagerComponents,_				newLeaderRetriever)___			CompletableFuture<JobResult> jobResultFuture = leadingDispatcherResourceManagerComponent.getDispatcher().requestJobResult(jobGraph.getJobID(), RPC_TIMEOUT)__			BlockingOperator.unblock()___			assertThat(jobResultFuture.get().isSuccess(), is(true))__		} finally {_			if (dispatcherLeaderRetriever != null) {_				dispatcherLeaderRetriever.stop()__			}_		}_	};tests,that,a,job,can,be,executed,after,a,new,leader,has,been,elected,for,all,except,for,the,last,leader,the,job,is,blocking,the,job,manager,will,be,terminated,while,executing,the,blocking,job,once,only,one,job,manager,is,left,it,is,checked,that,a,non,blocking,can,be,successfully,executed;test,public,void,test,job,execution,on,cluster,with,leader,change,throws,exception,final,int,num,dispatchers,3,final,int,num,tms,2,final,int,num,slots,per,tm,2,final,configuration,configuration,zoo,keeper,test,utils,create,zoo,keeper,haconfig,zk,server,get,connect,string,temp,folder,new,folder,get,absolute,path,configuration,set,long,cluster,options,50l,final,testing,mini,cluster,configuration,mini,cluster,configuration,new,testing,mini,cluster,configuration,builder,set,configuration,configuration,set,number,dispatcher,resource,manager,components,num,dispatchers,set,num,task,managers,num,tms,set,num,slots,per,task,manager,num,slots,per,tm,build,leader,retrieval,service,dispatcher,leader,retriever,null,try,testing,mini,cluster,mini,cluster,new,testing,mini,cluster,mini,cluster,configuration,deadline,timeout,deadline,from,now,mini,cluster,start,final,int,parallelism,num,tms,num,slots,per,tm,job,graph,job,graph,create,job,graph,parallelism,mini,cluster,submit,job,job,graph,get,collection,dispatcher,resource,manager,component,dispatcher,resource,manager,components,mini,cluster,get,dispatcher,resource,manager,components,final,new,leader,retriever,new,leader,retriever,new,new,leader,retriever,final,high,availability,services,high,availability,services,mini,cluster,get,high,availability,services,dispatcher,leader,retriever,high,availability,services,get,dispatcher,leader,retriever,dispatcher,leader,retriever,start,new,leader,retriever,for,int,i,0,i,num,dispatchers,1,i,final,dispatcher,resource,manager,component,leading,dispatcher,resource,manager,component,get,leading,dispatcher,resource,manager,component,dispatcher,resource,manager,components,new,leader,retriever,final,dispatcher,dispatcher,leading,dispatcher,resource,manager,component,get,dispatcher,common,test,utils,wait,until,condition,dispatcher,request,job,status,job,graph,get,job,id,get,job,status,running,timeout,50l,leading,dispatcher,resource,manager,component,close,async,final,dispatcher,resource,manager,component,leading,dispatcher,resource,manager,component,get,leading,dispatcher,resource,manager,component,dispatcher,resource,manager,components,new,leader,retriever,completable,future,job,result,job,result,future,leading,dispatcher,resource,manager,component,get,dispatcher,request,job,result,job,graph,get,job,id,blocking,operator,unblock,assert,that,job,result,future,get,is,success,is,true,finally,if,dispatcher,leader,retriever,null,dispatcher,leader,retriever,stop
