# id;timestamp;commentText;codeText;commentWords;codeWords
LongRandomGenerator -> public <T> T choseRandomElement(Collection<T> collection);1469088690;@return a randomly chosen element from collection;public <T> T choseRandomElement(Collection<T> collection) {_		int choice = choseRandomIndex(collection)__		for (T key : collection) {_			if (choice == 0) {_				return key__			}_			--choice__		}_		return null__	};return,a,randomly,chosen,element,from,collection;public,t,t,chose,random,element,collection,t,collection,int,choice,chose,random,index,collection,for,t,key,collection,if,choice,0,return,key,choice,return,null
LongRandomGenerator -> public <T> T choseRandomElement(Collection<T> collection);1469088690;@return a randomly chosen element from collection;public <T> T choseRandomElement(Collection<T> collection) {_		int choice = choseRandomIndex(collection)__		for (T key : collection) {_			if (choice == 0) {_				return key__			}_			--choice__		}_		return null__	};return,a,randomly,chosen,element,from,collection;public,t,t,chose,random,element,collection,t,collection,int,choice,chose,random,index,collection,for,t,key,collection,if,choice,0,return,key,choice,return,null
LongRandomGenerator -> public long randomLongBetween(long minInclusive, long maxExclusive);1469088690;@param minInclusive_@param maxExclusive_@return random long between the provided min (inclusive) and max (exclusive);public long randomLongBetween(long minInclusive, long maxExclusive) {_		if (maxExclusive <= minInclusive) {_			throw new IllegalArgumentException(String.format("Error: min (found %s) must be < than max (found %s)!",_					minInclusive, maxExclusive))__		}_		long bits__		long generatedValue__		long delta = maxExclusive - minInclusive__		do {_			bits = (nextLong() << 1) >>> 1__			generatedValue = bits % delta__		} while (bits - generatedValue + (delta - 1) < 0L)__		return minInclusive + generatedValue__	};param,min,inclusive,param,max,exclusive,return,random,long,between,the,provided,min,inclusive,and,max,exclusive;public,long,random,long,between,long,min,inclusive,long,max,exclusive,if,max,exclusive,min,inclusive,throw,new,illegal,argument,exception,string,format,error,min,found,s,must,be,than,max,found,s,min,inclusive,max,exclusive,long,bits,long,generated,value,long,delta,max,exclusive,min,inclusive,do,bits,next,long,1,1,generated,value,bits,delta,while,bits,generated,value,delta,1,0l,return,min,inclusive,generated,value
LongRandomGenerator -> public long randomLongBetween(long minInclusive, long maxExclusive);1469088690;@param minInclusive lower bound for the returned value (inclusive)_@param maxExclusive upper bound for the returned value (exclusive)_@return random long between the provided min (inclusive) and max (exclusive);public long randomLongBetween(long minInclusive, long maxExclusive) {_		if (maxExclusive <= minInclusive) {_			throw new IllegalArgumentException(String.format("Error: min (found %s) must be < than max (found %s)!",_					minInclusive, maxExclusive))__		}_		long bits__		long generatedValue__		long delta = maxExclusive - minInclusive__		do {_			bits = (nextLong() << 1) >>> 1__			generatedValue = bits % delta__		} while (bits - generatedValue + (delta - 1) < 0L)__		return minInclusive + generatedValue__	};param,min,inclusive,lower,bound,for,the,returned,value,inclusive,param,max,exclusive,upper,bound,for,the,returned,value,exclusive,return,random,long,between,the,provided,min,inclusive,and,max,exclusive;public,long,random,long,between,long,min,inclusive,long,max,exclusive,if,max,exclusive,min,inclusive,throw,new,illegal,argument,exception,string,format,error,min,found,s,must,be,than,max,found,s,min,inclusive,max,exclusive,long,bits,long,generated,value,long,delta,max,exclusive,min,inclusive,do,bits,next,long,1,1,generated,value,bits,delta,while,bits,generated,value,delta,1,0l,return,min,inclusive,generated,value
LongRandomGenerator -> public long randomLongBetween(long minInclusive, long maxExclusive);1499899067;@param minInclusive lower bound for the returned value (inclusive)_@param maxExclusive upper bound for the returned value (exclusive)_@return random long between the provided min (inclusive) and max (exclusive);public long randomLongBetween(long minInclusive, long maxExclusive) {_		if (maxExclusive <= minInclusive) {_			throw new IllegalArgumentException(String.format("Error: min (found %s) must be < than max (found %s)!",_					minInclusive, maxExclusive))__		}_		long bits__		long generatedValue__		long delta = maxExclusive - minInclusive__		do {_			bits = (nextLong() << 1) >>> 1__			generatedValue = bits % delta__		} while (bits - generatedValue + (delta - 1) < 0L)__		return minInclusive + generatedValue__	};param,min,inclusive,lower,bound,for,the,returned,value,inclusive,param,max,exclusive,upper,bound,for,the,returned,value,exclusive,return,random,long,between,the,provided,min,inclusive,and,max,exclusive;public,long,random,long,between,long,min,inclusive,long,max,exclusive,if,max,exclusive,min,inclusive,throw,new,illegal,argument,exception,string,format,error,min,found,s,must,be,than,max,found,s,min,inclusive,max,exclusive,long,bits,long,generated,value,long,delta,max,exclusive,min,inclusive,do,bits,next,long,1,1,generated,value,bits,delta,while,bits,generated,value,delta,1,0l,return,min,inclusive,generated,value
LongRandomGenerator -> public int choseRandomIndex(Collection<?> collection);1469088690;@param collection_@return;public int choseRandomIndex(Collection<?> collection) {_		return nextInt(collection.size())__	};param,collection,return;public,int,chose,random,index,collection,collection,return,next,int,collection,size
LongRandomGenerator -> public int choseRandomIndex(Collection<?> collection);1469088690;@param collection collection to chose from_@return selects a valid random index from the collection's range of indices;public int choseRandomIndex(Collection<?> collection) {_		return nextInt(collection.size())__	};param,collection,collection,to,chose,from,return,selects,a,valid,random,index,from,the,collection,s,range,of,indices;public,int,chose,random,index,collection,collection,return,next,int,collection,size
LongRandomGenerator -> public int choseRandomIndex(Collection<?> collection);1499899067;@param collection collection to chose from_@return selects a valid random index from the collection's range of indices;public int choseRandomIndex(Collection<?> collection) {_		return nextInt(collection.size())__	};param,collection,collection,to,chose,from,return,selects,a,valid,random,index,from,the,collection,s,range,of,indices;public,int,chose,random,index,collection,collection,return,next,int,collection,size
