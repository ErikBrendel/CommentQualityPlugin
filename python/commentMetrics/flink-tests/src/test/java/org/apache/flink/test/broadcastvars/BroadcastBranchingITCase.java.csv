# id;timestamp;commentText;codeText;commentWords;codeWords
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1404986750;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1405088715;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1410904939;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1411473561;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1413224675;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setDegreeOfParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,degree,of,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1426671883;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;Sc1(id,a,b,c) --;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc1,id,a,b,c;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;\;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;\        /          / <=BC;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};bc;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;Jn1(id) -- Mp1 ----;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};jn1,id,mp1;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;/;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected Plan getTestJob();1445541239;Sc3(id,y) --------;@Override_	protected Plan getTestJob() {_		_		FileDataSource sc1 = new FileDataSource(new CsvInputFormat(), sc1Path)__		CsvInputFormat.configureRecordFormat(sc1).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)_				.field(IntValue.class, 2).field(IntValue.class, 3)___		_		FileDataSource sc2 = new FileDataSource(new CsvInputFormat(), sc2Path)__		CsvInputFormat.configureRecordFormat(sc2).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		FileDataSource sc3 = new FileDataSource(new CsvInputFormat(), sc3Path)__		CsvInputFormat.configureRecordFormat(sc3).fieldDelimiter(' ').field(StringValue.class, 0).field(IntValue.class, 1)___		_		JoinOperator jn1 = JoinOperator.builder(Jn1.class, StringValue.class, 0, 0).input1(sc2).input2(sc3).build()___		_		JoinOperator jn2 = JoinOperator.builder(Jn2.class, StringValue.class, 0, 0).input1(jn1).input2(sc1).build()___		_		MapOperator mp1 = MapOperator.builder(Mp1.class).input(jn1).build()___		_		MapOperator mp2 = MapOperator.builder(Mp2.class).setBroadcastVariable("z", mp1).input(jn2).build()___		FileDataSink output = new FileDataSink(new ContractITCaseOutputFormat(), resultPath)__		output.setParallelism(1)__		output.setInput(mp2)___		return new Plan(output)__	};sc3,id,y;override,protected,plan,get,test,job,file,data,source,sc1,new,file,data,source,new,csv,input,format,sc1path,csv,input,format,configure,record,format,sc1,field,delimiter,field,string,value,class,0,field,int,value,class,1,field,int,value,class,2,field,int,value,class,3,file,data,source,sc2,new,file,data,source,new,csv,input,format,sc2path,csv,input,format,configure,record,format,sc2,field,delimiter,field,string,value,class,0,field,int,value,class,1,file,data,source,sc3,new,file,data,source,new,csv,input,format,sc3path,csv,input,format,configure,record,format,sc3,field,delimiter,field,string,value,class,0,field,int,value,class,1,join,operator,jn1,join,operator,builder,jn1,class,string,value,class,0,0,input1,sc2,input2,sc3,build,join,operator,jn2,join,operator,builder,jn2,class,string,value,class,0,0,input1,jn1,input2,sc1,build,map,operator,mp1,map,operator,builder,mp1,class,input,jn1,build,map,operator,mp2,map,operator,builder,mp2,class,set,broadcast,variable,z,mp1,input,jn2,build,file,data,sink,output,new,file,data,sink,new,contract,itcase,output,format,result,path,output,set,parallelism,1,output,set,input,mp2,return,new,plan,output
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;Sc1(id,a,b,c) --;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc1,id,a,b,c;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;\;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;\        /          / <=BC;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};bc;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;Jn1(id) -- Mp1 ----;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};jn1,id,mp1;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;/;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1445977358;Sc3(id,y) --------;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1_				= sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2_				= jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1_				= jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc3,id,y;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;Sc1(id,a,b,c) --;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc1,id,a,b,c;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;\;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;Sc2(id,x) --------         Jn2(id) -- Mp2 -- Sk;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc2,id,x,jn2,id,mp2,sk;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;\        /          / <=BC;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};bc;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;Jn1(id) -- Mp1 ----;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};jn1,id,mp1;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;/;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
BroadcastBranchingITCase -> @Override 	protected void testProgram() throws Exception;1496173247;Sc3(id,y) --------;@Override_	protected void testProgram() throws Exception {_		ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(1)___		_		DataSet<Tuple4<String, Integer, Integer, Integer>> sc1 = env_				.fromElements(new Tuple4<>("1", 61, 6, 29), new Tuple4<>("2", 7, 13, 10), new Tuple4<>("3", 8, 13, 27))___		_		DataSet<Tuple2<String, Integer>> sc2 = env_				.fromElements(new Tuple2<>("1", 5), new Tuple2<>("2", 3), new Tuple2<>("3", 6))___		_		DataSet<Tuple2<String, Integer>> sc3 = env_				.fromElements(new Tuple2<>("1", 2), new Tuple2<>("2", 3), new Tuple2<>("3", 7))___		_		JoinOperator<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple3<String, Integer, Integer>> jn1 =_				sc2.join(sc3).where(0).equalTo(0).with(new Jn1())___		_		JoinOperator<Tuple3<String, Integer, Integer>, Tuple4<String, Integer, Integer, Integer>, Tuple2<String, Integer>> jn2 =_				jn1.join(sc1).where(0).equalTo(0).with(new Jn2())___		_		FlatMapOperator<Tuple3<String, Integer, Integer>, Tuple2<String, Integer>> mp1 =_				jn1.flatMap(new Mp1())___		_		List<Tuple2<String, Integer>> result = jn2.flatMap(new Mp2()).withBroadcastSet(mp1, "z").collect()___		JavaProgramTestBase.compareResultAsText(result, RESULT)__	};sc3,id,y;override,protected,void,test,program,throws,exception,execution,environment,env,execution,environment,get,execution,environment,env,set,parallelism,1,data,set,tuple4,string,integer,integer,integer,sc1,env,from,elements,new,tuple4,1,61,6,29,new,tuple4,2,7,13,10,new,tuple4,3,8,13,27,data,set,tuple2,string,integer,sc2,env,from,elements,new,tuple2,1,5,new,tuple2,2,3,new,tuple2,3,6,data,set,tuple2,string,integer,sc3,env,from,elements,new,tuple2,1,2,new,tuple2,2,3,new,tuple2,3,7,join,operator,tuple2,string,integer,tuple2,string,integer,tuple3,string,integer,integer,jn1,sc2,join,sc3,where,0,equal,to,0,with,new,jn1,join,operator,tuple3,string,integer,integer,tuple4,string,integer,integer,integer,tuple2,string,integer,jn2,jn1,join,sc1,where,0,equal,to,0,with,new,jn2,flat,map,operator,tuple3,string,integer,integer,tuple2,string,integer,mp1,jn1,flat,map,new,mp1,list,tuple2,string,integer,result,jn2,flat,map,new,mp2,with,broadcast,set,mp1,z,collect,java,program,test,base,compare,result,as,text,result,result
