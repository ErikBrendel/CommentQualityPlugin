# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1496173247;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				cluster.getHostname(),_				cluster.getPort(),_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,cluster,get,hostname,cluster,get,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1519145307;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1521561714;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1522660437;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1537651010;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1540216840;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final URI restAddress = MINI_CLUSTER_RESOURCE.getMiniCluster().getRestAddress()__		final String hostname = restAddress.getHost()__		final int port = restAddress.getPort()___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,uri,rest,address,get,mini,cluster,get,rest,address,final,string,hostname,rest,address,get,host,final,int,port,rest,address,get,port,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test 	public void testUserSpecificParallelism() throws Exception;1549018706;Ensure that the program parallelism can be set even if the configuration is supplied.;@Test_	public void testUserSpecificParallelism() throws Exception {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, VALID_STARTUP_TIMEOUT)___		final URI restAddress = MINI_CLUSTER_RESOURCE.getRestAddres()__		final String hostname = restAddress.getHost()__		final int port = restAddress.getPort()___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.setParallelism(USER_DOP)__		env.getConfig().disableSysoutLogging()___		DataSet<Integer> result = env.createInput(new ParallelismDependentInputFormat())_				.rebalance()_				.mapPartition(new RichMapPartitionFunction<Integer, Integer>() {_					@Override_					public void mapPartition(Iterable<Integer> values, Collector<Integer> out) throws Exception {_						out.collect(getRuntimeContext().getIndexOfThisSubtask())__					}_				})__		List<Integer> resultCollection = result.collect()__		assertEquals(USER_DOP, resultCollection.size())__	};ensure,that,the,program,parallelism,can,be,set,even,if,the,configuration,is,supplied;test,public,void,test,user,specific,parallelism,throws,exception,configuration,config,new,configuration,config,set,string,akka,options,final,uri,rest,address,get,rest,addres,final,string,hostname,rest,address,get,host,final,int,port,rest,address,get,port,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,set,parallelism,env,get,config,disable,sysout,logging,data,set,integer,result,env,create,input,new,parallelism,dependent,input,format,rebalance,map,partition,new,rich,map,partition,function,integer,integer,override,public,void,map,partition,iterable,integer,values,collector,integer,out,throws,exception,out,collect,get,runtime,context,get,index,of,this,subtask,list,integer,result,collection,result,collect,assert,equals,result,collection,size
RemoteEnvironmentITCase -> @Test(expected = FlinkException.class) 	public void testInvalidAkkaConfiguration() throws Throwable;1496173247;Ensure that that Akka configuration parameters can be set.;@Test(expected = FlinkException.class)_	public void testInvalidAkkaConfiguration() throws Throwable {_		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, INVALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				cluster.getHostname(),_				cluster.getPort(),_				config_		)__		env.getConfig().disableSysoutLogging()___		DataSet<String> result = env.createInput(new TestNonRichInputFormat())__		result.output(new LocalCollectionOutputFormat<>(new ArrayList<String>()))__		try {_			env.execute()__			Assert.fail("Program should not run successfully, cause of invalid akka settings.")__		} catch (ProgramInvocationException ex) {_			throw ex.getCause()__		}_	};ensure,that,that,akka,configuration,parameters,can,be,set;test,expected,flink,exception,class,public,void,test,invalid,akka,configuration,throws,throwable,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,cluster,get,hostname,cluster,get,port,config,env,get,config,disable,sysout,logging,data,set,string,result,env,create,input,new,test,non,rich,input,format,result,output,new,local,collection,output,format,new,array,list,string,try,env,execute,assert,fail,program,should,not,run,successfully,cause,of,invalid,akka,settings,catch,program,invocation,exception,ex,throw,ex,get,cause
RemoteEnvironmentITCase -> @Test(expected = FlinkException.class) 	public void testInvalidAkkaConfiguration() throws Throwable;1519145307;Ensure that that Akka configuration parameters can be set.;@Test(expected = FlinkException.class)_	public void testInvalidAkkaConfiguration() throws Throwable {_		assumeTrue(CoreOptions.OLD_MODE.equalsIgnoreCase(configuration.getString(CoreOptions.MODE)))__		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, INVALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.getConfig().disableSysoutLogging()___		DataSet<String> result = env.createInput(new TestNonRichInputFormat())__		result.output(new LocalCollectionOutputFormat<>(new ArrayList<String>()))__		try {_			env.execute()__			Assert.fail("Program should not run successfully, cause of invalid akka settings.")__		} catch (ProgramInvocationException ex) {_			throw ex.getCause()__		}_	};ensure,that,that,akka,configuration,parameters,can,be,set;test,expected,flink,exception,class,public,void,test,invalid,akka,configuration,throws,throwable,assume,true,core,options,equals,ignore,case,configuration,get,string,core,options,mode,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,get,config,disable,sysout,logging,data,set,string,result,env,create,input,new,test,non,rich,input,format,result,output,new,local,collection,output,format,new,array,list,string,try,env,execute,assert,fail,program,should,not,run,successfully,cause,of,invalid,akka,settings,catch,program,invocation,exception,ex,throw,ex,get,cause
RemoteEnvironmentITCase -> @Test(expected = FlinkException.class) 	public void testInvalidAkkaConfiguration() throws Throwable;1521561714;Ensure that that Akka configuration parameters can be set.;@Test(expected = FlinkException.class)_	public void testInvalidAkkaConfiguration() throws Throwable {_		assumeTrue(CoreOptions.LEGACY_MODE.equalsIgnoreCase(configuration.getString(CoreOptions.MODE)))__		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, INVALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.getConfig().disableSysoutLogging()___		DataSet<String> result = env.createInput(new TestNonRichInputFormat())__		result.output(new LocalCollectionOutputFormat<>(new ArrayList<String>()))__		try {_			env.execute()__			Assert.fail("Program should not run successfully, cause of invalid akka settings.")__		} catch (ProgramInvocationException ex) {_			throw ex.getCause()__		}_	};ensure,that,that,akka,configuration,parameters,can,be,set;test,expected,flink,exception,class,public,void,test,invalid,akka,configuration,throws,throwable,assume,true,core,options,equals,ignore,case,configuration,get,string,core,options,mode,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,get,config,disable,sysout,logging,data,set,string,result,env,create,input,new,test,non,rich,input,format,result,output,new,local,collection,output,format,new,array,list,string,try,env,execute,assert,fail,program,should,not,run,successfully,cause,of,invalid,akka,settings,catch,program,invocation,exception,ex,throw,ex,get,cause
RemoteEnvironmentITCase -> @Test(expected = FlinkException.class) 	public void testInvalidAkkaConfiguration() throws Throwable;1522660437;Ensure that that Akka configuration parameters can be set.;@Test(expected = FlinkException.class)_	public void testInvalidAkkaConfiguration() throws Throwable {_		assumeTrue(CoreOptions.LEGACY_MODE.equalsIgnoreCase(configuration.getString(CoreOptions.MODE)))__		Configuration config = new Configuration()__		config.setString(AkkaOptions.STARTUP_TIMEOUT, INVALID_STARTUP_TIMEOUT)___		final ExecutionEnvironment env = ExecutionEnvironment.createRemoteEnvironment(_				hostname,_				port,_				config_		)__		env.getConfig().disableSysoutLogging()___		DataSet<String> result = env.createInput(new TestNonRichInputFormat())__		result.output(new LocalCollectionOutputFormat<>(new ArrayList<String>()))__		try {_			env.execute()__			Assert.fail("Program should not run successfully, cause of invalid akka settings.")__		} catch (ProgramInvocationException ex) {_			throw ex.getCause()__		}_	};ensure,that,that,akka,configuration,parameters,can,be,set;test,expected,flink,exception,class,public,void,test,invalid,akka,configuration,throws,throwable,assume,true,core,options,equals,ignore,case,configuration,get,string,core,options,mode,configuration,config,new,configuration,config,set,string,akka,options,final,execution,environment,env,execution,environment,create,remote,environment,hostname,port,config,env,get,config,disable,sysout,logging,data,set,string,result,env,create,input,new,test,non,rich,input,format,result,output,new,local,collection,output,format,new,array,list,string,try,env,execute,assert,fail,program,should,not,run,successfully,cause,of,invalid,akka,settings,catch,program,invocation,exception,ex,throw,ex,get,cause
