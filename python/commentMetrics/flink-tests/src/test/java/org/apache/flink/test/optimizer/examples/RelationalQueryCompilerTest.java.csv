# id;timestamp;commentText;codeText;commentWords;codeWords
RelationalQueryCompilerTest -> @Test 	public void testQueryWithSizeZeroInputs();1439322021;Verifies that the plan compiles in the presence of empty size=0 estimates.;@Test_	public void testQueryWithSizeZeroInputs() {_		testQueryGeneric(0, 0, 0.5f, true, true, true, false, true)__	};verifies,that,the,plan,compiles,in,the,presence,of,empty,size,0,estimates;test,public,void,test,query,with,size,zero,inputs,test,query,generic,0,0,0,5f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithSizeZeroInputs();1439889073;Verifies that the plan compiles in the presence of empty size=0 estimates.;@Test_	public void testQueryWithSizeZeroInputs() {_		testQueryGeneric(0, 0, 0.5f, true, true, true, false, true)__	};verifies,that,the,plan,compiles,in,the,presence,of,empty,size,0,estimates;test,public,void,test,query,with,size,zero,inputs,test,query,generic,0,0,0,5f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithSizeZeroInputs();1445977358;Verifies that the plan compiles in the presence of empty size=0 estimates.;@Test_	public void testQueryWithSizeZeroInputs() {_		testQueryGeneric(0, 0, 0.1f, 0.5f, true, true, true, false, true)__	};verifies,that,the,plan,compiles,in,the,presence,of,empty,size,0,estimates;test,public,void,test,query,with,size,zero,inputs,test,query,generic,0,0,0,1f,0,5f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithSizeZeroInputs();1453129069;Verifies that the plan compiles in the presence of empty size=0 estimates.;@Test_	public void testQueryWithSizeZeroInputs() {_		testQueryGeneric(0, 0, 0.1f, 0.5f, true, true, true, false, true)__	};verifies,that,the,plan,compiles,in,the,presence,of,empty,size,0,estimates;test,public,void,test,query,with,size,zero,inputs,test,query,generic,0,0,0,1f,0,5f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithSizeZeroInputs();1496173247;Verifies that the plan compiles in the presence of empty size=0 estimates.;@Test_	public void testQueryWithSizeZeroInputs() {_		testQueryGeneric(0, 0, 0.1f, 0.5f, true, true, true, false, true)__	};verifies,that,the,plan,compiles,in,the,presence,of,empty,size,0,estimates;test,public,void,test,query,with,size,zero,inputs,test,query,generic,0,0,0,1f,0,5f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForBroadcastHash();1439322021;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForBroadcastHash() {_		testQueryGeneric(1024l*1024*1024*1024, 1024l*1024*1024*1024, 0.05f, true, false, true, false, false)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,broadcast,hash,test,query,generic,1024l,1024,1024,1024,1024l,1024,1024,1024,0,05f,true,false,true,false,false
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForBroadcastHash();1439889073;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForBroadcastHash() {_		testQueryGeneric(1024l*1024*1024*1024, 1024l*1024*1024*1024, 0.05f, true, false, true, false, false)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,broadcast,hash,test,query,generic,1024l,1024,1024,1024,1024l,1024,1024,1024,0,05f,true,false,true,false,false
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForBroadcastHash();1445977358;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForBroadcastHash() {_		testQueryGeneric(1024l*1024*1024*1024, 1024l*1024*1024*1024, 0.01f, 0.05f, true, false, true, false, false)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,broadcast,hash,test,query,generic,1024l,1024,1024,1024,1024l,1024,1024,1024,0,01f,0,05f,true,false,true,false,false
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForBroadcastHash();1453129069;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForBroadcastHash() {_		testQueryGeneric(1024L*1024*1024*1024, 1024L*1024*1024*1024, 0.01f, 0.05f, true, false, true, false, false)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,broadcast,hash,test,query,generic,1024l,1024,1024,1024,1024l,1024,1024,1024,0,01f,0,05f,true,false,true,false,false
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForBroadcastHash();1496173247;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForBroadcastHash() {_		testQueryGeneric(1024L * 1024 * 1024 * 1024, 1024L * 1024 * 1024 * 1024, 0.01f, 0.05f, true, false, true, false, false)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,broadcast,hash,test,query,generic,1024l,1024,1024,1024,1024l,1024,1024,1024,0,01f,0,05f,true,false,true,false,false
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionMerge();1439322021;Statistics that push towards a repartition merge join. If the join blows the data volume up significantly,_re-exploiting the sorted order is cheaper.;@Test_	public void testQueryWithStatsForRepartitionMerge() {_		TPCHQuery3 query = new TPCHQuery3()__		Plan p = query.getPlan(DEFAULT_PARALLELISM_STRING, IN_FILE, IN_FILE, OUT_FILE)__		p.setExecutionConfig(defaultExecutionConfig)__		_		OperatorResolver cr = getContractResolver(p)__		JoinOperator match = cr.getNode("JoinLiO")__		match.getCompilerHints().setFilterFactor(100f)__		_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.05f, 100f, false, true, false, false, true)__	};statistics,that,push,towards,a,repartition,merge,join,if,the,join,blows,the,data,volume,up,significantly,re,exploiting,the,sorted,order,is,cheaper;test,public,void,test,query,with,stats,for,repartition,merge,tpchquery3,query,new,tpchquery3,plan,p,query,get,plan,p,set,execution,config,default,execution,config,operator,resolver,cr,get,contract,resolver,p,join,operator,match,cr,get,node,join,li,o,match,get,compiler,hints,set,filter,factor,100f,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,05f,100f,false,true,false,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionMerge();1439889073;Statistics that push towards a repartition merge join. If the join blows the data volume up significantly,_re-exploiting the sorted order is cheaper.;@Test_	public void testQueryWithStatsForRepartitionMerge() {_		TPCHQuery3 query = new TPCHQuery3()__		Plan p = query.getPlan(DEFAULT_PARALLELISM_STRING, IN_FILE, IN_FILE, OUT_FILE)__		p.setExecutionConfig(defaultExecutionConfig)__		_		OperatorResolver cr = getContractResolver(p)__		JoinOperator match = cr.getNode("JoinLiO")__		match.getCompilerHints().setFilterFactor(100f)__		_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.05f, 100f, false, true, false, false, true)__	};statistics,that,push,towards,a,repartition,merge,join,if,the,join,blows,the,data,volume,up,significantly,re,exploiting,the,sorted,order,is,cheaper;test,public,void,test,query,with,stats,for,repartition,merge,tpchquery3,query,new,tpchquery3,plan,p,query,get,plan,p,set,execution,config,default,execution,config,operator,resolver,cr,get,contract,resolver,p,join,operator,match,cr,get,node,join,li,o,match,get,compiler,hints,set,filter,factor,100f,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,05f,100f,false,true,false,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionMerge();1445977358;Statistics that push towards a repartition merge join. If the join blows the data volume up significantly,_re-exploiting the sorted order is cheaper.;@Test_	public void testQueryWithStatsForRepartitionMerge() {_		Plan p = getTPCH3Plan()__		p.setExecutionConfig(defaultExecutionConfig)__		_		OperatorResolver cr = getContractResolver(p)__		DualInputOperator<?,?,?,?> match = cr.getNode(JOIN_NAME)__		match.getCompilerHints().setFilterFactor(100f)__		_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.01f, 100f, false, true, false, false, true)__	};statistics,that,push,towards,a,repartition,merge,join,if,the,join,blows,the,data,volume,up,significantly,re,exploiting,the,sorted,order,is,cheaper;test,public,void,test,query,with,stats,for,repartition,merge,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,operator,resolver,cr,get,contract,resolver,p,dual,input,operator,match,cr,get,node,match,get,compiler,hints,set,filter,factor,100f,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,01f,100f,false,true,false,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionMerge();1453129069;Statistics that push towards a repartition merge join. If the join blows the data volume up significantly,_re-exploiting the sorted order is cheaper.;@Test_	public void testQueryWithStatsForRepartitionMerge() {_		Plan p = getTPCH3Plan()__		p.setExecutionConfig(defaultExecutionConfig)__		_		OperatorResolver cr = getContractResolver(p)__		DualInputOperator<?,?,?,?> match = cr.getNode(JOIN_NAME)__		match.getCompilerHints().setFilterFactor(100f)__		_		testQueryGeneric(100L*1024*1024*1024*1024, 100L*1024*1024*1024*1024, 0.01f, 100f, false, true, false, false, true)__	};statistics,that,push,towards,a,repartition,merge,join,if,the,join,blows,the,data,volume,up,significantly,re,exploiting,the,sorted,order,is,cheaper;test,public,void,test,query,with,stats,for,repartition,merge,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,operator,resolver,cr,get,contract,resolver,p,dual,input,operator,match,cr,get,node,match,get,compiler,hints,set,filter,factor,100f,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,01f,100f,false,true,false,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionMerge();1496173247;Statistics that push towards a repartition merge join. If the join blows the data volume up significantly,_re-exploiting the sorted order is cheaper.;@Test_	public void testQueryWithStatsForRepartitionMerge() {_		Plan p = getTPCH3Plan()__		p.setExecutionConfig(defaultExecutionConfig)__		_		OperatorResolver cr = getContractResolver(p)__		DualInputOperator<?, ?, ?, ?> match = cr.getNode(JOIN_NAME)__		match.getCompilerHints().setFilterFactor(100f)___		testQueryGeneric(100L * 1024 * 1024 * 1024 * 1024, 100L * 1024 * 1024 * 1024 * 1024, 0.01f, 100f, false, true, false, false, true)__	};statistics,that,push,towards,a,repartition,merge,join,if,the,join,blows,the,data,volume,up,significantly,re,exploiting,the,sorted,order,is,cheaper;test,public,void,test,query,with,stats,for,repartition,merge,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,operator,resolver,cr,get,contract,resolver,p,dual,input,operator,match,cr,get,node,match,get,compiler,hints,set,filter,factor,100f,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,01f,100f,false,true,false,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionAny();1439322021;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForRepartitionAny() {_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.5f, false, true, true, true, true)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,repartition,any,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,5f,false,true,true,true,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionAny();1439889073;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForRepartitionAny() {_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.5f, false, true, true, true, true)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,repartition,any,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,5f,false,true,true,true,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionAny();1445977358;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForRepartitionAny() {_		testQueryGeneric(100l*1024*1024*1024*1024, 100l*1024*1024*1024*1024, 0.1f, 0.5f, false, true, true, true, true)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,repartition,any,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,1f,0,5f,false,true,true,true,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionAny();1453129069;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForRepartitionAny() {_		testQueryGeneric(100L*1024*1024*1024*1024, 100L*1024*1024*1024*1024, 0.1f, 0.5f, false, true, true, true, true)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,repartition,any,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,1f,0,5f,false,true,true,true,true
RelationalQueryCompilerTest -> @Test 	public void testQueryWithStatsForRepartitionAny();1496173247;Statistics that push towards a broadcast join.;@Test_	public void testQueryWithStatsForRepartitionAny() {_		testQueryGeneric(100L * 1024 * 1024 * 1024 * 1024, 100L * 1024 * 1024 * 1024 * 1024, 0.1f, 0.5f, false, true, true, true, true)__	};statistics,that,push,towards,a,broadcast,join;test,public,void,test,query,with,stats,for,repartition,any,test,query,generic,100l,1024,1024,1024,1024,100l,1024,1024,1024,1024,0,1f,0,5f,false,true,true,true,true
RelationalQueryCompilerTest -> private void testQueryGeneric(long orderSize, long lineItemSize,  			float ordersFilterFactor, float joinFilterFactor, 			boolean broadcastOkay, boolean partitionedOkay, 			boolean hashJoinFirstOkay, boolean hashJoinSecondOkay, boolean mergeJoinOkay);1445977358;------------------------------------------------------------------------;private void testQueryGeneric(long orderSize, long lineItemSize, _			float ordersFilterFactor, float joinFilterFactor,_			boolean broadcastOkay, boolean partitionedOkay,_			boolean hashJoinFirstOkay, boolean hashJoinSecondOkay, boolean mergeJoinOkay)_	{_		Plan p = getTPCH3Plan()__		p.setExecutionConfig(defaultExecutionConfig)__		testQueryGeneric(p, orderSize, lineItemSize, ordersFilterFactor, joinFilterFactor, broadcastOkay, partitionedOkay, hashJoinFirstOkay, hashJoinSecondOkay, mergeJoinOkay)__	};;private,void,test,query,generic,long,order,size,long,line,item,size,float,orders,filter,factor,float,join,filter,factor,boolean,broadcast,okay,boolean,partitioned,okay,boolean,hash,join,first,okay,boolean,hash,join,second,okay,boolean,merge,join,okay,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,test,query,generic,p,order,size,line,item,size,orders,filter,factor,join,filter,factor,broadcast,okay,partitioned,okay,hash,join,first,okay,hash,join,second,okay,merge,join,okay
RelationalQueryCompilerTest -> private void testQueryGeneric(long orderSize, long lineItemSize,  			float ordersFilterFactor, float joinFilterFactor, 			boolean broadcastOkay, boolean partitionedOkay, 			boolean hashJoinFirstOkay, boolean hashJoinSecondOkay, boolean mergeJoinOkay);1453129069;------------------------------------------------------------------------;private void testQueryGeneric(long orderSize, long lineItemSize, _			float ordersFilterFactor, float joinFilterFactor,_			boolean broadcastOkay, boolean partitionedOkay,_			boolean hashJoinFirstOkay, boolean hashJoinSecondOkay, boolean mergeJoinOkay)_	{_		Plan p = getTPCH3Plan()__		p.setExecutionConfig(defaultExecutionConfig)__		testQueryGeneric(p, orderSize, lineItemSize, ordersFilterFactor, joinFilterFactor, broadcastOkay, partitionedOkay, hashJoinFirstOkay, hashJoinSecondOkay, mergeJoinOkay)__	};;private,void,test,query,generic,long,order,size,long,line,item,size,float,orders,filter,factor,float,join,filter,factor,boolean,broadcast,okay,boolean,partitioned,okay,boolean,hash,join,first,okay,boolean,hash,join,second,okay,boolean,merge,join,okay,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,test,query,generic,p,order,size,line,item,size,orders,filter,factor,join,filter,factor,broadcast,okay,partitioned,okay,hash,join,first,okay,hash,join,second,okay,merge,join,okay
RelationalQueryCompilerTest -> @Test 	public void testQueryNoStatistics();1439322021;Verifies that a robust repartitioning plan with a hash join is created in the absence of statistics.;@Test_	public void testQueryNoStatistics() {_		try {_			TPCHQuery3 query = new TPCHQuery3()__			Plan p = query.getPlan(DEFAULT_PARALLELISM_STRING, IN_FILE, IN_FILE, OUT_FILE)__			p.setExecutionConfig(defaultExecutionConfig)__			_			final OptimizedPlan plan = compileNoStats(p)__			_			final OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan)__			_			_			final SinkPlanNode sink = or.getNode("Output")__			final SingleInputPlanNode reducer = or.getNode("AggLio")__			final SingleInputPlanNode combiner = reducer.getPredecessor() instanceof SingleInputPlanNode ?_					(SingleInputPlanNode) reducer.getPredecessor() : null__			final DualInputPlanNode join = or.getNode("JoinLiO")__			final SingleInputPlanNode filteringMapper = or.getNode("FilterO")__			_			_			checkStandardStrategies(filteringMapper, join, combiner, reducer, sink)__			Assert.assertTrue(checkRepartitionShipStrategies(join, reducer, combiner))__			Assert.assertTrue(checkHashJoinStrategies(join, reducer, true) || checkHashJoinStrategies(join, reducer, false))__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail(e.getMessage())__		}_	};verifies,that,a,robust,repartitioning,plan,with,a,hash,join,is,created,in,the,absence,of,statistics;test,public,void,test,query,no,statistics,try,tpchquery3,query,new,tpchquery3,plan,p,query,get,plan,p,set,execution,config,default,execution,config,final,optimized,plan,plan,compile,no,stats,p,final,optimizer,plan,node,resolver,or,get,optimizer,plan,node,resolver,plan,final,sink,plan,node,sink,or,get,node,output,final,single,input,plan,node,reducer,or,get,node,agg,lio,final,single,input,plan,node,combiner,reducer,get,predecessor,instanceof,single,input,plan,node,single,input,plan,node,reducer,get,predecessor,null,final,dual,input,plan,node,join,or,get,node,join,li,o,final,single,input,plan,node,filtering,mapper,or,get,node,filter,o,check,standard,strategies,filtering,mapper,join,combiner,reducer,sink,assert,assert,true,check,repartition,ship,strategies,join,reducer,combiner,assert,assert,true,check,hash,join,strategies,join,reducer,true,check,hash,join,strategies,join,reducer,false,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message
RelationalQueryCompilerTest -> @Test 	public void testQueryNoStatistics();1439889073;Verifies that a robust repartitioning plan with a hash join is created in the absence of statistics.;@Test_	public void testQueryNoStatistics() {_		try {_			TPCHQuery3 query = new TPCHQuery3()__			Plan p = query.getPlan(DEFAULT_PARALLELISM_STRING, IN_FILE, IN_FILE, OUT_FILE)__			p.setExecutionConfig(defaultExecutionConfig)__			_			final OptimizedPlan plan = compileNoStats(p)__			_			final OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan)__			_			_			final SinkPlanNode sink = or.getNode("Output")__			final SingleInputPlanNode reducer = or.getNode("AggLio")__			final SingleInputPlanNode combiner = reducer.getPredecessor() instanceof SingleInputPlanNode ?_					(SingleInputPlanNode) reducer.getPredecessor() : null__			final DualInputPlanNode join = or.getNode("JoinLiO")__			final SingleInputPlanNode filteringMapper = or.getNode("FilterO")__			_			_			checkStandardStrategies(filteringMapper, join, combiner, reducer, sink)__			Assert.assertTrue(checkRepartitionShipStrategies(join, reducer, combiner))__			Assert.assertTrue(checkHashJoinStrategies(join, reducer, true) || checkHashJoinStrategies(join, reducer, false))__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail(e.getMessage())__		}_	};verifies,that,a,robust,repartitioning,plan,with,a,hash,join,is,created,in,the,absence,of,statistics;test,public,void,test,query,no,statistics,try,tpchquery3,query,new,tpchquery3,plan,p,query,get,plan,p,set,execution,config,default,execution,config,final,optimized,plan,plan,compile,no,stats,p,final,optimizer,plan,node,resolver,or,get,optimizer,plan,node,resolver,plan,final,sink,plan,node,sink,or,get,node,output,final,single,input,plan,node,reducer,or,get,node,agg,lio,final,single,input,plan,node,combiner,reducer,get,predecessor,instanceof,single,input,plan,node,single,input,plan,node,reducer,get,predecessor,null,final,dual,input,plan,node,join,or,get,node,join,li,o,final,single,input,plan,node,filtering,mapper,or,get,node,filter,o,check,standard,strategies,filtering,mapper,join,combiner,reducer,sink,assert,assert,true,check,repartition,ship,strategies,join,reducer,combiner,assert,assert,true,check,hash,join,strategies,join,reducer,true,check,hash,join,strategies,join,reducer,false,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message
RelationalQueryCompilerTest -> @Test 	public void testQueryNoStatistics();1445977358;Verifies that a robust repartitioning plan with a hash join is created in the absence of statistics.;@Test_	public void testQueryNoStatistics() {_		try {_			Plan p = getTPCH3Plan()__			p.setExecutionConfig(defaultExecutionConfig)__			_			final OptimizedPlan plan = compileNoStats(p)__			_			final OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan)__			_			_			final SinkPlanNode sink = or.getNode(SINK)__			final SingleInputPlanNode reducer = or.getNode(REDUCE_NAME)__			final SingleInputPlanNode combiner = reducer.getPredecessor() instanceof SingleInputPlanNode ?_					(SingleInputPlanNode) reducer.getPredecessor() : null__			final DualInputPlanNode join = or.getNode(JOIN_NAME)__			final SingleInputPlanNode filteringMapper = or.getNode(MAPPER_NAME)__			_			_			checkStandardStrategies(filteringMapper, join, combiner, reducer, sink)__			Assert.assertTrue(checkRepartitionShipStrategies(join, reducer, combiner))__			Assert.assertTrue(checkHashJoinStrategies(join, reducer, true) || checkHashJoinStrategies(join, reducer, false))__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail(e.getMessage())__		}_	};verifies,that,a,robust,repartitioning,plan,with,a,hash,join,is,created,in,the,absence,of,statistics;test,public,void,test,query,no,statistics,try,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,final,optimized,plan,plan,compile,no,stats,p,final,optimizer,plan,node,resolver,or,get,optimizer,plan,node,resolver,plan,final,sink,plan,node,sink,or,get,node,sink,final,single,input,plan,node,reducer,or,get,node,final,single,input,plan,node,combiner,reducer,get,predecessor,instanceof,single,input,plan,node,single,input,plan,node,reducer,get,predecessor,null,final,dual,input,plan,node,join,or,get,node,final,single,input,plan,node,filtering,mapper,or,get,node,check,standard,strategies,filtering,mapper,join,combiner,reducer,sink,assert,assert,true,check,repartition,ship,strategies,join,reducer,combiner,assert,assert,true,check,hash,join,strategies,join,reducer,true,check,hash,join,strategies,join,reducer,false,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message
RelationalQueryCompilerTest -> @Test 	public void testQueryNoStatistics();1453129069;Verifies that a robust repartitioning plan with a hash join is created in the absence of statistics.;@Test_	public void testQueryNoStatistics() {_		try {_			Plan p = getTPCH3Plan()__			p.setExecutionConfig(defaultExecutionConfig)__			_			final OptimizedPlan plan = compileNoStats(p)__			_			final OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan)__			_			_			final SinkPlanNode sink = or.getNode(SINK)__			final SingleInputPlanNode reducer = or.getNode(REDUCE_NAME)__			final SingleInputPlanNode combiner = reducer.getPredecessor() instanceof SingleInputPlanNode ?_					(SingleInputPlanNode) reducer.getPredecessor() : null__			final DualInputPlanNode join = or.getNode(JOIN_NAME)__			final SingleInputPlanNode filteringMapper = or.getNode(MAPPER_NAME)__			_			_			checkStandardStrategies(filteringMapper, join, combiner, reducer, sink)__			Assert.assertTrue(checkRepartitionShipStrategies(join, reducer, combiner))__			Assert.assertTrue(checkHashJoinStrategies(join, reducer, true) || checkHashJoinStrategies(join, reducer, false))__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail(e.getMessage())__		}_	};verifies,that,a,robust,repartitioning,plan,with,a,hash,join,is,created,in,the,absence,of,statistics;test,public,void,test,query,no,statistics,try,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,final,optimized,plan,plan,compile,no,stats,p,final,optimizer,plan,node,resolver,or,get,optimizer,plan,node,resolver,plan,final,sink,plan,node,sink,or,get,node,sink,final,single,input,plan,node,reducer,or,get,node,final,single,input,plan,node,combiner,reducer,get,predecessor,instanceof,single,input,plan,node,single,input,plan,node,reducer,get,predecessor,null,final,dual,input,plan,node,join,or,get,node,final,single,input,plan,node,filtering,mapper,or,get,node,check,standard,strategies,filtering,mapper,join,combiner,reducer,sink,assert,assert,true,check,repartition,ship,strategies,join,reducer,combiner,assert,assert,true,check,hash,join,strategies,join,reducer,true,check,hash,join,strategies,join,reducer,false,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message
RelationalQueryCompilerTest -> @Test 	public void testQueryNoStatistics();1496173247;Verifies that a robust repartitioning plan with a hash join is created in the absence of statistics.;@Test_	public void testQueryNoStatistics() {_		try {_			Plan p = getTPCH3Plan()__			p.setExecutionConfig(defaultExecutionConfig)__			_			final OptimizedPlan plan = compileNoStats(p)___			final OptimizerPlanNodeResolver or = getOptimizerPlanNodeResolver(plan)___			_			final SinkPlanNode sink = or.getNode(SINK)__			final SingleInputPlanNode reducer = or.getNode(REDUCE_NAME)__			final SingleInputPlanNode combiner = reducer.getPredecessor() instanceof SingleInputPlanNode ?_					(SingleInputPlanNode) reducer.getPredecessor() : null__			final DualInputPlanNode join = or.getNode(JOIN_NAME)__			final SingleInputPlanNode filteringMapper = or.getNode(MAPPER_NAME)___			_			checkStandardStrategies(filteringMapper, join, combiner, reducer, sink)__			Assert.assertTrue(checkRepartitionShipStrategies(join, reducer, combiner))__			Assert.assertTrue(checkHashJoinStrategies(join, reducer, true) || checkHashJoinStrategies(join, reducer, false))__		} catch (Exception e) {_			e.printStackTrace()__			Assert.fail(e.getMessage())__		}_	};verifies,that,a,robust,repartitioning,plan,with,a,hash,join,is,created,in,the,absence,of,statistics;test,public,void,test,query,no,statistics,try,plan,p,get,tpch3plan,p,set,execution,config,default,execution,config,final,optimized,plan,plan,compile,no,stats,p,final,optimizer,plan,node,resolver,or,get,optimizer,plan,node,resolver,plan,final,sink,plan,node,sink,or,get,node,sink,final,single,input,plan,node,reducer,or,get,node,final,single,input,plan,node,combiner,reducer,get,predecessor,instanceof,single,input,plan,node,single,input,plan,node,reducer,get,predecessor,null,final,dual,input,plan,node,join,or,get,node,final,single,input,plan,node,filtering,mapper,or,get,node,check,standard,strategies,filtering,mapper,join,combiner,reducer,sink,assert,assert,true,check,repartition,ship,strategies,join,reducer,combiner,assert,assert,true,check,hash,join,strategies,join,reducer,true,check,hash,join,strategies,join,reducer,false,catch,exception,e,e,print,stack,trace,assert,fail,e,get,message
RelationalQueryCompilerTest -> @Test 	public void testQueryAnyValidPlan();1439322021;Checks if any valid plan is produced. Hash joins are expected to build the orders side, as the statistics_indicate this to be the smaller one.;@Test_	public void testQueryAnyValidPlan() {_		testQueryGeneric(1024*1024*1024L, 8*1024*1024*1024L, 0.05f, true, true, true, false, true)__	};checks,if,any,valid,plan,is,produced,hash,joins,are,expected,to,build,the,orders,side,as,the,statistics,indicate,this,to,be,the,smaller,one;test,public,void,test,query,any,valid,plan,test,query,generic,1024,1024,1024l,8,1024,1024,1024l,0,05f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryAnyValidPlan();1439889073;Checks if any valid plan is produced. Hash joins are expected to build the orders side, as the statistics_indicate this to be the smaller one.;@Test_	public void testQueryAnyValidPlan() {_		testQueryGeneric(1024*1024*1024L, 8*1024*1024*1024L, 0.05f, true, true, true, false, true)__	};checks,if,any,valid,plan,is,produced,hash,joins,are,expected,to,build,the,orders,side,as,the,statistics,indicate,this,to,be,the,smaller,one;test,public,void,test,query,any,valid,plan,test,query,generic,1024,1024,1024l,8,1024,1024,1024l,0,05f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryAnyValidPlan();1445977358;Checks if any valid plan is produced. Hash joins are expected to build the orders side, as the statistics_indicate this to be the smaller one.;@Test_	public void testQueryAnyValidPlan() {_		testQueryGeneric(1024*1024*1024L, 8*1024*1024*1024L, 0.05f, 0.05f, true, true, true, false, true)__	};checks,if,any,valid,plan,is,produced,hash,joins,are,expected,to,build,the,orders,side,as,the,statistics,indicate,this,to,be,the,smaller,one;test,public,void,test,query,any,valid,plan,test,query,generic,1024,1024,1024l,8,1024,1024,1024l,0,05f,0,05f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryAnyValidPlan();1453129069;Checks if any valid plan is produced. Hash joins are expected to build the orders side, as the statistics_indicate this to be the smaller one.;@Test_	public void testQueryAnyValidPlan() {_		testQueryGeneric(1024*1024*1024L, 8*1024*1024*1024L, 0.05f, 0.05f, true, true, true, false, true)__	};checks,if,any,valid,plan,is,produced,hash,joins,are,expected,to,build,the,orders,side,as,the,statistics,indicate,this,to,be,the,smaller,one;test,public,void,test,query,any,valid,plan,test,query,generic,1024,1024,1024l,8,1024,1024,1024l,0,05f,0,05f,true,true,true,false,true
RelationalQueryCompilerTest -> @Test 	public void testQueryAnyValidPlan();1496173247;Checks if any valid plan is produced. Hash joins are expected to build the orders side, as the statistics_indicate this to be the smaller one.;@Test_	public void testQueryAnyValidPlan() {_		testQueryGeneric(1024 * 1024 * 1024L, 8 * 1024 * 1024 * 1024L, 0.05f, 0.05f, true, true, true, false, true)__	};checks,if,any,valid,plan,is,produced,hash,joins,are,expected,to,build,the,orders,side,as,the,statistics,indicate,this,to,be,the,smaller,one;test,public,void,test,query,any,valid,plan,test,query,generic,1024,1024,1024l,8,1024,1024,1024l,0,05f,0,05f,true,true,true,false,true
