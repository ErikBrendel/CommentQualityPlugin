# id;timestamp;commentText;codeText;commentWords;codeWords
WebLogDataGenerator -> private static void genVisits(int noVisits, int noDocs, String path);1452766738;Generates the files for the visits relation. The visits entries apply the_following format:<br />_<code>IP Address | URL | Date (YYYY-MM-DD) | Misc. Data (e.g. User-Agent) |\n</code>__@param noVisits_Number of entries for the visits relation_@param noDocs_Number of entries in the documents relation_@param path_Output path for the visits relation;private static void genVisits(int noVisits, int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try {_			FileWriter fw = new FileWriter(path)___			for (int i = 0_ i < noVisits_ i++) {__				int year = 2000 + rand.nextInt(10)_ _				int month = rand.nextInt(12) + 1_ _				int day = rand.nextInt(27) + 1_ __				_				StringBuilder visit = new StringBuilder(rand.nextInt(256) + "."_						+ rand.nextInt(256) + "." + rand.nextInt(256) + "."_						+ rand.nextInt(256) + "|")__				_				visit.append("url_" + rand.nextInt(noDocs) + "|")__				_				visit.append(year + "-" + month + "-" + day + "|")__				_				visit.append("0.12|Mozilla Firefox 3.1|de|de|Nothing special|124|\n")___				fw.write(visit.toString())__			}_			fw.close()___		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,visits,relation,the,visits,entries,apply,the,following,format,br,code,ip,address,url,date,yyyy,mm,dd,misc,data,e,g,user,agent,n,code,param,no,visits,number,of,entries,for,the,visits,relation,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,visits,relation;private,static,void,gen,visits,int,no,visits,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,visits,i,int,year,2000,rand,next,int,10,int,month,rand,next,int,12,1,int,day,rand,next,int,27,1,string,builder,visit,new,string,builder,rand,next,int,256,rand,next,int,256,rand,next,int,256,rand,next,int,256,visit,append,rand,next,int,no,docs,visit,append,year,month,day,visit,append,0,12,mozilla,firefox,3,1,de,de,nothing,special,124,n,fw,write,visit,to,string,fw,close,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genVisits(int noVisits, int noDocs, String path);1474022056;Generates the files for the visits relation. The visits entries apply the_following format:<br />_<code>IP Address | URL | Date (YYYY-MM-DD) | Misc. Data (e.g. User-Agent) |\n</code>__@param noVisits_Number of entries for the visits relation_@param noDocs_Number of entries in the documents relation_@param path_Output path for the visits relation;private static void genVisits(int noVisits, int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noVisits_ i++) {__				int year = 2000 + rand.nextInt(10)_ _				int month = rand.nextInt(12) + 1_ _				int day = rand.nextInt(27) + 1_ __				_				StringBuilder visit = new StringBuilder(rand.nextInt(256) + "."_						+ rand.nextInt(256) + "." + rand.nextInt(256) + "."_						+ rand.nextInt(256) + "|")__				_				visit.append("url_" + rand.nextInt(noDocs) + "|")__				_				visit.append(year + "-" + month + "-" + day + "|")__				_				visit.append("0.12|Mozilla Firefox 3.1|de|de|Nothing special|124|\n")___				fw.write(visit.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,visits,relation,the,visits,entries,apply,the,following,format,br,code,ip,address,url,date,yyyy,mm,dd,misc,data,e,g,user,agent,n,code,param,no,visits,number,of,entries,for,the,visits,relation,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,visits,relation;private,static,void,gen,visits,int,no,visits,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,visits,i,int,year,2000,rand,next,int,10,int,month,rand,next,int,12,1,int,day,rand,next,int,27,1,string,builder,visit,new,string,builder,rand,next,int,256,rand,next,int,256,rand,next,int,256,rand,next,int,256,visit,append,rand,next,int,no,docs,visit,append,year,month,day,visit,append,0,12,mozilla,firefox,3,1,de,de,nothing,special,124,n,fw,write,visit,to,string,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genVisits(int noVisits, int noDocs, String path);1495698510;Generates the files for the visits relation. The visits entries apply the_following format:<br />_<code>IP Address | URL | Date (YYYY-MM-DD) | Misc. Data (e.g. User-Agent) |\n</code>__@param noVisits_Number of entries for the visits relation_@param noDocs_Number of entries in the documents relation_@param path_Output path for the visits relation;private static void genVisits(int noVisits, int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noVisits_ i++) {__				int year = 2000 + rand.nextInt(10)_ _				int month = rand.nextInt(12) + 1_ _				int day = rand.nextInt(27) + 1_ __				_				StringBuilder visit = new StringBuilder(rand.nextInt(256) + "."_						+ rand.nextInt(256) + "." + rand.nextInt(256) + "."_						+ rand.nextInt(256) + "|")__				_				visit.append("url_" + rand.nextInt(noDocs) + "|")__				_				visit.append(year + "-" + month + "-" + day + "|")__				_				visit.append("0.12|Mozilla Firefox 3.1|de|de|Nothing special|124|\n")___				fw.write(visit.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,visits,relation,the,visits,entries,apply,the,following,format,br,code,ip,address,url,date,yyyy,mm,dd,misc,data,e,g,user,agent,n,code,param,no,visits,number,of,entries,for,the,visits,relation,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,visits,relation;private,static,void,gen,visits,int,no,visits,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,visits,i,int,year,2000,rand,next,int,10,int,month,rand,next,int,12,1,int,day,rand,next,int,27,1,string,builder,visit,new,string,builder,rand,next,int,256,rand,next,int,256,rand,next,int,256,rand,next,int,256,visit,append,rand,next,int,no,docs,visit,append,year,month,day,visit,append,0,12,mozilla,firefox,3,1,de,de,nothing,special,124,n,fw,write,visit,to,string,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path);1452766738;Generates the files for the documents relation. The entries apply the_following format: <br />_<code>URL | Content</code>__@param noDocs_Number of entries for the documents relation_@param filterKeyWords_A list of keywords that should be contained_@param words_A list of words to fill the entries_@param path_Output path for the documents relation;private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try {_			FileWriter fw = new FileWriter(path)___			for (int i = 0_ i < noDocs_ i++) {__				int wordsInDoc = rand.nextInt(40) + 10__				_				StringBuilder doc = new StringBuilder("url_" + i + "|")__				for (int j = 0_ j < wordsInDoc_ j++) {_					if (rand.nextDouble() > 0.9) {_						_						doc.append(filterKeyWords[rand_								.nextInt(filterKeyWords.length)] + " ")__					} else {_						_						doc.append(words[rand.nextInt(words.length)] + " ")__					}_				}_				doc.append("|\n")___				fw.write(doc.toString())__			}_			fw.close()___		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,documents,relation,the,entries,apply,the,following,format,br,code,url,content,code,param,no,docs,number,of,entries,for,the,documents,relation,param,filter,key,words,a,list,of,keywords,that,should,be,contained,param,words,a,list,of,words,to,fill,the,entries,param,path,output,path,for,the,documents,relation;private,static,void,gen,docs,int,no,docs,string,filter,key,words,string,words,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,int,words,in,doc,rand,next,int,40,10,string,builder,doc,new,string,builder,i,for,int,j,0,j,words,in,doc,j,if,rand,next,double,0,9,doc,append,filter,key,words,rand,next,int,filter,key,words,length,else,doc,append,words,rand,next,int,words,length,doc,append,n,fw,write,doc,to,string,fw,close,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path);1474022056;Generates the files for the documents relation. The entries apply the_following format: <br />_<code>URL | Content</code>__@param noDocs_Number of entries for the documents relation_@param filterKeyWords_A list of keywords that should be contained_@param words_A list of words to fill the entries_@param path_Output path for the documents relation;private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noDocs_ i++) {__				int wordsInDoc = rand.nextInt(40) + 10__				_				StringBuilder doc = new StringBuilder("url_" + i + "|")__				for (int j = 0_ j < wordsInDoc_ j++) {_					if (rand.nextDouble() > 0.9) {_						_						doc.append(filterKeyWords[rand.nextInt(filterKeyWords.length)] + " ")__					} else {_						_						doc.append(words[rand.nextInt(words.length)] + " ")__					}_				}_				doc.append("|\n")___				fw.write(doc.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,documents,relation,the,entries,apply,the,following,format,br,code,url,content,code,param,no,docs,number,of,entries,for,the,documents,relation,param,filter,key,words,a,list,of,keywords,that,should,be,contained,param,words,a,list,of,words,to,fill,the,entries,param,path,output,path,for,the,documents,relation;private,static,void,gen,docs,int,no,docs,string,filter,key,words,string,words,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,int,words,in,doc,rand,next,int,40,10,string,builder,doc,new,string,builder,i,for,int,j,0,j,words,in,doc,j,if,rand,next,double,0,9,doc,append,filter,key,words,rand,next,int,filter,key,words,length,else,doc,append,words,rand,next,int,words,length,doc,append,n,fw,write,doc,to,string,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path);1495698510;Generates the files for the documents relation. The entries apply the_following format: <br />_<code>URL | Content</code>__@param noDocs_Number of entries for the documents relation_@param filterKeyWords_A list of keywords that should be contained_@param words_A list of words to fill the entries_@param path_Output path for the documents relation;private static void genDocs(int noDocs, String[] filterKeyWords, String[] words, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noDocs_ i++) {__				int wordsInDoc = rand.nextInt(40) + 10__				_				StringBuilder doc = new StringBuilder("url_" + i + "|")__				for (int j = 0_ j < wordsInDoc_ j++) {_					if (rand.nextDouble() > 0.9) {_						_						doc.append(filterKeyWords[rand.nextInt(filterKeyWords.length)] + " ")__					} else {_						_						doc.append(words[rand.nextInt(words.length)] + " ")__					}_				}_				doc.append("|\n")___				fw.write(doc.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,documents,relation,the,entries,apply,the,following,format,br,code,url,content,code,param,no,docs,number,of,entries,for,the,documents,relation,param,filter,key,words,a,list,of,keywords,that,should,be,contained,param,words,a,list,of,words,to,fill,the,entries,param,path,output,path,for,the,documents,relation;private,static,void,gen,docs,int,no,docs,string,filter,key,words,string,words,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,int,words,in,doc,rand,next,int,40,10,string,builder,doc,new,string,builder,i,for,int,j,0,j,words,in,doc,j,if,rand,next,double,0,9,doc,append,filter,key,words,rand,next,int,filter,key,words,length,else,doc,append,words,rand,next,int,words,length,doc,append,n,fw,write,doc,to,string,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> public static void main(String[] args);1452766738;Main method to generate data for the {@link WebLogAnalysis} example program._<p>_The generator creates to files:_<ul>_<li><code>{tmp.dir}/documents</code> for the web documents_<li><code>{tmp.dir}/ranks</code> for the ranks of the web documents_<li><code>{tmp.dir}/visits</code> for the logged visits of web documents_</ul>__@param args_<ol>_<li>Int: Number of web documents_<li>Int: Number of visits_</ol>;public static void main(String[] args) {__		_		if (args.length < 2) {_			System.out.println("WebLogDataGenerator <numberOfDocuments> <numberOfVisits>")__			System.exit(1)__		}_		_		int noDocs = Integer.parseInt(args[0])__		int noVisits = Integer.parseInt(args[1])__		_		String[] filterKWs = { "editors", "oscillations", "convection" }___		String[] words = { "Lorem", "ipsum", "dolor", "sit", "amet",_				"consectetuer", "adipiscing", "elit", "sed", "diam", "nonummy",_				"nibh", "euismod", "tincidunt", "ut", "laoreet", "dolore",_				"magna", "aliquam", "erat", "volutpat", "Ut", "wisi", "enim",_				"ad", "minim", "veniam", "quis", "nostrud", "exerci", "tation",_				"ullamcorper", "suscipit", "lobortis", "nisl", "ut", "aliquip",_				"ex", "ea", "commodo" }___		_		final String outPath = System.getProperty("java.io.tmpdir")___		System.out.println("Generating documents files...")__		genDocs(noDocs, filterKWs, words, outPath + "/documents")__		System.out.println("Generating ranks files...")__		genRanks(noDocs, outPath + "/ranks")__		System.out.println("Generating visits files...")__		genVisits(noVisits, noDocs, outPath + "/visits")___		System.out.println("Done!")__	};main,method,to,generate,data,for,the,link,web,log,analysis,example,program,p,the,generator,creates,to,files,ul,li,code,tmp,dir,documents,code,for,the,web,documents,li,code,tmp,dir,ranks,code,for,the,ranks,of,the,web,documents,li,code,tmp,dir,visits,code,for,the,logged,visits,of,web,documents,ul,param,args,ol,li,int,number,of,web,documents,li,int,number,of,visits,ol;public,static,void,main,string,args,if,args,length,2,system,out,println,web,log,data,generator,number,of,documents,number,of,visits,system,exit,1,int,no,docs,integer,parse,int,args,0,int,no,visits,integer,parse,int,args,1,string,filter,kws,editors,oscillations,convection,string,words,lorem,ipsum,dolor,sit,amet,consectetuer,adipiscing,elit,sed,diam,nonummy,nibh,euismod,tincidunt,ut,laoreet,dolore,magna,aliquam,erat,volutpat,ut,wisi,enim,ad,minim,veniam,quis,nostrud,exerci,tation,ullamcorper,suscipit,lobortis,nisl,ut,aliquip,ex,ea,commodo,final,string,out,path,system,get,property,java,io,tmpdir,system,out,println,generating,documents,files,gen,docs,no,docs,filter,kws,words,out,path,documents,system,out,println,generating,ranks,files,gen,ranks,no,docs,out,path,ranks,system,out,println,generating,visits,files,gen,visits,no,visits,no,docs,out,path,visits,system,out,println,done
WebLogDataGenerator -> public static void main(String[] args);1474022056;Main method to generate data for the {@link WebLogAnalysis} example program._<p>_The generator creates to files:_<ul>_<li><code>{tmp.dir}/documents</code> for the web documents_<li><code>{tmp.dir}/ranks</code> for the ranks of the web documents_<li><code>{tmp.dir}/visits</code> for the logged visits of web documents_</ul>__@param args_<ol>_<li>Int: Number of web documents_<li>Int: Number of visits_</ol>;public static void main(String[] args) {__		_		if (args.length < 2) {_			System.out.println("WebLogDataGenerator <numberOfDocuments> <numberOfVisits>")__			System.exit(1)__		}_		_		int noDocs = Integer.parseInt(args[0])__		int noVisits = Integer.parseInt(args[1])__		_		String[] filterKWs = { "editors", "oscillations", "convection" }___		String[] words = { "Lorem", "ipsum", "dolor", "sit", "amet",_				"consectetuer", "adipiscing", "elit", "sed", "diam", "nonummy",_				"nibh", "euismod", "tincidunt", "ut", "laoreet", "dolore",_				"magna", "aliquam", "erat", "volutpat", "Ut", "wisi", "enim",_				"ad", "minim", "veniam", "quis", "nostrud", "exerci", "tation",_				"ullamcorper", "suscipit", "lobortis", "nisl", "ut", "aliquip",_				"ex", "ea", "commodo" }___		_		final String outPath = System.getProperty("java.io.tmpdir")___		System.out.println("Generating documents files...")__		genDocs(noDocs, filterKWs, words, outPath + "/documents")__		System.out.println("Generating ranks files...")__		genRanks(noDocs, outPath + "/ranks")__		System.out.println("Generating visits files...")__		genVisits(noVisits, noDocs, outPath + "/visits")___		System.out.println("Done!")__	};main,method,to,generate,data,for,the,link,web,log,analysis,example,program,p,the,generator,creates,to,files,ul,li,code,tmp,dir,documents,code,for,the,web,documents,li,code,tmp,dir,ranks,code,for,the,ranks,of,the,web,documents,li,code,tmp,dir,visits,code,for,the,logged,visits,of,web,documents,ul,param,args,ol,li,int,number,of,web,documents,li,int,number,of,visits,ol;public,static,void,main,string,args,if,args,length,2,system,out,println,web,log,data,generator,number,of,documents,number,of,visits,system,exit,1,int,no,docs,integer,parse,int,args,0,int,no,visits,integer,parse,int,args,1,string,filter,kws,editors,oscillations,convection,string,words,lorem,ipsum,dolor,sit,amet,consectetuer,adipiscing,elit,sed,diam,nonummy,nibh,euismod,tincidunt,ut,laoreet,dolore,magna,aliquam,erat,volutpat,ut,wisi,enim,ad,minim,veniam,quis,nostrud,exerci,tation,ullamcorper,suscipit,lobortis,nisl,ut,aliquip,ex,ea,commodo,final,string,out,path,system,get,property,java,io,tmpdir,system,out,println,generating,documents,files,gen,docs,no,docs,filter,kws,words,out,path,documents,system,out,println,generating,ranks,files,gen,ranks,no,docs,out,path,ranks,system,out,println,generating,visits,files,gen,visits,no,visits,no,docs,out,path,visits,system,out,println,done
WebLogDataGenerator -> public static void main(String[] args);1495698510;Main method to generate data for the {@link WebLogAnalysis} example program.__<p>The generator creates to files:_<ul>_<li><code>{tmp.dir}/documents</code> for the web documents_<li><code>{tmp.dir}/ranks</code> for the ranks of the web documents_<li><code>{tmp.dir}/visits</code> for the logged visits of web documents_</ul>__@param args_<ol>_<li>Int: Number of web documents_<li>Int: Number of visits_</ol>;public static void main(String[] args) {__		_		if (args.length < 2) {_			System.out.println("WebLogDataGenerator <numberOfDocuments> <numberOfVisits>")__			System.exit(1)__		}__		int noDocs = Integer.parseInt(args[0])__		int noVisits = Integer.parseInt(args[1])___		String[] filterKWs = { "editors", "oscillations", "convection" }___		String[] words = { "Lorem", "ipsum", "dolor", "sit", "amet",_				"consectetuer", "adipiscing", "elit", "sed", "diam", "nonummy",_				"nibh", "euismod", "tincidunt", "ut", "laoreet", "dolore",_				"magna", "aliquam", "erat", "volutpat", "Ut", "wisi", "enim",_				"ad", "minim", "veniam", "quis", "nostrud", "exerci", "tation",_				"ullamcorper", "suscipit", "lobortis", "nisl", "ut", "aliquip",_				"ex", "ea", "commodo" }___		final String outPath = System.getProperty("java.io.tmpdir")___		System.out.println("Generating documents files...")__		genDocs(noDocs, filterKWs, words, outPath + "/documents")__		System.out.println("Generating ranks files...")__		genRanks(noDocs, outPath + "/ranks")__		System.out.println("Generating visits files...")__		genVisits(noVisits, noDocs, outPath + "/visits")___		System.out.println("Done!")__	};main,method,to,generate,data,for,the,link,web,log,analysis,example,program,p,the,generator,creates,to,files,ul,li,code,tmp,dir,documents,code,for,the,web,documents,li,code,tmp,dir,ranks,code,for,the,ranks,of,the,web,documents,li,code,tmp,dir,visits,code,for,the,logged,visits,of,web,documents,ul,param,args,ol,li,int,number,of,web,documents,li,int,number,of,visits,ol;public,static,void,main,string,args,if,args,length,2,system,out,println,web,log,data,generator,number,of,documents,number,of,visits,system,exit,1,int,no,docs,integer,parse,int,args,0,int,no,visits,integer,parse,int,args,1,string,filter,kws,editors,oscillations,convection,string,words,lorem,ipsum,dolor,sit,amet,consectetuer,adipiscing,elit,sed,diam,nonummy,nibh,euismod,tincidunt,ut,laoreet,dolore,magna,aliquam,erat,volutpat,ut,wisi,enim,ad,minim,veniam,quis,nostrud,exerci,tation,ullamcorper,suscipit,lobortis,nisl,ut,aliquip,ex,ea,commodo,final,string,out,path,system,get,property,java,io,tmpdir,system,out,println,generating,documents,files,gen,docs,no,docs,filter,kws,words,out,path,documents,system,out,println,generating,ranks,files,gen,ranks,no,docs,out,path,ranks,system,out,println,generating,visits,files,gen,visits,no,visits,no,docs,out,path,visits,system,out,println,done
WebLogDataGenerator -> private static void genRanks(int noDocs, String path);1452766738;Generates the files for the ranks relation. The ranks entries apply the_following format: <br />_<code>Rank | URL | Average Duration |\n</code>__@param noDocs_Number of entries in the documents relation_@param path_Output path for the ranks relation;private static void genRanks(int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try {_			FileWriter fw = new FileWriter(path)___			for (int i = 0_ i < noDocs_ i++) {_				_				StringBuilder rank = new StringBuilder(rand.nextInt(100) + "|")__				_				rank.append("url_" + i + "|")__				_				rank.append(rand.nextInt(10) + rand.nextInt(50) + "|\n")___				fw.write(rank.toString())__			}_			fw.close()___		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,ranks,relation,the,ranks,entries,apply,the,following,format,br,code,rank,url,average,duration,n,code,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,ranks,relation;private,static,void,gen,ranks,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,string,builder,rank,new,string,builder,rand,next,int,100,rank,append,i,rank,append,rand,next,int,10,rand,next,int,50,n,fw,write,rank,to,string,fw,close,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genRanks(int noDocs, String path);1474022056;Generates the files for the ranks relation. The ranks entries apply the_following format: <br />_<code>Rank | URL | Average Duration |\n</code>__@param noDocs_Number of entries in the documents relation_@param path_Output path for the ranks relation;private static void genRanks(int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noDocs_ i++) {_				_				StringBuilder rank = new StringBuilder(rand.nextInt(100) + "|")__				_				rank.append("url_" + i + "|")__				_				rank.append(rand.nextInt(10) + rand.nextInt(50) + "|\n")___				fw.write(rank.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,ranks,relation,the,ranks,entries,apply,the,following,format,br,code,rank,url,average,duration,n,code,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,ranks,relation;private,static,void,gen,ranks,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,string,builder,rank,new,string,builder,rand,next,int,100,rank,append,i,rank,append,rand,next,int,10,rand,next,int,50,n,fw,write,rank,to,string,catch,ioexception,e,e,print,stack,trace
WebLogDataGenerator -> private static void genRanks(int noDocs, String path);1495698510;Generates the files for the ranks relation. The ranks entries apply the_following format: <br />_<code>Rank | URL | Average Duration |\n</code>__@param noDocs_Number of entries in the documents relation_@param path_Output path for the ranks relation;private static void genRanks(int noDocs, String path) {__		Random rand = new Random(Calendar.getInstance().getTimeInMillis())___		try (FileWriter fw = new FileWriter(path)) {_			for (int i = 0_ i < noDocs_ i++) {_				_				StringBuilder rank = new StringBuilder(rand.nextInt(100) + "|")__				_				rank.append("url_" + i + "|")__				_				rank.append(rand.nextInt(10) + rand.nextInt(50) + "|\n")___				fw.write(rank.toString())__			}_		} catch (IOException e) {_			e.printStackTrace()__		}_	};generates,the,files,for,the,ranks,relation,the,ranks,entries,apply,the,following,format,br,code,rank,url,average,duration,n,code,param,no,docs,number,of,entries,in,the,documents,relation,param,path,output,path,for,the,ranks,relation;private,static,void,gen,ranks,int,no,docs,string,path,random,rand,new,random,calendar,get,instance,get,time,in,millis,try,file,writer,fw,new,file,writer,path,for,int,i,0,i,no,docs,i,string,builder,rank,new,string,builder,rand,next,int,100,rank,append,i,rank,append,rand,next,int,10,rand,next,int,50,n,fw,write,rank,to,string,catch,ioexception,e,e,print,stack,trace
