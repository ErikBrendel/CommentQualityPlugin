# id;timestamp;commentText;codeText;commentWords;codeWords
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1507304713;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1510933709;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1515177487;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1531689536;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1539271394;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> public org.apache.hadoop.fs.FileSystem getHadoopFileSystem();1547642324;Gets the underlying Hadoop FileSystem._@return The underlying Hadoop FileSystem.;public org.apache.hadoop.fs.FileSystem getHadoopFileSystem() {_		return this.fs__	};gets,the,underlying,hadoop,file,system,return,the,underlying,hadoop,file,system;public,org,apache,hadoop,fs,file,system,get,hadoop,file,system,return,this,fs
HadoopFileSystem -> static FileSystemKind getKindForScheme(String scheme);1510933709;Gets the kind of the file system from its scheme.__<p>Implementation note: Initially, especially within the Flink 1.3.x line_(in order to not break backwards compatibility), we must only label file systems_as 'inconsistent' or as 'not proper filesystems' if we are sure about it._Otherwise, we cause regression for example in the performance and cleanup handling_of checkpoints._For that reason, we initially mark some filesystems as 'eventually consistent' or_as 'object stores', and leave the others as 'consistent file systems'.;static FileSystemKind getKindForScheme(String scheme) {_		scheme = scheme.toLowerCase(Locale.US)___		if (scheme.startsWith("s3") || scheme.startsWith("emr")) {_			_			return FileSystemKind.OBJECT_STORE__		}_		else if (scheme.startsWith("http") || scheme.startsWith("ftp")) {_			_			_			_			return FileSystemKind.OBJECT_STORE__		}_		else {_			_			_			return FileSystemKind.FILE_SYSTEM__		}_	};gets,the,kind,of,the,file,system,from,its,scheme,p,implementation,note,initially,especially,within,the,flink,1,3,x,line,in,order,to,not,break,backwards,compatibility,we,must,only,label,file,systems,as,inconsistent,or,as,not,proper,filesystems,if,we,are,sure,about,it,otherwise,we,cause,regression,for,example,in,the,performance,and,cleanup,handling,of,checkpoints,for,that,reason,we,initially,mark,some,filesystems,as,eventually,consistent,or,as,object,stores,and,leave,the,others,as,consistent,file,systems;static,file,system,kind,get,kind,for,scheme,string,scheme,scheme,scheme,to,lower,case,locale,us,if,scheme,starts,with,s3,scheme,starts,with,emr,return,file,system,kind,else,if,scheme,starts,with,http,scheme,starts,with,ftp,return,file,system,kind,else,return,file,system,kind
HadoopFileSystem -> static FileSystemKind getKindForScheme(String scheme);1515177487;Gets the kind of the file system from its scheme.__<p>Implementation note: Initially, especially within the Flink 1.3.x line_(in order to not break backwards compatibility), we must only label file systems_as 'inconsistent' or as 'not proper filesystems' if we are sure about it._Otherwise, we cause regression for example in the performance and cleanup handling_of checkpoints._For that reason, we initially mark some filesystems as 'eventually consistent' or_as 'object stores', and leave the others as 'consistent file systems'.;static FileSystemKind getKindForScheme(String scheme) {_		scheme = scheme.toLowerCase(Locale.US)___		if (scheme.startsWith("s3") || scheme.startsWith("emr")) {_			_			return FileSystemKind.OBJECT_STORE__		}_		else if (scheme.startsWith("http") || scheme.startsWith("ftp")) {_			_			_			_			return FileSystemKind.OBJECT_STORE__		}_		else {_			_			_			return FileSystemKind.FILE_SYSTEM__		}_	};gets,the,kind,of,the,file,system,from,its,scheme,p,implementation,note,initially,especially,within,the,flink,1,3,x,line,in,order,to,not,break,backwards,compatibility,we,must,only,label,file,systems,as,inconsistent,or,as,not,proper,filesystems,if,we,are,sure,about,it,otherwise,we,cause,regression,for,example,in,the,performance,and,cleanup,handling,of,checkpoints,for,that,reason,we,initially,mark,some,filesystems,as,eventually,consistent,or,as,object,stores,and,leave,the,others,as,consistent,file,systems;static,file,system,kind,get,kind,for,scheme,string,scheme,scheme,scheme,to,lower,case,locale,us,if,scheme,starts,with,s3,scheme,starts,with,emr,return,file,system,kind,else,if,scheme,starts,with,http,scheme,starts,with,ftp,return,file,system,kind,else,return,file,system,kind
HadoopFileSystem -> static FileSystemKind getKindForScheme(String scheme);1531689536;Gets the kind of the file system from its scheme.__<p>Implementation note: Initially, especially within the Flink 1.3.x line_(in order to not break backwards compatibility), we must only label file systems_as 'inconsistent' or as 'not proper filesystems' if we are sure about it._Otherwise, we cause regression for example in the performance and cleanup handling_of checkpoints._For that reason, we initially mark some filesystems as 'eventually consistent' or_as 'object stores', and leave the others as 'consistent file systems'.;static FileSystemKind getKindForScheme(String scheme) {_		scheme = scheme.toLowerCase(Locale.US)___		if (scheme.startsWith("s3") || scheme.startsWith("emr")) {_			_			return FileSystemKind.OBJECT_STORE__		}_		else if (scheme.startsWith("http") || scheme.startsWith("ftp")) {_			_			_			_			return FileSystemKind.OBJECT_STORE__		}_		else {_			_			_			return FileSystemKind.FILE_SYSTEM__		}_	};gets,the,kind,of,the,file,system,from,its,scheme,p,implementation,note,initially,especially,within,the,flink,1,3,x,line,in,order,to,not,break,backwards,compatibility,we,must,only,label,file,systems,as,inconsistent,or,as,not,proper,filesystems,if,we,are,sure,about,it,otherwise,we,cause,regression,for,example,in,the,performance,and,cleanup,handling,of,checkpoints,for,that,reason,we,initially,mark,some,filesystems,as,eventually,consistent,or,as,object,stores,and,leave,the,others,as,consistent,file,systems;static,file,system,kind,get,kind,for,scheme,string,scheme,scheme,scheme,to,lower,case,locale,us,if,scheme,starts,with,s3,scheme,starts,with,emr,return,file,system,kind,else,if,scheme,starts,with,http,scheme,starts,with,ftp,return,file,system,kind,else,return,file,system,kind
HadoopFileSystem -> static FileSystemKind getKindForScheme(String scheme);1539271394;Gets the kind of the file system from its scheme.__<p>Implementation note: Initially, especially within the Flink 1.3.x line_(in order to not break backwards compatibility), we must only label file systems_as 'inconsistent' or as 'not proper filesystems' if we are sure about it._Otherwise, we cause regression for example in the performance and cleanup handling_of checkpoints._For that reason, we initially mark some filesystems as 'eventually consistent' or_as 'object stores', and leave the others as 'consistent file systems'.;static FileSystemKind getKindForScheme(String scheme) {_		scheme = scheme.toLowerCase(Locale.US)___		if (scheme.startsWith("s3") || scheme.startsWith("emr")) {_			_			return FileSystemKind.OBJECT_STORE__		}_		else if (scheme.startsWith("http") || scheme.startsWith("ftp")) {_			_			_			_			return FileSystemKind.OBJECT_STORE__		}_		else {_			_			_			return FileSystemKind.FILE_SYSTEM__		}_	};gets,the,kind,of,the,file,system,from,its,scheme,p,implementation,note,initially,especially,within,the,flink,1,3,x,line,in,order,to,not,break,backwards,compatibility,we,must,only,label,file,systems,as,inconsistent,or,as,not,proper,filesystems,if,we,are,sure,about,it,otherwise,we,cause,regression,for,example,in,the,performance,and,cleanup,handling,of,checkpoints,for,that,reason,we,initially,mark,some,filesystems,as,eventually,consistent,or,as,object,stores,and,leave,the,others,as,consistent,file,systems;static,file,system,kind,get,kind,for,scheme,string,scheme,scheme,scheme,to,lower,case,locale,us,if,scheme,starts,with,s3,scheme,starts,with,emr,return,file,system,kind,else,if,scheme,starts,with,http,scheme,starts,with,ftp,return,file,system,kind,else,return,file,system,kind
HadoopFileSystem -> static FileSystemKind getKindForScheme(String scheme);1547642324;Gets the kind of the file system from its scheme.__<p>Implementation note: Initially, especially within the Flink 1.3.x line_(in order to not break backwards compatibility), we must only label file systems_as 'inconsistent' or as 'not proper filesystems' if we are sure about it._Otherwise, we cause regression for example in the performance and cleanup handling_of checkpoints._For that reason, we initially mark some filesystems as 'eventually consistent' or_as 'object stores', and leave the others as 'consistent file systems'.;static FileSystemKind getKindForScheme(String scheme) {_		scheme = scheme.toLowerCase(Locale.US)___		if (scheme.startsWith("s3") || scheme.startsWith("emr") || scheme.startsWith("oss")) {_			_			return FileSystemKind.OBJECT_STORE__		}_		else if (scheme.startsWith("http") || scheme.startsWith("ftp")) {_			_			_			_			return FileSystemKind.OBJECT_STORE__		}_		else {_			_			_			return FileSystemKind.FILE_SYSTEM__		}_	};gets,the,kind,of,the,file,system,from,its,scheme,p,implementation,note,initially,especially,within,the,flink,1,3,x,line,in,order,to,not,break,backwards,compatibility,we,must,only,label,file,systems,as,inconsistent,or,as,not,proper,filesystems,if,we,are,sure,about,it,otherwise,we,cause,regression,for,example,in,the,performance,and,cleanup,handling,of,checkpoints,for,that,reason,we,initially,mark,some,filesystems,as,eventually,consistent,or,as,object,stores,and,leave,the,others,as,consistent,file,systems;static,file,system,kind,get,kind,for,scheme,string,scheme,scheme,scheme,to,lower,case,locale,us,if,scheme,starts,with,s3,scheme,starts,with,emr,scheme,starts,with,oss,return,file,system,kind,else,if,scheme,starts,with,http,scheme,starts,with,ftp,return,file,system,kind,else,return,file,system,kind
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1507304713;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1510933709;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1515177487;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1531689536;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1539271394;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
HadoopFileSystem -> public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem);1547642324;Wraps the given Hadoop File System object as a Flink File System object._The given Hadoop file system object is expected to be initialized already.__@param hadoopFileSystem The Hadoop FileSystem that will be used under the hood.;public HadoopFileSystem(org.apache.hadoop.fs.FileSystem hadoopFileSystem) {_		this.fs = checkNotNull(hadoopFileSystem, "hadoopFileSystem")__	};wraps,the,given,hadoop,file,system,object,as,a,flink,file,system,object,the,given,hadoop,file,system,object,is,expected,to,be,initialized,already,param,hadoop,file,system,the,hadoop,file,system,that,will,be,used,under,the,hood;public,hadoop,file,system,org,apache,hadoop,fs,file,system,hadoop,file,system,this,fs,check,not,null,hadoop,file,system,hadoop,file,system
