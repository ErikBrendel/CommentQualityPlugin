# id;timestamp;commentText;codeText;commentWords;codeWords
JoinNode -> @Override 	public JoinOperatorBase<?, ?, ?, ?> getOperator();1426843274;Gets the contract object for this match node.__@return The contract.;@Override_	public JoinOperatorBase<?, ?, ?, ?> getOperator() {_		return (JoinOperatorBase<?, ?, ?, ?>) super.getOperator()__	};gets,the,contract,object,for,this,match,node,return,the,contract;override,public,join,operator,base,get,operator,return,join,operator,base,super,get,operator
JoinNode -> @Override 	public JoinOperatorBase<?, ?, ?, ?> getOperator();1442492509;Gets the contract object for this match node.__@return The contract.;@Override_	public JoinOperatorBase<?, ?, ?, ?> getOperator() {_		return (JoinOperatorBase<?, ?, ?, ?>) super.getOperator()__	};gets,the,contract,object,for,this,match,node,return,the,contract;override,public,join,operator,base,get,operator,return,join,operator,base,super,get,operator
JoinNode -> @Override 	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics);1426843274;The default estimates build on the principle of inclusion: The smaller input key domain is included in the larger_input key domain. We also assume that every key from the larger input has one join partner in the smaller input._The result cardinality is hence the larger one.;@Override_	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {_		long card1 = getFirstPredecessorNode().getEstimatedNumRecords()__		long card2 = getSecondPredecessorNode().getEstimatedNumRecords()__		this.estimatedNumRecords = (card1 < 0 || card2 < 0) ? -1 : Math.max(card1, card2)__		_		if (this.estimatedNumRecords >= 0) {_			float width1 = getFirstPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width2 = getSecondPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width = (width1 <= 0 || width2 <= 0) ? -1 : width1 + width2__			_			if (width > 0) {_				this.estimatedOutputSize = (long) (width * this.estimatedNumRecords)__			}_		}_	};the,default,estimates,build,on,the,principle,of,inclusion,the,smaller,input,key,domain,is,included,in,the,larger,input,key,domain,we,also,assume,that,every,key,from,the,larger,input,has,one,join,partner,in,the,smaller,input,the,result,cardinality,is,hence,the,larger,one;override,protected,void,compute,operator,specific,default,estimates,data,statistics,statistics,long,card1,get,first,predecessor,node,get,estimated,num,records,long,card2,get,second,predecessor,node,get,estimated,num,records,this,estimated,num,records,card1,0,card2,0,1,math,max,card1,card2,if,this,estimated,num,records,0,float,width1,get,first,predecessor,node,get,estimated,avg,width,per,output,record,float,width2,get,second,predecessor,node,get,estimated,avg,width,per,output,record,float,width,width1,0,width2,0,1,width1,width2,if,width,0,this,estimated,output,size,long,width,this,estimated,num,records
JoinNode -> @Override 	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics);1442492509;The default estimates build on the principle of inclusion: The smaller input key domain is included in the larger_input key domain. We also assume that every key from the larger input has one join partner in the smaller input._The result cardinality is hence the larger one.;@Override_	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {_		long card1 = getFirstPredecessorNode().getEstimatedNumRecords()__		long card2 = getSecondPredecessorNode().getEstimatedNumRecords()__		this.estimatedNumRecords = (card1 < 0 || card2 < 0) ? -1 : Math.max(card1, card2)__		_		if (this.estimatedNumRecords >= 0) {_			float width1 = getFirstPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width2 = getSecondPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width = (width1 <= 0 || width2 <= 0) ? -1 : width1 + width2__			_			if (width > 0) {_				this.estimatedOutputSize = (long) (width * this.estimatedNumRecords)__			}_		}_	};the,default,estimates,build,on,the,principle,of,inclusion,the,smaller,input,key,domain,is,included,in,the,larger,input,key,domain,we,also,assume,that,every,key,from,the,larger,input,has,one,join,partner,in,the,smaller,input,the,result,cardinality,is,hence,the,larger,one;override,protected,void,compute,operator,specific,default,estimates,data,statistics,statistics,long,card1,get,first,predecessor,node,get,estimated,num,records,long,card2,get,second,predecessor,node,get,estimated,num,records,this,estimated,num,records,card1,0,card2,0,1,math,max,card1,card2,if,this,estimated,num,records,0,float,width1,get,first,predecessor,node,get,estimated,avg,width,per,output,record,float,width2,get,second,predecessor,node,get,estimated,avg,width,per,output,record,float,width,width1,0,width2,0,1,width1,width2,if,width,0,this,estimated,output,size,long,width,this,estimated,num,records
JoinNode -> @Override 	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics);1444400361;The default estimates build on the principle of inclusion: The smaller input key domain is included in the larger_input key domain. We also assume that every key from the larger input has one join partner in the smaller input._The result cardinality is hence the larger one.;@Override_	protected void computeOperatorSpecificDefaultEstimates(DataStatistics statistics) {_		long card1 = getFirstPredecessorNode().getEstimatedNumRecords()__		long card2 = getSecondPredecessorNode().getEstimatedNumRecords()__		this.estimatedNumRecords = (card1 < 0 || card2 < 0) ? -1 : Math.max(card1, card2)__		_		if (this.estimatedNumRecords >= 0) {_			float width1 = getFirstPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width2 = getSecondPredecessorNode().getEstimatedAvgWidthPerOutputRecord()__			float width = (width1 <= 0 || width2 <= 0) ? -1 : width1 + width2__			_			if (width > 0) {_				this.estimatedOutputSize = (long) (width * this.estimatedNumRecords)__			}_		}_	};the,default,estimates,build,on,the,principle,of,inclusion,the,smaller,input,key,domain,is,included,in,the,larger,input,key,domain,we,also,assume,that,every,key,from,the,larger,input,has,one,join,partner,in,the,smaller,input,the,result,cardinality,is,hence,the,larger,one;override,protected,void,compute,operator,specific,default,estimates,data,statistics,statistics,long,card1,get,first,predecessor,node,get,estimated,num,records,long,card2,get,second,predecessor,node,get,estimated,num,records,this,estimated,num,records,card1,0,card2,0,1,math,max,card1,card2,if,this,estimated,num,records,0,float,width1,get,first,predecessor,node,get,estimated,avg,width,per,output,record,float,width2,get,second,predecessor,node,get,estimated,avg,width,per,output,record,float,width,width1,0,width2,0,1,width1,width2,if,width,0,this,estimated,output,size,long,width,this,estimated,num,records
JoinNode -> public JoinNode(JoinOperatorBase<?, ?, ?, ?> joinOperatorBase);1426843274;Creates a new JoinNode for the given join operator.__@param joinOperatorBase The join operator object.;public JoinNode(JoinOperatorBase<?, ?, ?, ?> joinOperatorBase) {_		super(joinOperatorBase)__		_		this.dataProperties = getDataProperties(joinOperatorBase,_				joinOperatorBase.getJoinHint(), joinOperatorBase.getCustomPartitioner())__	};creates,a,new,join,node,for,the,given,join,operator,param,join,operator,base,the,join,operator,object;public,join,node,join,operator,base,join,operator,base,super,join,operator,base,this,data,properties,get,data,properties,join,operator,base,join,operator,base,get,join,hint,join,operator,base,get,custom,partitioner
JoinNode -> public JoinNode(JoinOperatorBase<?, ?, ?, ?> joinOperatorBase);1442492509;Creates a new JoinNode for the given join operator.__@param joinOperatorBase The join operator object.;public JoinNode(JoinOperatorBase<?, ?, ?, ?> joinOperatorBase) {_		super(joinOperatorBase)__		_		this.dataProperties = getDataProperties(joinOperatorBase,_				joinOperatorBase.getJoinHint(), joinOperatorBase.getCustomPartitioner())__	};creates,a,new,join,node,for,the,given,join,operator,param,join,operator,base,the,join,operator,object;public,join,node,join,operator,base,join,operator,base,super,join,operator,base,this,data,properties,get,data,properties,join,operator,base,join,operator,base,get,join,hint,join,operator,base,get,custom,partitioner
