# id;timestamp;commentText;codeText;commentWords;codeWords
DagConnection -> public ShipStrategyType getShipStrategy();1426843274;Gets the shipping strategy for this connection.__@return The connection's shipping strategy.;public ShipStrategyType getShipStrategy() {_		return this.shipStrategy__	};gets,the,shipping,strategy,for,this,connection,return,the,connection,s,shipping,strategy;public,ship,strategy,type,get,ship,strategy,return,this,ship,strategy
DagConnection -> public ShipStrategyType getShipStrategy();1442492509;Gets the shipping strategy for this connection.__@return The connection's shipping strategy.;public ShipStrategyType getShipStrategy() {_		return this.shipStrategy__	};gets,the,shipping,strategy,for,this,connection,return,the,connection,s,shipping,strategy;public,ship,strategy,type,get,ship,strategy,return,this,ship,strategy
DagConnection -> public ShipStrategyType getShipStrategy();1533553549;Gets the shipping strategy for this connection.__@return The connection's shipping strategy.;public ShipStrategyType getShipStrategy() {_		return this.shipStrategy__	};gets,the,shipping,strategy,for,this,connection,return,the,connection,s,shipping,strategy;public,ship,strategy,type,get,ship,strategy,return,this,ship,strategy
DagConnection -> public InterestingProperties getInterestingProperties();1426843274;Gets the interesting properties object for this pact connection._If the interesting properties for this connections have not yet been set,_this method returns null.__@return The collection of all interesting properties, or null, if they have not yet been set.;public InterestingProperties getInterestingProperties() {_		return this.interestingProps__	};gets,the,interesting,properties,object,for,this,pact,connection,if,the,interesting,properties,for,this,connections,have,not,yet,been,set,this,method,returns,null,return,the,collection,of,all,interesting,properties,or,null,if,they,have,not,yet,been,set;public,interesting,properties,get,interesting,properties,return,this,interesting,props
DagConnection -> public InterestingProperties getInterestingProperties();1442492509;Gets the interesting properties object for this pact connection._If the interesting properties for this connections have not yet been set,_this method returns null.__@return The collection of all interesting properties, or null, if they have not yet been set.;public InterestingProperties getInterestingProperties() {_		return this.interestingProps__	};gets,the,interesting,properties,object,for,this,pact,connection,if,the,interesting,properties,for,this,connections,have,not,yet,been,set,this,method,returns,null,return,the,collection,of,all,interesting,properties,or,null,if,they,have,not,yet,been,set;public,interesting,properties,get,interesting,properties,return,this,interesting,props
DagConnection -> public InterestingProperties getInterestingProperties();1533553549;Gets the interesting properties object for this pact connection._If the interesting properties for this connections have not yet been set,_this method returns null.__@return The collection of all interesting properties, or null, if they have not yet been set.;public InterestingProperties getInterestingProperties() {_		return this.interestingProps__	};gets,the,interesting,properties,object,for,this,pact,connection,if,the,interesting,properties,for,this,connections,have,not,yet,been,set,this,method,returns,null,return,the,collection,of,all,interesting,properties,or,null,if,they,have,not,yet,been,set;public,interesting,properties,get,interesting,properties,return,this,interesting,props
DagConnection -> public void setInterestingProperties(InterestingProperties props);1426843274;Sets the interesting properties for this pact connection.__@param props The interesting properties.;public void setInterestingProperties(InterestingProperties props) {_		if (this.interestingProps == null) {_			this.interestingProps = props__		} else {_			throw new IllegalStateException("Interesting Properties have already been set.")__		}_	};sets,the,interesting,properties,for,this,pact,connection,param,props,the,interesting,properties;public,void,set,interesting,properties,interesting,properties,props,if,this,interesting,props,null,this,interesting,props,props,else,throw,new,illegal,state,exception,interesting,properties,have,already,been,set
DagConnection -> public void setInterestingProperties(InterestingProperties props);1442492509;Sets the interesting properties for this pact connection.__@param props The interesting properties.;public void setInterestingProperties(InterestingProperties props) {_		if (this.interestingProps == null) {_			this.interestingProps = props__		} else {_			throw new IllegalStateException("Interesting Properties have already been set.")__		}_	};sets,the,interesting,properties,for,this,pact,connection,param,props,the,interesting,properties;public,void,set,interesting,properties,interesting,properties,props,if,this,interesting,props,null,this,interesting,props,props,else,throw,new,illegal,state,exception,interesting,properties,have,already,been,set
DagConnection -> public void setInterestingProperties(InterestingProperties props);1533553549;Sets the interesting properties for this pact connection.__@param props The interesting properties.;public void setInterestingProperties(InterestingProperties props) {_		if (this.interestingProps == null) {_			this.interestingProps = props__		} else {_			throw new IllegalStateException("Interesting Properties have already been set.")__		}_	};sets,the,interesting,properties,for,this,pact,connection,param,props,the,interesting,properties;public,void,set,interesting,properties,interesting,properties,props,if,this,interesting,props,null,this,interesting,props,props,else,throw,new,illegal,state,exception,interesting,properties,have,already,been,set
DagConnection -> public DagConnection(OptimizerNode source, ExecutionMode exchangeMode);1426843274;Constructor to create a result from an operator that is not_consumed by another operator.__@param source_The source node.;public DagConnection(OptimizerNode source, ExecutionMode exchangeMode) {_		if (source == null) {_			throw new NullPointerException("Source and target must not be null.")__		}_		this.source = source__		this.target = null__		this.shipStrategy = ShipStrategyType.NONE__		this.dataExchangeMode = exchangeMode__	};constructor,to,create,a,result,from,an,operator,that,is,not,consumed,by,another,operator,param,source,the,source,node;public,dag,connection,optimizer,node,source,execution,mode,exchange,mode,if,source,null,throw,new,null,pointer,exception,source,and,target,must,not,be,null,this,source,source,this,target,null,this,ship,strategy,ship,strategy,type,none,this,data,exchange,mode,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, ExecutionMode exchangeMode);1442492509;Constructor to create a result from an operator that is not_consumed by another operator.__@param source_The source node.;public DagConnection(OptimizerNode source, ExecutionMode exchangeMode) {_		if (source == null) {_			throw new NullPointerException("Source and target must not be null.")__		}_		this.source = source__		this.target = null__		this.shipStrategy = ShipStrategyType.NONE__		this.dataExchangeMode = exchangeMode__	};constructor,to,create,a,result,from,an,operator,that,is,not,consumed,by,another,operator,param,source,the,source,node;public,dag,connection,optimizer,node,source,execution,mode,exchange,mode,if,source,null,throw,new,null,pointer,exception,source,and,target,must,not,be,null,this,source,source,this,target,null,this,ship,strategy,ship,strategy,type,none,this,data,exchange,mode,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, ExecutionMode exchangeMode);1533553549;Constructor to create a result from an operator that is not_consumed by another operator.__@param source_The source node._@param exchangeMode_The data exchange mode (pipelined / batch / batch only for shuffles / ... );public DagConnection(OptimizerNode source, ExecutionMode exchangeMode) {_		if (source == null) {_			throw new NullPointerException("Source must not be null.")__		}_		this.source = source__		this.target = null__		this.shipStrategy = ShipStrategyType.NONE__		this.dataExchangeMode = exchangeMode__	};constructor,to,create,a,result,from,an,operator,that,is,not,consumed,by,another,operator,param,source,the,source,node,param,exchange,mode,the,data,exchange,mode,pipelined,batch,batch,only,for,shuffles;public,dag,connection,optimizer,node,source,execution,mode,exchange,mode,if,source,null,throw,new,null,pointer,exception,source,must,not,be,null,this,source,source,this,target,null,this,ship,strategy,ship,strategy,type,none,this,data,exchange,mode,exchange,mode
DagConnection -> public OptimizerNode getTarget();1426843274;Gets the target of the connection.__@return The target node.;public OptimizerNode getTarget() {_		return this.target__	};gets,the,target,of,the,connection,return,the,target,node;public,optimizer,node,get,target,return,this,target
DagConnection -> public OptimizerNode getTarget();1442492509;Gets the target of the connection.__@return The target node.;public OptimizerNode getTarget() {_		return this.target__	};gets,the,target,of,the,connection,return,the,target,node;public,optimizer,node,get,target,return,this,target
DagConnection -> public OptimizerNode getTarget();1533553549;Gets the target of the connection.__@return The target node.;public OptimizerNode getTarget() {_		return this.target__	};gets,the,target,of,the,connection,return,the,target,node;public,optimizer,node,get,target,return,this,target
DagConnection -> public void setShipStrategy(ShipStrategyType strategy);1426843274;Sets the shipping strategy for this connection.__@param strategy_The shipping strategy to be applied to this connection.;public void setShipStrategy(ShipStrategyType strategy) {_		this.shipStrategy = strategy__	};sets,the,shipping,strategy,for,this,connection,param,strategy,the,shipping,strategy,to,be,applied,to,this,connection;public,void,set,ship,strategy,ship,strategy,type,strategy,this,ship,strategy,strategy
DagConnection -> public void setShipStrategy(ShipStrategyType strategy);1442492509;Sets the shipping strategy for this connection.__@param strategy_The shipping strategy to be applied to this connection.;public void setShipStrategy(ShipStrategyType strategy) {_		this.shipStrategy = strategy__	};sets,the,shipping,strategy,for,this,connection,param,strategy,the,shipping,strategy,to,be,applied,to,this,connection;public,void,set,ship,strategy,ship,strategy,type,strategy,this,ship,strategy,strategy
DagConnection -> public void setShipStrategy(ShipStrategyType strategy);1533553549;Sets the shipping strategy for this connection.__@param strategy_The shipping strategy to be applied to this connection.;public void setShipStrategy(ShipStrategyType strategy) {_		this.shipStrategy = strategy__	};sets,the,shipping,strategy,for,this,connection,param,strategy,the,shipping,strategy,to,be,applied,to,this,connection;public,void,set,ship,strategy,ship,strategy,type,strategy,this,ship,strategy,strategy
DagConnection -> public ExecutionMode getDataExchangeMode();1426843274;Gets the data exchange mode to use for this connection.__@return The data exchange mode to use for this connection.;public ExecutionMode getDataExchangeMode() {_		if (dataExchangeMode == null) {_			throw new IllegalStateException("This connection does not have the data exchange mode set")__		}_		return dataExchangeMode__	};gets,the,data,exchange,mode,to,use,for,this,connection,return,the,data,exchange,mode,to,use,for,this,connection;public,execution,mode,get,data,exchange,mode,if,data,exchange,mode,null,throw,new,illegal,state,exception,this,connection,does,not,have,the,data,exchange,mode,set,return,data,exchange,mode
DagConnection -> public ExecutionMode getDataExchangeMode();1442492509;Gets the data exchange mode to use for this connection.__@return The data exchange mode to use for this connection.;public ExecutionMode getDataExchangeMode() {_		if (dataExchangeMode == null) {_			throw new IllegalStateException("This connection does not have the data exchange mode set")__		}_		return dataExchangeMode__	};gets,the,data,exchange,mode,to,use,for,this,connection,return,the,data,exchange,mode,to,use,for,this,connection;public,execution,mode,get,data,exchange,mode,if,data,exchange,mode,null,throw,new,illegal,state,exception,this,connection,does,not,have,the,data,exchange,mode,set,return,data,exchange,mode
DagConnection -> public ExecutionMode getDataExchangeMode();1533553549;Gets the data exchange mode to use for this connection.__@return The data exchange mode to use for this connection.;public ExecutionMode getDataExchangeMode() {_		if (dataExchangeMode == null) {_			throw new IllegalStateException("This connection does not have the data exchange mode set")__		}_		return dataExchangeMode__	};gets,the,data,exchange,mode,to,use,for,this,connection,return,the,data,exchange,mode,to,use,for,this,connection;public,execution,mode,get,data,exchange,mode,if,data,exchange,mode,null,throw,new,illegal,state,exception,this,connection,does,not,have,the,data,exchange,mode,set,return,data,exchange,mode
DagConnection -> public boolean isBreakingPipeline();1426843274;Checks whether this connection is marked to break the pipeline.__@return True, if this connection is marked to break the pipeline, false otherwise.;public boolean isBreakingPipeline() {_		return this.breakPipeline__	};checks,whether,this,connection,is,marked,to,break,the,pipeline,return,true,if,this,connection,is,marked,to,break,the,pipeline,false,otherwise;public,boolean,is,breaking,pipeline,return,this,break,pipeline
DagConnection -> public boolean isBreakingPipeline();1442492509;Checks whether this connection is marked to break the pipeline.__@return True, if this connection is marked to break the pipeline, false otherwise.;public boolean isBreakingPipeline() {_		return this.breakPipeline__	};checks,whether,this,connection,is,marked,to,break,the,pipeline,return,true,if,this,connection,is,marked,to,break,the,pipeline,false,otherwise;public,boolean,is,breaking,pipeline,return,this,break,pipeline
DagConnection -> public boolean isBreakingPipeline();1533553549;Checks whether this connection is marked to break the pipeline.__@return True, if this connection is marked to break the pipeline, false otherwise.;public boolean isBreakingPipeline() {_		return this.breakPipeline__	};checks,whether,this,connection,is,marked,to,break,the,pipeline,return,true,if,this,connection,is,marked,to,break,the,pipeline,false,otherwise;public,boolean,is,breaking,pipeline,return,this,break,pipeline
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode);1426843274;Creates a new Connection between two nodes. The shipping strategy is by default <tt>NONE</tt>._The temp mode is by default <tt>NONE</tt>.__@param source_The source node._@param target_The target node.;public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode) {_		this(source, target, null, exchangeMode)__	};creates,a,new,connection,between,two,nodes,the,shipping,strategy,is,by,default,tt,none,tt,the,temp,mode,is,by,default,tt,none,tt,param,source,the,source,node,param,target,the,target,node;public,dag,connection,optimizer,node,source,optimizer,node,target,execution,mode,exchange,mode,this,source,target,null,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode);1442492509;Creates a new Connection between two nodes. The shipping strategy is by default <tt>NONE</tt>._The temp mode is by default <tt>NONE</tt>.__@param source_The source node._@param target_The target node.;public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode) {_		this(source, target, null, exchangeMode)__	};creates,a,new,connection,between,two,nodes,the,shipping,strategy,is,by,default,tt,none,tt,the,temp,mode,is,by,default,tt,none,tt,param,source,the,source,node,param,target,the,target,node;public,dag,connection,optimizer,node,source,optimizer,node,target,execution,mode,exchange,mode,this,source,target,null,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode);1533553549;Creates a new Connection between two nodes. The shipping strategy is by default <tt>null</tt>.__@param source_The source node._@param target_The target node._@param exchangeMode_The data exchange mode (pipelined / batch / batch only for shuffles / ... );public DagConnection(OptimizerNode source, OptimizerNode target, ExecutionMode exchangeMode) {_		this(source, target, null, exchangeMode)__	};creates,a,new,connection,between,two,nodes,the,shipping,strategy,is,by,default,tt,null,tt,param,source,the,source,node,param,target,the,target,node,param,exchange,mode,the,data,exchange,mode,pipelined,batch,batch,only,for,shuffles;public,dag,connection,optimizer,node,source,optimizer,node,target,execution,mode,exchange,mode,this,source,target,null,exchange,mode
DagConnection -> public OptimizerNode getSource();1426843274;Gets the source of the connection.__@return The source Node.;public OptimizerNode getSource() {_		return this.source__	};gets,the,source,of,the,connection,return,the,source,node;public,optimizer,node,get,source,return,this,source
DagConnection -> public OptimizerNode getSource();1442492509;Gets the source of the connection.__@return The source Node.;public OptimizerNode getSource() {_		return this.source__	};gets,the,source,of,the,connection,return,the,source,node;public,optimizer,node,get,source,return,this,source
DagConnection -> public OptimizerNode getSource();1533553549;Gets the source of the connection.__@return The source Node.;public OptimizerNode getSource() {_		return this.source__	};gets,the,source,of,the,connection,return,the,source,node;public,optimizer,node,get,source,return,this,source
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, 							ShipStrategyType shipStrategy, ExecutionMode exchangeMode);1426843274;Creates a new Connection between two nodes.__@param source_The source node._@param target_The target node._@param shipStrategy_The shipping strategy._@param exchangeMode_The data exchange mode (pipelined / batch / batch only for shuffles / ... );public DagConnection(OptimizerNode source, OptimizerNode target,_							ShipStrategyType shipStrategy, ExecutionMode exchangeMode)_	{_		if (source == null || target == null) {_			throw new NullPointerException("Source and target must not be null.")__		}_		this.source = source__		this.target = target__		this.shipStrategy = shipStrategy__		this.dataExchangeMode = exchangeMode__	};creates,a,new,connection,between,two,nodes,param,source,the,source,node,param,target,the,target,node,param,ship,strategy,the,shipping,strategy,param,exchange,mode,the,data,exchange,mode,pipelined,batch,batch,only,for,shuffles;public,dag,connection,optimizer,node,source,optimizer,node,target,ship,strategy,type,ship,strategy,execution,mode,exchange,mode,if,source,null,target,null,throw,new,null,pointer,exception,source,and,target,must,not,be,null,this,source,source,this,target,target,this,ship,strategy,ship,strategy,this,data,exchange,mode,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, 							ShipStrategyType shipStrategy, ExecutionMode exchangeMode);1442492509;Creates a new Connection between two nodes.__@param source_The source node._@param target_The target node._@param shipStrategy_The shipping strategy._@param exchangeMode_The data exchange mode (pipelined / batch / batch only for shuffles / ... );public DagConnection(OptimizerNode source, OptimizerNode target,_							ShipStrategyType shipStrategy, ExecutionMode exchangeMode)_	{_		if (source == null || target == null) {_			throw new NullPointerException("Source and target must not be null.")__		}_		this.source = source__		this.target = target__		this.shipStrategy = shipStrategy__		this.dataExchangeMode = exchangeMode__	};creates,a,new,connection,between,two,nodes,param,source,the,source,node,param,target,the,target,node,param,ship,strategy,the,shipping,strategy,param,exchange,mode,the,data,exchange,mode,pipelined,batch,batch,only,for,shuffles;public,dag,connection,optimizer,node,source,optimizer,node,target,ship,strategy,type,ship,strategy,execution,mode,exchange,mode,if,source,null,target,null,throw,new,null,pointer,exception,source,and,target,must,not,be,null,this,source,source,this,target,target,this,ship,strategy,ship,strategy,this,data,exchange,mode,exchange,mode
DagConnection -> public DagConnection(OptimizerNode source, OptimizerNode target, 							ShipStrategyType shipStrategy, ExecutionMode exchangeMode);1533553549;Creates a new Connection between two nodes.__@param source_The source node._@param target_The target node._@param shipStrategy_The shipping strategy._@param exchangeMode_The data exchange mode (pipelined / batch / batch only for shuffles / ... );public DagConnection(OptimizerNode source, OptimizerNode target,_							ShipStrategyType shipStrategy, ExecutionMode exchangeMode)_	{_		if (source == null || target == null) {_			throw new NullPointerException("Source and target must not be null.")__		}_		this.source = source__		this.target = target__		this.shipStrategy = shipStrategy__		this.dataExchangeMode = exchangeMode__	};creates,a,new,connection,between,two,nodes,param,source,the,source,node,param,target,the,target,node,param,ship,strategy,the,shipping,strategy,param,exchange,mode,the,data,exchange,mode,pipelined,batch,batch,only,for,shuffles;public,dag,connection,optimizer,node,source,optimizer,node,target,ship,strategy,type,ship,strategy,execution,mode,exchange,mode,if,source,null,target,null,throw,new,null,pointer,exception,source,and,target,must,not,be,null,this,source,source,this,target,target,this,ship,strategy,ship,strategy,this,data,exchange,mode,exchange,mode
DagConnection -> public void markBreaksPipeline();1426843274;Marks that this connection should do a decoupled data exchange (such as batched)_rather then pipeline data. Connections are marked as pipeline breakers to avoid_deadlock situations.;public void markBreaksPipeline() {_		this.breakPipeline = true__	};marks,that,this,connection,should,do,a,decoupled,data,exchange,such,as,batched,rather,then,pipeline,data,connections,are,marked,as,pipeline,breakers,to,avoid,deadlock,situations;public,void,mark,breaks,pipeline,this,break,pipeline,true
DagConnection -> public void markBreaksPipeline();1442492509;Marks that this connection should do a decoupled data exchange (such as batched)_rather then pipeline data. Connections are marked as pipeline breakers to avoid_deadlock situations.;public void markBreaksPipeline() {_		this.breakPipeline = true__	};marks,that,this,connection,should,do,a,decoupled,data,exchange,such,as,batched,rather,then,pipeline,data,connections,are,marked,as,pipeline,breakers,to,avoid,deadlock,situations;public,void,mark,breaks,pipeline,this,break,pipeline,true
DagConnection -> public void markBreaksPipeline();1533553549;Marks that this connection should do a decoupled data exchange (such as batched)_rather then pipeline data. Connections are marked as pipeline breakers to avoid_deadlock situations.;public void markBreaksPipeline() {_		this.breakPipeline = true__	};marks,that,this,connection,should,do,a,decoupled,data,exchange,such,as,batched,rather,then,pipeline,data,connections,are,marked,as,pipeline,breakers,to,avoid,deadlock,situations;public,void,mark,breaks,pipeline,this,break,pipeline,true
