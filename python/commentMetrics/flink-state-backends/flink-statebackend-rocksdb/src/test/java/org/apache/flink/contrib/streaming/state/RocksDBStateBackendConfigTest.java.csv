# id;timestamp;commentText;codeText;commentWords;codeWords
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1525123423;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1532591535;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1533212741;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1550681446;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1550863001;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testNonFileSchemePath() throws Exception;1551262917;Validates that schemes other than 'file:/' are not allowed.;@Test(expected = IllegalArgumentException.class)_	public void testNonFileSchemePath() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePath("hdfs:///some/path/to/perdition")__	};validates,that,schemes,other,than,file,are,not,allowed;test,expected,illegal,argument,exception,class,public,void,test,non,file,scheme,path,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,path,hdfs,some,path,to,perdition
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1525123423;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1532591535;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1533212741;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1550681446;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1550863001;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test(expected = IllegalArgumentException.class) 	public void testSetEmptyPaths() throws Exception;1551262917;Validates that empty arguments for the local DB path are invalid.;@Test(expected = IllegalArgumentException.class)_	public void testSetEmptyPaths() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)__		rocksDbBackend.setDbStoragePaths()__	};validates,that,empty,arguments,for,the,local,db,path,are,invalid;test,expected,illegal,argument,exception,class,public,void,test,set,empty,paths,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,rocks,db,backend,set,db,storage,paths
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1525123423;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1532591535;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final Environment env = getMockEnvironment(tempFolder.newFolder())__		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,environment,env,get,mock,environment,temp,folder,new,folder,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,env,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1533212741;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final Environment env = getMockEnvironment(tempFolder.newFolder())__		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,environment,env,get,mock,environment,temp,folder,new,folder,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,env,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1550681446;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final Environment env = getMockEnvironment(tempFolder.newFolder())__		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,environment,env,get,mock,environment,temp,folder,new,folder,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,env,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1550863001;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final Environment env = getMockEnvironment(tempFolder.newFolder())__		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,environment,env,get,mock,environment,temp,folder,new,folder,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,env,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testSetDbPath() throws Exception;1551262917;This test checks the behavior for basic setting of local DB directories.;@Test_	public void testSetDbPath() throws Exception {_		final RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(tempFolder.newFolder().toURI().toString())___		final String testDir1 = tempFolder.newFolder().getAbsolutePath()__		final String testDir2 = tempFolder.newFolder().getAbsolutePath()___		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(testDir1)__		assertArrayEquals(new String[] { testDir1 }, rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePath(null)__		assertNull(rocksDbBackend.getDbStoragePaths())___		rocksDbBackend.setDbStoragePaths(testDir1, testDir2)__		assertArrayEquals(new String[] { testDir1, testDir2 }, rocksDbBackend.getDbStoragePaths())___		final Environment env = getMockEnvironment(tempFolder.newFolder())__		final RocksDBKeyedStateBackend<Integer> keyedBackend = createKeyedStateBackend(rocksDbBackend, env)___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(testDir1), startsWith(testDir2)))___			_			rocksDbBackend.setDbStoragePaths(null)__			assertNull(rocksDbBackend.getDbStoragePaths())__		}_		finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,test,checks,the,behavior,for,basic,setting,of,local,db,directories;test,public,void,test,set,db,path,throws,exception,final,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,temp,folder,new,folder,to,uri,to,string,final,string,test,dir1,temp,folder,new,folder,get,absolute,path,final,string,test,dir2,temp,folder,new,folder,get,absolute,path,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,test,dir1,assert,array,equals,new,string,test,dir1,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,path,null,assert,null,rocks,db,backend,get,db,storage,paths,rocks,db,backend,set,db,storage,paths,test,dir1,test,dir2,assert,array,equals,new,string,test,dir1,test,dir2,rocks,db,backend,get,db,storage,paths,final,environment,env,get,mock,environment,temp,folder,new,folder,final,rocks,dbkeyed,state,backend,integer,keyed,backend,create,keyed,state,backend,rocks,db,backend,env,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,test,dir1,starts,with,test,dir2,rocks,db,backend,set,db,storage,paths,null,assert,null,rocks,db,backend,get,db,storage,paths,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1519061869;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		File[] tempDirs = new File[] { dir1, dir2 }___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(tempDirs)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,file,temp,dirs,new,file,dir1,dir2,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,temp,dirs,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1519568061;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		File[] tempDirs = new File[] { dir1, dir2 }___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(tempDirs)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,file,temp,dirs,new,file,dir1,dir2,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,temp,dirs,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1523010728;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		File[] tempDirs = new File[] { dir1, dir2 }___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(tempDirs)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,file,temp,dirs,new,file,dir1,dir2,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,temp,dirs,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1525123423;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		File[] tempDirs = new File[] { dir1, dir2 }___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(tempDirs)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,file,temp,dirs,new,file,dir1,dir2,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,temp,dirs,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1532591535;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(dir1, dir2)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,dir1,dir2,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1533212741;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(dir1, dir2)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,dir1,dir2,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1550681446;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(dir1, dir2)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,dir1,dir2,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1550863001;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(dir1, dir2)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,dir1,dir2,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
RocksDBStateBackendConfigTest -> @Test 	public void testUseTempDirectories() throws Exception;1551262917;This tests whether the RocksDB backends uses the temp directories that are provided_from the {@link Environment} when no db storage path is set.;@Test_	public void testUseTempDirectories() throws Exception {_		String checkpointPath = tempFolder.newFolder().toURI().toString()__		RocksDBStateBackend rocksDbBackend = new RocksDBStateBackend(checkpointPath)___		File dir1 = tempFolder.newFolder()__		File dir2 = tempFolder.newFolder()___		assertNull(rocksDbBackend.getDbStoragePaths())___		Environment env = getMockEnvironment(dir1, dir2)__		RocksDBKeyedStateBackend<Integer> keyedBackend = (RocksDBKeyedStateBackend<Integer>) rocksDbBackend._				createKeyedStateBackend(_						env,_						env.getJobID(),_						"test_op",_						IntSerializer.INSTANCE,_						1,_						new KeyGroupRange(0, 0),_						env.getTaskKvStateRegistry())___		try {_			File instanceBasePath = keyedBackend.getInstanceBasePath()__			assertThat(instanceBasePath.getAbsolutePath(), anyOf(startsWith(dir1.getAbsolutePath()), startsWith(dir2.getAbsolutePath())))__		} finally {_			IOUtils.closeQuietly(keyedBackend)__			keyedBackend.dispose()__		}_	};this,tests,whether,the,rocks,db,backends,uses,the,temp,directories,that,are,provided,from,the,link,environment,when,no,db,storage,path,is,set;test,public,void,test,use,temp,directories,throws,exception,string,checkpoint,path,temp,folder,new,folder,to,uri,to,string,rocks,dbstate,backend,rocks,db,backend,new,rocks,dbstate,backend,checkpoint,path,file,dir1,temp,folder,new,folder,file,dir2,temp,folder,new,folder,assert,null,rocks,db,backend,get,db,storage,paths,environment,env,get,mock,environment,dir1,dir2,rocks,dbkeyed,state,backend,integer,keyed,backend,rocks,dbkeyed,state,backend,integer,rocks,db,backend,create,keyed,state,backend,env,env,get,job,id,int,serializer,instance,1,new,key,group,range,0,0,env,get,task,kv,state,registry,try,file,instance,base,path,keyed,backend,get,instance,base,path,assert,that,instance,base,path,get,absolute,path,any,of,starts,with,dir1,get,absolute,path,starts,with,dir2,get,absolute,path,finally,ioutils,close,quietly,keyed,backend,keyed,backend,dispose
