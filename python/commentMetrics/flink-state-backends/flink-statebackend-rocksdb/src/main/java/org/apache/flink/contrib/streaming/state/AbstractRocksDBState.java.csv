# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1519061869;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		writeOptions = new WriteOptions()__		writeOptions.setDisableWAL(true)__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = (backend.getKeySerializer().getLength() < 0)_				&& (namespaceSerializer.getLength() < 0)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,write,options,new,write,options,write,options,set,disable,wal,true,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,backend,get,key,serializer,get,length,0,namespace,serializer,get,length,0
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1519311530;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		writeOptions = new WriteOptions()__		writeOptions.setDisableWAL(true)__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = (backend.getKeySerializer().getLength() < 0)_				&& (namespaceSerializer.getLength() < 0)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,write,options,new,write,options,write,options,set,disable,wal,true,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,backend,get,key,serializer,get,length,0,namespace,serializer,get,length,0
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1519379856;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		writeOptions = new WriteOptions()__		writeOptions.setDisableWAL(true)__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,write,options,new,write,options,write,options,set,disable,wal,true,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1519570795;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1519570795;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			SD stateDesc, 			RocksDBKeyedStateBackend<K> backend);1522337739;Creates a new RocksDB backed state._@param namespaceSerializer The serializer for the namespace.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			SD stateDesc,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.stateDesc = Preconditions.checkNotNull(stateDesc, "State Descriptor")___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,namespace,serializer,the,serializer,for,the,namespace;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,sd,state,desc,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,state,desc,preconditions,check,not,null,state,desc,state,descriptor,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1524906327;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1528969216;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.keySerializationStream = new ByteArrayOutputStreamWithPos(128)__		this.keySerializationDataOutputView = new DataOutputViewStreamWrapper(keySerializationStream)__		this.ambiguousKeyPossible = RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,key,serialization,stream,new,byte,array,output,stream,with,pos,128,this,key,serialization,data,output,view,new,data,output,view,stream,wrapper,key,serialization,stream,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1533924476;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new ByteArrayDataOutputView(128)__		this.dataInputView = new ByteArrayDataInputView()__		this.ambiguousKeyPossible =_			RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,byte,array,data,output,view,128,this,data,input,view,new,byte,array,data,input,view,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1534937605;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.ambiguousKeyPossible =_			RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1540907751;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.ambiguousKeyPossible =_			RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1546862341;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.ambiguousKeyPossible =_			RocksDBKeySerializationUtils.isAmbiguousKeyPossible(backend.getKeySerializer(), namespaceSerializer)__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,ambiguous,key,possible,rocks,dbkey,serialization,utils,is,ambiguous,key,possible,backend,get,key,serializer,namespace,serializer
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1546862378;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.sharedKeyNamespaceSerializer = backend.getSharedRocksKeyBuilder()__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,shared,key,namespace,serializer,backend,get,shared,rocks,key,builder
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1548755874;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.sharedKeyNamespaceSerializer = backend.getSharedRocksKeyBuilder()__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,shared,key,namespace,serializer,backend,get,shared,rocks,key,builder
AbstractRocksDBState -> protected AbstractRocksDBState( 			ColumnFamilyHandle columnFamily, 			TypeSerializer<N> namespaceSerializer, 			TypeSerializer<V> valueSerializer, 			V defaultValue, 			RocksDBKeyedStateBackend<K> backend);1548860009;Creates a new RocksDB backed state.__@param columnFamily The RocksDB column family that this state is associated to._@param namespaceSerializer The serializer for the namespace._@param valueSerializer The serializer for the state._@param defaultValue The default value for the state._@param backend The backend for which this state is bind to.;protected AbstractRocksDBState(_			ColumnFamilyHandle columnFamily,_			TypeSerializer<N> namespaceSerializer,_			TypeSerializer<V> valueSerializer,_			V defaultValue,_			RocksDBKeyedStateBackend<K> backend) {__		this.namespaceSerializer = namespaceSerializer__		this.backend = backend___		this.columnFamily = columnFamily___		this.writeOptions = backend.getWriteOptions()__		this.valueSerializer = Preconditions.checkNotNull(valueSerializer, "State value serializer")__		this.defaultValue = defaultValue___		this.dataOutputView = new DataOutputSerializer(128)__		this.dataInputView = new DataInputDeserializer()__		this.sharedKeyNamespaceSerializer = backend.getSharedRocksKeyBuilder()__	};creates,a,new,rocks,db,backed,state,param,column,family,the,rocks,db,column,family,that,this,state,is,associated,to,param,namespace,serializer,the,serializer,for,the,namespace,param,value,serializer,the,serializer,for,the,state,param,default,value,the,default,value,for,the,state,param,backend,the,backend,for,which,this,state,is,bind,to;protected,abstract,rocks,dbstate,column,family,handle,column,family,type,serializer,n,namespace,serializer,type,serializer,v,value,serializer,v,default,value,rocks,dbkeyed,state,backend,k,backend,this,namespace,serializer,namespace,serializer,this,backend,backend,this,column,family,column,family,this,write,options,backend,get,write,options,this,value,serializer,preconditions,check,not,null,value,serializer,state,value,serializer,this,default,value,default,value,this,data,output,view,new,data,output,serializer,128,this,data,input,view,new,data,input,deserializer,this,shared,key,namespace,serializer,backend,get,shared,rocks,key,builder
