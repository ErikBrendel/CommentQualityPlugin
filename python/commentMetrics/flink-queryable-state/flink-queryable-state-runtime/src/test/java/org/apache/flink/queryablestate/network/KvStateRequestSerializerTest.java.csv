# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception;1524760045;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(_				serializedKey,_				mapState.getKeySerializer(),_				mapState.getNamespaceSerializer(),_				mapState.getValueSerializer())___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,long,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,state,get,key,serializer,map,state,get,namespace,serializer,map,state,get,value,serializer,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception;1529325710;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(_				serializedKey,_				mapState.getKeySerializer(),_				mapState.getNamespaceSerializer(),_				mapState.getValueSerializer())___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,long,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,state,get,key,serializer,map,state,get,namespace,serializer,map,state,get,value,serializer,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception;1531145571;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(_				serializedKey,_				mapState.getKeySerializer(),_				mapState.getNamespaceSerializer(),_				mapState.getValueSerializer())___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,long,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,state,get,key,serializer,map,state,get,namespace,serializer,map,state,get,value,serializer,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception;1531419503;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<Long, VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(_				serializedKey,_				mapState.getKeySerializer(),_				mapState.getNamespaceSerializer(),_				mapState.getValueSerializer())___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,long,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,state,get,key,serializer,map,state,get,namespace,serializer,map,state,get,value,serializer,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1509037054;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_					mock(TaskKvStateRegistry.class),_					LongSerializer.INSTANCE,_					ClassLoader.getSystemClassLoader(),_					1,_					new KeyGroupRange(0, 0),_					async,_					new ExecutionConfig()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<VoidNamespace, Long, String> mapState = (InternalMapState<VoidNamespace, Long, String>) longHeapKeyedStateBackend.getPartitionedState(_				VoidNamespace.INSTANCE,_				VoidNamespaceSerializer.INSTANCE,_				new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,void,namespace,long,string,map,state,internal,map,state,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1519568061;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<VoidNamespace, Long, String> mapState = (InternalMapState<VoidNamespace, Long, String>) longHeapKeyedStateBackend.getPartitionedState(_				VoidNamespace.INSTANCE,_				VoidNamespaceSerializer.INSTANCE,_				new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,void,namespace,long,string,map,state,internal,map,state,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1522337739;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<Long, VoidNamespace, Long, String, HashMap<Long, String>> mapState =_				(InternalMapState<Long, VoidNamespace, Long, String, HashMap<Long, String>>)_						longHeapKeyedStateBackend.getPartitionedState(_								VoidNamespace.INSTANCE,_								VoidNamespaceSerializer.INSTANCE,_								new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,long,void,namespace,long,string,hash,map,long,string,map,state,internal,map,state,long,void,namespace,long,string,hash,map,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1524760045;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<Long, VoidNamespace, Long, String> mapState =_				(InternalMapState<Long, VoidNamespace, Long, String>)_						longHeapKeyedStateBackend.getPartitionedState(_								VoidNamespace.INSTANCE,_								VoidNamespaceSerializer.INSTANCE,_								new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,long,void,namespace,long,string,map,state,internal,map,state,long,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1529325710;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<Long, VoidNamespace, Long, String> mapState =_				(InternalMapState<Long, VoidNamespace, Long, String>)_						longHeapKeyedStateBackend.getPartitionedState(_								VoidNamespace.INSTANCE,_								VoidNamespaceSerializer.INSTANCE,_								new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,long,void,namespace,long,string,map,state,internal,map,state,long,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1531145571;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				keyGroupRange.getNumberOfKeyGroups(),_				keyGroupRange,_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled(),_				new HeapPriorityQueueSetFactory(keyGroupRange, keyGroupRange.getNumberOfKeyGroups(), 128)_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<Long, VoidNamespace, Long, String> mapState =_				(InternalMapState<Long, VoidNamespace, Long, String>)_						longHeapKeyedStateBackend.getPartitionedState(_								VoidNamespace.INSTANCE,_								VoidNamespaceSerializer.INSTANCE,_								new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,key,group,range,key,group,range,new,key,group,range,0,0,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,key,group,range,get,number,of,key,groups,key,group,range,async,new,execution,config,test,local,recovery,config,disabled,new,heap,priority,queue,set,factory,key,group,range,key,group,range,get,number,of,key,groups,128,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,long,void,namespace,long,string,map,state,internal,map,state,long,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testMapSerialization() throws Exception;1531419503;Tests map serialization utils.;@Test_	public void testMapSerialization() throws Exception {_		final long key = 0L__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				keyGroupRange.getNumberOfKeyGroups(),_				keyGroupRange,_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled(),_				new HeapPriorityQueueSetFactory(keyGroupRange, keyGroupRange.getNumberOfKeyGroups(), 128),_				TtlTimeProvider.DEFAULT_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalMapState<Long, VoidNamespace, Long, String> mapState =_				(InternalMapState<Long, VoidNamespace, Long, String>)_						longHeapKeyedStateBackend.getPartitionedState(_								VoidNamespace.INSTANCE,_								VoidNamespaceSerializer.INSTANCE,_								new MapStateDescriptor<>("test", LongSerializer.INSTANCE, StringSerializer.INSTANCE))___		testMapSerialization(key, mapState)__	};tests,map,serialization,utils;test,public,void,test,map,serialization,throws,exception,final,long,key,0l,final,key,group,range,key,group,range,new,key,group,range,0,0,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,key,group,range,get,number,of,key,groups,key,group,range,async,new,execution,config,test,local,recovery,config,disabled,new,heap,priority,queue,set,factory,key,group,range,key,group,range,get,number,of,key,groups,128,ttl,time,provider,default,long,heap,keyed,state,backend,set,current,key,key,final,internal,map,state,long,void,namespace,long,string,map,state,internal,map,state,long,void,namespace,long,string,long,heap,keyed,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,new,map,state,descriptor,test,long,serializer,instance,string,serializer,instance,test,map,serialization,key,map,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1509037054;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<VoidNamespace, Long> listState = longHeapKeyedStateBackend.createListState(_				VoidNamespaceSerializer.INSTANCE,_				new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,void,namespace,long,list,state,long,heap,keyed,state,backend,create,list,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1519568061;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<VoidNamespace, Long> listState = longHeapKeyedStateBackend.createListState(_				VoidNamespaceSerializer.INSTANCE,_				new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,void,namespace,long,list,state,long,heap,keyed,state,backend,create,list,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1522337739;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createListState(_				VoidNamespaceSerializer.INSTANCE,_				new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,long,void,namespace,long,list,state,long,heap,keyed,state,backend,create,list,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1524760045;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createListState(_				VoidNamespaceSerializer.INSTANCE,_				new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,long,void,namespace,long,list,state,long,heap,keyed,state,backend,create,list,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1529325710;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L___		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				1,_				new KeyGroupRange(0, 0),_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled()_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createState(_			VoidNamespaceSerializer.INSTANCE,_			new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,1,new,key,group,range,0,0,async,new,execution,config,test,local,recovery,config,disabled,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,long,void,namespace,long,list,state,long,heap,keyed,state,backend,create,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1531145571;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				keyGroupRange.getNumberOfKeyGroups(),_				keyGroupRange,_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled(),_				new HeapPriorityQueueSetFactory(keyGroupRange, keyGroupRange.getNumberOfKeyGroups(), 128)_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createState(_			VoidNamespaceSerializer.INSTANCE,_			new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,key,group,range,key,group,range,new,key,group,range,0,0,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,key,group,range,get,number,of,key,groups,key,group,range,async,new,execution,config,test,local,recovery,config,disabled,new,heap,priority,queue,set,factory,key,group,range,key,group,range,get,number,of,key,groups,128,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,long,void,namespace,long,list,state,long,heap,keyed,state,backend,create,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testListSerialization() throws Exception;1531419503;Tests list serialization utils.;@Test_	public void testListSerialization() throws Exception {_		final long key = 0L__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		_		final HeapKeyedStateBackend<Long> longHeapKeyedStateBackend =_			new HeapKeyedStateBackend<>(_				mock(TaskKvStateRegistry.class),_				LongSerializer.INSTANCE,_				ClassLoader.getSystemClassLoader(),_				keyGroupRange.getNumberOfKeyGroups(),_				keyGroupRange,_				async,_				new ExecutionConfig(),_				TestLocalRecoveryConfig.disabled(),_				new HeapPriorityQueueSetFactory(keyGroupRange, keyGroupRange.getNumberOfKeyGroups(), 128),_				TtlTimeProvider.DEFAULT_			)__		longHeapKeyedStateBackend.setCurrentKey(key)___		final InternalListState<Long, VoidNamespace, Long> listState = longHeapKeyedStateBackend.createInternalState(_			VoidNamespaceSerializer.INSTANCE,_			new ListStateDescriptor<>("test", LongSerializer.INSTANCE))___		testListSerialization(key, listState)__	};tests,list,serialization,utils;test,public,void,test,list,serialization,throws,exception,final,long,key,0l,final,key,group,range,key,group,range,new,key,group,range,0,0,final,heap,keyed,state,backend,long,long,heap,keyed,state,backend,new,heap,keyed,state,backend,mock,task,kv,state,registry,class,long,serializer,instance,class,loader,get,system,class,loader,key,group,range,get,number,of,key,groups,key,group,range,async,new,execution,config,test,local,recovery,config,disabled,new,heap,priority,queue,set,factory,key,group,range,key,group,range,get,number,of,key,groups,128,ttl,time,provider,default,long,heap,keyed,state,backend,set,current,key,key,final,internal,list,state,long,void,namespace,long,list,state,long,heap,keyed,state,backend,create,internal,state,void,namespace,serializer,instance,new,list,state,descriptor,test,long,serializer,instance,test,list,serialization,key,list,state
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1509037054;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1519568061;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1522337739;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1524760045;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1529325710;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1531145571;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test 	public void testValueSerialization() throws Exception;1531419503;Tests value serialization utils.;@Test_	public void testValueSerialization() throws Exception {_		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		long expectedValue = Long.MAX_VALUE - 1292929292L___		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		long actualValue = KvStateSerializer.deserializeValue(serializedValue, valueSerializer)___		assertEquals(expectedValue, actualValue)__	};tests,value,serialization,utils;test,public,void,test,value,serialization,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,long,expected,value,long,1292929292l,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,long,actual,value,kv,state,serializer,deserialize,value,serialized,value,value,serializer,assert,equals,expected,value,actual,value
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1509037054;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1519568061;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1522337739;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1524760045;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1529325710;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1531145571;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooShort() throws Exception;1531419503;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooShort() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,short,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1509037054;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1519568061;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1522337739;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1524760045;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1529325710;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1531145571;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeListEmpty() throws Exception;1531419503;Tests list deserialization with too few bytes.;@Test_	public void testDeserializeListEmpty() throws Exception {_		List<Long> actualValue = KvStateSerializer_			.deserializeList(new byte[] {}, LongSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,list,deserialization,with,too,few,bytes;test,public,void,test,deserialize,list,empty,throws,exception,list,long,actual,value,kv,state,serializer,deserialize,list,new,byte,long,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1509037054;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1519568061;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1522337739;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1524760045;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1529325710;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1531145571;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception;1531419503;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany2() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many2,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1509037054;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1519568061;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1522337739;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1524760045;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1529325710;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1531145571;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueEmpty() throws Exception;1531419503;Tests value deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueEmpty() throws Exception {_		KvStateSerializer.deserializeValue(new byte[] {}, LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,empty,throws,exception,kv,state,serializer,deserialize,value,new,byte,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1509037054;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1519568061;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1522337739;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1524760045;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1529325710;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1531145571;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort1() throws Exception;1531419503;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort1() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1}, LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short1,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1509037054;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1519568061;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1522337739;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1524760045;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1529325710;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1531145571;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception;1531419503;Tests key and namespace deserialization utils with too many bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooMany1() throws Exception {_		_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 42, 0, 2}, LongSerializer.INSTANCE,_			StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,many,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,many1,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,1,1,1,1,1,1,1,42,0,2,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1509037054;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1519568061;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1522337739;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1524760045;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1529325710;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1531145571;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeListTooShort2() throws Exception;1531419503;Tests list deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeListTooShort2() throws Exception {_		_		KvStateSerializer.deserializeList(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 3},_			LongSerializer.INSTANCE)__	};tests,list,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,list,too,short2,throws,exception,kv,state,serializer,deserialize,list,new,byte,1,1,1,1,1,1,1,1,2,3,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1509037054;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1519568061;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1522337739;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1524760045;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1529325710;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1531145571;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort2() throws Exception;1531419503;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort2() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 0},_				LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short2,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1509037054;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1519568061;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1522337739;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1524760045;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1529325710;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1531145571;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort3() throws Exception;1531419503;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort3() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3},_			LongSerializer.INSTANCE, LongSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short3,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,3,long,serializer,instance,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1509037054;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1519568061;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1522337739;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1524760045;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1529325710;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1531145571;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany1() throws Exception;1531419503;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany1() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many1,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1509037054;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1519568061;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1522337739;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1524760045;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1529325710;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1531145571;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeMapTooShort1() throws Exception;1531419503;Tests map deserialization with too few bytes.;@Test(expected = IOException.class)_	public void testDeserializeMapTooShort1() throws Exception {_		_		KvStateSerializer.deserializeMap(new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,map,deserialization,with,too,few,bytes;test,expected,ioexception,class,public,void,test,deserialize,map,too,short1,throws,exception,kv,state,serializer,deserialize,map,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1509037054;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1519568061;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1522337739;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1524760045;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1529325710;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1531145571;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testKeyAndNamespaceSerialization() throws Exception;1531419503;Tests key and namespace serialization utils.;@Test_	public void testKeyAndNamespaceSerialization() throws Exception {_		TypeSerializer<Long> keySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> namespaceSerializer = StringSerializer.INSTANCE___		long expectedKey = Integer.MAX_VALUE + 12323L__		String expectedNamespace = "knilf"___		byte[] serializedKeyAndNamespace = KvStateSerializer.serializeKeyAndNamespace(_				expectedKey, keySerializer, expectedNamespace, namespaceSerializer)___		Tuple2<Long, String> actual = KvStateSerializer.deserializeKeyAndNamespace(_				serializedKeyAndNamespace, keySerializer, namespaceSerializer)___		assertEquals(expectedKey, actual.f0.longValue())__		assertEquals(expectedNamespace, actual.f1)__	};tests,key,and,namespace,serialization,utils;test,public,void,test,key,and,namespace,serialization,throws,exception,type,serializer,long,key,serializer,long,serializer,instance,type,serializer,string,namespace,serializer,string,serializer,instance,long,expected,key,integer,12323l,string,expected,namespace,knilf,byte,serialized,key,and,namespace,kv,state,serializer,serialize,key,and,namespace,expected,key,key,serializer,expected,namespace,namespace,serializer,tuple2,long,string,actual,kv,state,serializer,deserialize,key,and,namespace,serialized,key,and,namespace,key,serializer,namespace,serializer,assert,equals,expected,key,actual,f0,long,value,assert,equals,expected,namespace,actual,f1
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1509037054;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1519568061;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1522337739;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1524760045;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1529325710;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1531145571;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> @Test 	public void testDeserializeMapEmpty() throws Exception;1531419503;Tests map deserialization with too few bytes.;@Test_	public void testDeserializeMapEmpty() throws Exception {_		Map<Long, String> actualValue = KvStateSerializer_			.deserializeMap(new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__		assertEquals(0, actualValue.size())__	};tests,map,deserialization,with,too,few,bytes;test,public,void,test,deserialize,map,empty,throws,exception,map,long,string,actual,value,kv,state,serializer,deserialize,map,new,byte,long,serializer,instance,string,serializer,instance,assert,equals,0,actual,value,size
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception;1522337739;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(_				serializedKey,_				listState.getKeySerializer(),_				listState.getNamespaceSerializer(),_				listState.getValueSerializer())___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,long,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,state,get,key,serializer,list,state,get,namespace,serializer,list,state,get,value,serializer,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception;1524760045;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(_				serializedKey,_				listState.getKeySerializer(),_				listState.getNamespaceSerializer(),_				listState.getValueSerializer())___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,long,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,state,get,key,serializer,list,state,get,namespace,serializer,list,state,get,value,serializer,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception;1529325710;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(_				serializedKey,_				listState.getKeySerializer(),_				listState.getNamespaceSerializer(),_				listState.getValueSerializer())___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,long,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,state,get,key,serializer,list,state,get,namespace,serializer,list,state,get,value,serializer,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception;1531145571;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(_				serializedKey,_				listState.getKeySerializer(),_				listState.getNamespaceSerializer(),_				listState.getValueSerializer())___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,long,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,state,get,key,serializer,list,state,get,namespace,serializer,list,state,get,value,serializer,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception;1531419503;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<Long, VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(_				serializedKey,_				listState.getKeySerializer(),_				listState.getNamespaceSerializer(),_				listState.getValueSerializer())___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,long,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,state,get,key,serializer,list,state,get,namespace,serializer,list,state,get,value,serializer,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1509037054;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1519568061;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1522337739;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1524760045;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1529325710;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1531145571;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationTooShort() throws Exception;1531419503;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationTooShort() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {1}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,too,short,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,1,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1509037054;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1519568061;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1522337739;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1524760045;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1529325710;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1531145571;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testDeserializeValueTooMany2() throws Exception;1531419503;Tests value deserialization with too many bytes.;@Test(expected = IOException.class)_	public void testDeserializeValueTooMany2() throws Exception {_		_		KvStateSerializer.deserializeValue(new byte[] {1, 1, 1, 1, 1, 1, 1, 1, 2, 2},_			LongSerializer.INSTANCE)__	};tests,value,deserialization,with,too,many,bytes;test,expected,ioexception,class,public,void,test,deserialize,value,too,many2,throws,exception,kv,state,serializer,deserialize,value,new,byte,1,1,1,1,1,1,1,1,2,2,long,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1509037054;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1519568061;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1522337739;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1524760045;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1529325710;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1531145571;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> @Test(expected = IOException.class) 	public void testKeyAndNamespaceDeserializationEmpty() throws Exception;1531419503;Tests key and namespace deserialization utils with too few bytes.;@Test(expected = IOException.class)_	public void testKeyAndNamespaceDeserializationEmpty() throws Exception {_		KvStateSerializer.deserializeKeyAndNamespace(_			new byte[] {}, LongSerializer.INSTANCE, StringSerializer.INSTANCE)__	};tests,key,and,namespace,deserialization,utils,with,too,few,bytes;test,expected,ioexception,class,public,void,test,key,and,namespace,deserialization,empty,throws,exception,kv,state,serializer,deserialize,key,and,namespace,new,byte,long,serializer,instance,string,serializer,instance
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<VoidNamespace, Long> listState) throws Exception;1509037054;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(serializedKey)___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testListSerialization( 			final long key, 			final InternalListState<VoidNamespace, Long> listState) throws Exception;1519568061;Verifies that the serialization of a list using the given list state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the list state_@param listState_list state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testListSerialization(_			final long key,_			final InternalListState<VoidNamespace, Long> listState) throws Exception {__		TypeSerializer<Long> valueSerializer = LongSerializer.INSTANCE__		listState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final List<Long> expectedValues = new ArrayList<>()__		for (int i = 0_ i < numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.add(value)__			listState.add(value)__		}__		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = listState.getSerializedValue(serializedKey)___		List<Long> actualValues = KvStateSerializer.deserializeList(serializedValues, valueSerializer)__		assertEquals(expectedValues, actualValues)___		_		long expectedValue = ThreadLocalRandom.current().nextLong()__		byte[] serializedValue = KvStateSerializer.serializeValue(expectedValue, valueSerializer)__		List<Long> actualValue = KvStateSerializer.deserializeList(serializedValue, valueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(0).longValue())__	};verifies,that,the,serialization,of,a,list,using,the,given,list,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,list,state,param,list,state,list,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,list,serialization,final,long,key,final,internal,list,state,void,namespace,long,list,state,throws,exception,type,serializer,long,value,serializer,long,serializer,instance,list,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,list,long,expected,values,new,array,list,for,int,i,0,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,add,value,list,state,add,value,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,list,state,get,serialized,value,serialized,key,list,long,actual,values,kv,state,serializer,deserialize,list,serialized,values,value,serializer,assert,equals,expected,values,actual,values,long,expected,value,thread,local,random,current,next,long,byte,serialized,value,kv,state,serializer,serialize,value,expected,value,value,serializer,list,long,actual,value,kv,state,serializer,deserialize,list,serialized,value,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,0,long,value
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<VoidNamespace, Long, String> mapState) throws Exception;1509037054;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(serializedKey)___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
KvStateRequestSerializerTest -> public static void testMapSerialization( 			final long key, 			final InternalMapState<VoidNamespace, Long, String> mapState) throws Exception;1519568061;Verifies that the serialization of a map using the given map state_matches the deserialization with {@link KvStateSerializer#deserializeList}.__@param key_key of the map state_@param mapState_map state using the {@link VoidNamespace}, must also be a {@link InternalKvState} instance__@throws Exception;public static void testMapSerialization(_			final long key,_			final InternalMapState<VoidNamespace, Long, String> mapState) throws Exception {__		TypeSerializer<Long> userKeySerializer = LongSerializer.INSTANCE__		TypeSerializer<String> userValueSerializer = StringSerializer.INSTANCE__		mapState.setCurrentNamespace(VoidNamespace.INSTANCE)___		_		final int numElements = 10___		final Map<Long, String> expectedValues = new HashMap<>()__		for (int i = 1_ i <= numElements_ i++) {_			final long value = ThreadLocalRandom.current().nextLong()__			expectedValues.put(value, Long.toString(value))__			mapState.put(value, Long.toString(value))__		}__		expectedValues.put(0L, null)__		mapState.put(0L, null)___		final byte[] serializedKey =_			KvStateSerializer.serializeKeyAndNamespace(_				key, LongSerializer.INSTANCE,_				VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE)___		final byte[] serializedValues = mapState.getSerializedValue(serializedKey)___		Map<Long, String> actualValues = KvStateSerializer.deserializeMap(serializedValues, userKeySerializer, userValueSerializer)__		assertEquals(expectedValues.size(), actualValues.size())__		for (Map.Entry<Long, String> actualEntry : actualValues.entrySet()) {_			assertEquals(expectedValues.get(actualEntry.getKey()), actualEntry.getValue())__		}__		_		ByteArrayOutputStream baos = new ByteArrayOutputStream()__		long expectedKey = ThreadLocalRandom.current().nextLong()__		String expectedValue = Long.toString(expectedKey)__		byte[] isNull = {0}___		baos.write(KvStateSerializer.serializeValue(expectedKey, userKeySerializer))__		baos.write(isNull)__		baos.write(KvStateSerializer.serializeValue(expectedValue, userValueSerializer))__		byte[] serializedValue = baos.toByteArray()___		Map<Long, String> actualValue = KvStateSerializer.deserializeMap(serializedValue, userKeySerializer, userValueSerializer)__		assertEquals(1, actualValue.size())__		assertEquals(expectedValue, actualValue.get(expectedKey))__	};verifies,that,the,serialization,of,a,map,using,the,given,map,state,matches,the,deserialization,with,link,kv,state,serializer,deserialize,list,param,key,key,of,the,map,state,param,map,state,map,state,using,the,link,void,namespace,must,also,be,a,link,internal,kv,state,instance,throws,exception;public,static,void,test,map,serialization,final,long,key,final,internal,map,state,void,namespace,long,string,map,state,throws,exception,type,serializer,long,user,key,serializer,long,serializer,instance,type,serializer,string,user,value,serializer,string,serializer,instance,map,state,set,current,namespace,void,namespace,instance,final,int,num,elements,10,final,map,long,string,expected,values,new,hash,map,for,int,i,1,i,num,elements,i,final,long,value,thread,local,random,current,next,long,expected,values,put,value,long,to,string,value,map,state,put,value,long,to,string,value,expected,values,put,0l,null,map,state,put,0l,null,final,byte,serialized,key,kv,state,serializer,serialize,key,and,namespace,key,long,serializer,instance,void,namespace,instance,void,namespace,serializer,instance,final,byte,serialized,values,map,state,get,serialized,value,serialized,key,map,long,string,actual,values,kv,state,serializer,deserialize,map,serialized,values,user,key,serializer,user,value,serializer,assert,equals,expected,values,size,actual,values,size,for,map,entry,long,string,actual,entry,actual,values,entry,set,assert,equals,expected,values,get,actual,entry,get,key,actual,entry,get,value,byte,array,output,stream,baos,new,byte,array,output,stream,long,expected,key,thread,local,random,current,next,long,string,expected,value,long,to,string,expected,key,byte,is,null,0,baos,write,kv,state,serializer,serialize,value,expected,key,user,key,serializer,baos,write,is,null,baos,write,kv,state,serializer,serialize,value,expected,value,user,value,serializer,byte,serialized,value,baos,to,byte,array,map,long,string,actual,value,kv,state,serializer,deserialize,map,serialized,value,user,key,serializer,user,value,serializer,assert,equals,1,actual,value,size,assert,equals,expected,value,actual,value,get,expected,key
