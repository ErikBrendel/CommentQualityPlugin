# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractServerBase -> public String getServerName();1509037054;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public String getServerName();1509981553;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public String getServerName();1510060074;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public String getServerName();1510911969;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public String getServerName();1512567202;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public String getServerName();1522337587;Gets the name of the server. This is useful for debugging._@return The name of the server.;public String getServerName() {_		return serverName__	};gets,the,name,of,the,server,this,is,useful,for,debugging,return,the,name,of,the,server;public,string,get,server,name,return,server,name
AbstractServerBase -> public CompletableFuture<Void> shutdownServer();1512567202;Shuts down the server and all related thread pools._@return A {@link CompletableFuture} that will be completed upon termination of the shutdown process.;public CompletableFuture<Void> shutdownServer() {_		CompletableFuture<Void> shutdownFuture = new CompletableFuture<>()__		if (serverShutdownFuture.compareAndSet(null, shutdownFuture)) {_			log.info("Shutting down {} @ {}", serverName, serverAddress)___			final CompletableFuture<Void> groupShutdownFuture = new CompletableFuture<>()__			if (bootstrap != null) {_				EventLoopGroup group = bootstrap.group()__				if (group != null && !group.isShutdown()) {_					group.shutdownGracefully(0L, 0L, TimeUnit.MILLISECONDS)_							.addListener(finished -> {_								if (finished.isSuccess()) {_									groupShutdownFuture.complete(null)__								} else {_									groupShutdownFuture.completeExceptionally(finished.cause())__								}_							})__				} else {_					groupShutdownFuture.complete(null)__				}_			} else {_				groupShutdownFuture.complete(null)__			}__			final CompletableFuture<Void> handlerShutdownFuture = new CompletableFuture<>()__			if (handler == null) {_				handlerShutdownFuture.complete(null)__			} else {_				handler.shutdown().whenComplete((result, throwable) -> {_					if (throwable != null) {_						handlerShutdownFuture.completeExceptionally(throwable)__					} else {_						handlerShutdownFuture.complete(null)__					}_				})__			}__			final CompletableFuture<Void> queryExecShutdownFuture = CompletableFuture.runAsync(() -> {_				if (queryExecutor != null) {_					ExecutorUtils.gracefulShutdown(10L, TimeUnit.MINUTES, queryExecutor)__				}_			})___			CompletableFuture.allOf(_					queryExecShutdownFuture, groupShutdownFuture, handlerShutdownFuture_			).whenComplete((result, throwable) -> {_				if (throwable != null) {_					shutdownFuture.completeExceptionally(throwable)__				} else {_					shutdownFuture.complete(null)__				}_			})__		}_		return serverShutdownFuture.get()__	};shuts,down,the,server,and,all,related,thread,pools,return,a,link,completable,future,that,will,be,completed,upon,termination,of,the,shutdown,process;public,completable,future,void,shutdown,server,completable,future,void,shutdown,future,new,completable,future,if,server,shutdown,future,compare,and,set,null,shutdown,future,log,info,shutting,down,server,name,server,address,final,completable,future,void,group,shutdown,future,new,completable,future,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,is,shutdown,group,shutdown,gracefully,0l,0l,time,unit,milliseconds,add,listener,finished,if,finished,is,success,group,shutdown,future,complete,null,else,group,shutdown,future,complete,exceptionally,finished,cause,else,group,shutdown,future,complete,null,else,group,shutdown,future,complete,null,final,completable,future,void,handler,shutdown,future,new,completable,future,if,handler,null,handler,shutdown,future,complete,null,else,handler,shutdown,when,complete,result,throwable,if,throwable,null,handler,shutdown,future,complete,exceptionally,throwable,else,handler,shutdown,future,complete,null,final,completable,future,void,query,exec,shutdown,future,completable,future,run,async,if,query,executor,null,executor,utils,graceful,shutdown,10l,time,unit,minutes,query,executor,completable,future,all,of,query,exec,shutdown,future,group,shutdown,future,handler,shutdown,future,when,complete,result,throwable,if,throwable,null,shutdown,future,complete,exceptionally,throwable,else,shutdown,future,complete,null,return,server,shutdown,future,get
AbstractServerBase -> public CompletableFuture<Void> shutdownServer();1522337587;Shuts down the server and all related thread pools._@return A {@link CompletableFuture} that will be completed upon termination of the shutdown process.;public CompletableFuture<Void> shutdownServer() {_		CompletableFuture<Void> shutdownFuture = new CompletableFuture<>()__		if (serverShutdownFuture.compareAndSet(null, shutdownFuture)) {_			log.info("Shutting down {} @ {}", serverName, serverAddress)___			final CompletableFuture<Void> groupShutdownFuture = new CompletableFuture<>()__			if (bootstrap != null) {_				EventLoopGroup group = bootstrap.group()__				if (group != null && !group.isShutdown()) {_					group.shutdownGracefully(0L, 0L, TimeUnit.MILLISECONDS)_							.addListener(finished -> {_								if (finished.isSuccess()) {_									groupShutdownFuture.complete(null)__								} else {_									groupShutdownFuture.completeExceptionally(finished.cause())__								}_							})__				} else {_					groupShutdownFuture.complete(null)__				}_			} else {_				groupShutdownFuture.complete(null)__			}__			final CompletableFuture<Void> handlerShutdownFuture = new CompletableFuture<>()__			if (handler == null) {_				handlerShutdownFuture.complete(null)__			} else {_				handler.shutdown().whenComplete((result, throwable) -> {_					if (throwable != null) {_						handlerShutdownFuture.completeExceptionally(throwable)__					} else {_						handlerShutdownFuture.complete(null)__					}_				})__			}__			final CompletableFuture<Void> queryExecShutdownFuture = CompletableFuture.runAsync(() -> {_				if (queryExecutor != null) {_					ExecutorUtils.gracefulShutdown(10L, TimeUnit.MINUTES, queryExecutor)__				}_			})___			CompletableFuture.allOf(_					queryExecShutdownFuture, groupShutdownFuture, handlerShutdownFuture_			).whenComplete((result, throwable) -> {_				if (throwable != null) {_					shutdownFuture.completeExceptionally(throwable)__				} else {_					shutdownFuture.complete(null)__				}_			})__		}_		return serverShutdownFuture.get()__	};shuts,down,the,server,and,all,related,thread,pools,return,a,link,completable,future,that,will,be,completed,upon,termination,of,the,shutdown,process;public,completable,future,void,shutdown,server,completable,future,void,shutdown,future,new,completable,future,if,server,shutdown,future,compare,and,set,null,shutdown,future,log,info,shutting,down,server,name,server,address,final,completable,future,void,group,shutdown,future,new,completable,future,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,is,shutdown,group,shutdown,gracefully,0l,0l,time,unit,milliseconds,add,listener,finished,if,finished,is,success,group,shutdown,future,complete,null,else,group,shutdown,future,complete,exceptionally,finished,cause,else,group,shutdown,future,complete,null,else,group,shutdown,future,complete,null,final,completable,future,void,handler,shutdown,future,new,completable,future,if,handler,null,handler,shutdown,future,complete,null,else,handler,shutdown,when,complete,result,throwable,if,throwable,null,handler,shutdown,future,complete,exceptionally,throwable,else,handler,shutdown,future,complete,null,final,completable,future,void,query,exec,shutdown,future,completable,future,run,async,if,query,executor,null,executor,utils,graceful,shutdown,10l,time,unit,minutes,query,executor,completable,future,all,of,query,exec,shutdown,future,group,shutdown,future,handler,shutdown,future,when,complete,result,throwable,if,throwable,null,shutdown,future,complete,exceptionally,throwable,else,shutdown,future,complete,null,return,server,shutdown,future,get
AbstractServerBase -> public InetSocketAddress getServerAddress();1509037054;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> public InetSocketAddress getServerAddress();1509981553;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> public InetSocketAddress getServerAddress();1510060074;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> public InetSocketAddress getServerAddress();1510911969;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> public InetSocketAddress getServerAddress();1512567202;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> public InetSocketAddress getServerAddress();1522337587;Returns the address of this server.__@return AbstractServerBase address_@throws IllegalStateException If server has not been started yet;public InetSocketAddress getServerAddress() {_		Preconditions.checkState(serverAddress != null, "Server " + serverName + " has not been started.")__		return serverAddress__	};returns,the,address,of,this,server,return,abstract,server,base,address,throws,illegal,state,exception,if,server,has,not,been,started,yet;public,inet,socket,address,get,server,address,preconditions,check,state,server,address,null,server,server,name,has,not,been,started,return,server,address
AbstractServerBase -> private ExecutorService createQueryExecutor();1509037054;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> private ExecutorService createQueryExecutor();1509981553;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> private ExecutorService createQueryExecutor();1510060074;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> private ExecutorService createQueryExecutor();1510911969;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> private ExecutorService createQueryExecutor();1512567202;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> private ExecutorService createQueryExecutor();1522337587;Creates a thread pool for the query execution._@return Thread pool for query execution;private ExecutorService createQueryExecutor() {_		ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + getServerName() + " Thread %d")_				.build()__		return Executors.newFixedThreadPool(numQueryThreads, threadFactory)__	};creates,a,thread,pool,for,the,query,execution,return,thread,pool,for,query,execution;private,executor,service,create,query,executor,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,get,server,name,thread,d,build,return,executors,new,fixed,thread,pool,num,query,threads,thread,factory
AbstractServerBase -> protected ExecutorService getQueryExecutor();1509037054;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> protected ExecutorService getQueryExecutor();1509981553;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> protected ExecutorService getQueryExecutor();1510060074;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> protected ExecutorService getQueryExecutor();1510911969;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> protected ExecutorService getQueryExecutor();1512567202;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> protected ExecutorService getQueryExecutor();1522337587;Returns the thread-pool responsible for processing incoming requests.;protected ExecutorService getQueryExecutor() {_		return queryExecutor__	};returns,the,thread,pool,responsible,for,processing,incoming,requests;protected,executor,service,get,query,executor,return,query,executor
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1509037054;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		LOG.debug("Attempting to start server {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)_				.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)_				.childHandler(new ServerChannelInitializer<>(handler))___		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			LOG.debug("Failed to start server {} on port {}: {}.", serverName, port, e.getMessage())__			shutdown()__		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,server,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,option,channel,option,child,option,channel,option,child,handler,new,server,channel,initializer,handler,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,server,on,port,server,name,port,e,get,message,shutdown,return,false
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1509981553;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		LOG.debug("Attempting to start server {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childHandler(new ServerChannelInitializer<>(handler))___		final int defaultHighWaterMark = 64 * 1024_ _		_		_		if (LOW_WATER_MARK > defaultHighWaterMark) {_			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__		} else { _			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__		}__		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			LOG.debug("Failed to start server {} on port {}: {}.", serverName, port, e.getMessage())__			shutdown()__		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,server,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,handler,new,server,channel,initializer,handler,final,int,default,high,water,mark,64,1024,if,default,high,water,mark,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,else,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,server,on,port,server,name,port,e,get,message,shutdown,return,false
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1510060074;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		LOG.debug("Attempting to start server {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childHandler(new ServerChannelInitializer<>(handler))___		final int defaultHighWaterMark = 64 * 1024_ _		_		_		if (LOW_WATER_MARK > defaultHighWaterMark) {_			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__		} else { _			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__		}__		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			LOG.debug("Failed to start server {} on port {}: {}.", serverName, port, e.getMessage())__			shutdown()__		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,server,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,handler,new,server,channel,initializer,handler,final,int,default,high,water,mark,64,1024,if,default,high,water,mark,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,else,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,server,on,port,server,name,port,e,get,message,shutdown,return,false
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1510911969;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		log.debug("Attempting to start {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childHandler(new ServerChannelInitializer<>(handler))___		final int defaultHighWaterMark = 64 * 1024_ _		_		_		if (LOW_WATER_MARK > defaultHighWaterMark) {_			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__		} else { _			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__		}__		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			log.debug("Failed to start {} on port {}: {}.", serverName, port, e.getMessage())__			shutdown()__		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,handler,new,server,channel,initializer,handler,final,int,default,high,water,mark,64,1024,if,default,high,water,mark,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,else,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,on,port,server,name,port,e,get,message,shutdown,return,false
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1512567202;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		log.debug("Attempting to start {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childHandler(new ServerChannelInitializer<>(handler))___		final int defaultHighWaterMark = 64 * 1024_ _		_		_		if (LOW_WATER_MARK > defaultHighWaterMark) {_			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__		} else { _			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__		}__		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			log.debug("Failed to start {} on port {}: {}.", serverName, port, e.getMessage())__			try {_				_				_				__				shutdownServer()_						.whenComplete((ignoredV, ignoredT) -> serverShutdownFuture.getAndSet(null))_						.get()__			} catch (Exception r) {__				_				_				__				log.warn("Problem while shutting down {}: {}", serverName, r.getMessage())__			}_		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,handler,new,server,channel,initializer,handler,final,int,default,high,water,mark,64,1024,if,default,high,water,mark,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,else,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,on,port,server,name,port,e,get,message,try,shutdown,server,when,complete,ignored,v,ignored,t,server,shutdown,future,get,and,set,null,get,catch,exception,r,log,warn,problem,while,shutting,down,server,name,r,get,message,return,false
AbstractServerBase -> private boolean attemptToBind(final int port) throws Throwable;1522337587;Tries to start the server at the provided port.__<p>This, in conjunction with {@link #start()}, try to start the_server on a free port among the port range provided at the constructor.__@param port the port to try to bind the server to._@throws Exception If something goes wrong during the bind operation.;private boolean attemptToBind(final int port) throws Throwable {_		log.debug("Attempting to start {} on port {}.", serverName, port)___		this.queryExecutor = createQueryExecutor()__		this.handler = initializeHandler()___		final NettyBufferPool bufferPool = new NettyBufferPool(numEventLoopThreads)___		final ThreadFactory threadFactory = new ThreadFactoryBuilder()_				.setDaemon(true)_				.setNameFormat("Flink " + serverName + " EventLoop Thread %d")_				.build()___		final NioEventLoopGroup nioGroup = new NioEventLoopGroup(numEventLoopThreads, threadFactory)___		this.bootstrap = new ServerBootstrap()_				.localAddress(bindAddress, port)_				.group(nioGroup)_				.channel(NioServerSocketChannel.class)_				.option(ChannelOption.ALLOCATOR, bufferPool)_				.childOption(ChannelOption.ALLOCATOR, bufferPool)_				.childHandler(new ServerChannelInitializer<>(handler))___		final int defaultHighWaterMark = 64 * 1024_ _		_		_		if (LOW_WATER_MARK > defaultHighWaterMark) {_			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__		} else { _			bootstrap.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK, LOW_WATER_MARK)__			bootstrap.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK, HIGH_WATER_MARK)__		}__		try {_			final ChannelFuture future = bootstrap.bind().sync()__			if (future.isSuccess()) {_				final InetSocketAddress localAddress = (InetSocketAddress) future.channel().localAddress()__				serverAddress = new InetSocketAddress(localAddress.getAddress(), localAddress.getPort())__				return true__			}__			_			_			__			throw future.cause()__		} catch (BindException e) {_			log.debug("Failed to start {} on port {}: {}.", serverName, port, e.getMessage())__			try {_				_				_				__				shutdownServer()_						.whenComplete((ignoredV, ignoredT) -> serverShutdownFuture.getAndSet(null))_						.get()__			} catch (Exception r) {__				_				_				__				log.warn("Problem while shutting down {}: {}", serverName, r.getMessage())__			}_		}_		_		return false__	};tries,to,start,the,server,at,the,provided,port,p,this,in,conjunction,with,link,start,try,to,start,the,server,on,a,free,port,among,the,port,range,provided,at,the,constructor,param,port,the,port,to,try,to,bind,the,server,to,throws,exception,if,something,goes,wrong,during,the,bind,operation;private,boolean,attempt,to,bind,final,int,port,throws,throwable,log,debug,attempting,to,start,on,port,server,name,port,this,query,executor,create,query,executor,this,handler,initialize,handler,final,netty,buffer,pool,buffer,pool,new,netty,buffer,pool,num,event,loop,threads,final,thread,factory,thread,factory,new,thread,factory,builder,set,daemon,true,set,name,format,flink,server,name,event,loop,thread,d,build,final,nio,event,loop,group,nio,group,new,nio,event,loop,group,num,event,loop,threads,thread,factory,this,bootstrap,new,server,bootstrap,local,address,bind,address,port,group,nio,group,channel,nio,server,socket,channel,class,option,channel,option,allocator,buffer,pool,child,option,channel,option,allocator,buffer,pool,child,handler,new,server,channel,initializer,handler,final,int,default,high,water,mark,64,1024,if,default,high,water,mark,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,else,bootstrap,child,option,channel,option,bootstrap,child,option,channel,option,try,final,channel,future,future,bootstrap,bind,sync,if,future,is,success,final,inet,socket,address,local,address,inet,socket,address,future,channel,local,address,server,address,new,inet,socket,address,local,address,get,address,local,address,get,port,return,true,throw,future,cause,catch,bind,exception,e,log,debug,failed,to,start,on,port,server,name,port,e,get,message,try,shutdown,server,when,complete,ignored,v,ignored,t,server,shutdown,future,get,and,set,null,get,catch,exception,r,log,warn,problem,while,shutting,down,server,name,r,get,message,return,false
AbstractServerBase -> public void shutdown();1509037054;Shuts down the server and all related thread pools.;public void shutdown() {_		LOG.info("Shutting down server {} @ {}", serverName, serverAddress)___		if (handler != null) {_			handler.shutdown()__			handler = null__		}__		if (queryExecutor != null) {_			queryExecutor.shutdown()__		}__		if (bootstrap != null) {_			EventLoopGroup group = bootstrap.group()__			if (group != null) {_				group.shutdownGracefully(0L, 10L, TimeUnit.SECONDS)__			}_		}_		serverAddress = null__	};shuts,down,the,server,and,all,related,thread,pools;public,void,shutdown,log,info,shutting,down,server,server,name,server,address,if,handler,null,handler,shutdown,handler,null,if,query,executor,null,query,executor,shutdown,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,shutdown,gracefully,0l,10l,time,unit,seconds,server,address,null
AbstractServerBase -> public void shutdown();1509981553;Shuts down the server and all related thread pools.;public void shutdown() {_		LOG.info("Shutting down server {} @ {}", serverName, serverAddress)___		if (handler != null) {_			handler.shutdown()__			handler = null__		}__		if (queryExecutor != null) {_			queryExecutor.shutdown()__		}__		if (bootstrap != null) {_			EventLoopGroup group = bootstrap.group()__			if (group != null) {_				group.shutdownGracefully(0L, 10L, TimeUnit.SECONDS)__			}_		}_		serverAddress = null__	};shuts,down,the,server,and,all,related,thread,pools;public,void,shutdown,log,info,shutting,down,server,server,name,server,address,if,handler,null,handler,shutdown,handler,null,if,query,executor,null,query,executor,shutdown,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,shutdown,gracefully,0l,10l,time,unit,seconds,server,address,null
AbstractServerBase -> public void shutdown();1510060074;Shuts down the server and all related thread pools.;public void shutdown() {_		LOG.info("Shutting down server {} @ {}", serverName, serverAddress)___		if (handler != null) {_			handler.shutdown()__			handler = null__		}__		if (queryExecutor != null) {_			queryExecutor.shutdown()__		}__		if (bootstrap != null) {_			EventLoopGroup group = bootstrap.group()__			if (group != null) {_				group.shutdownGracefully(0L, 10L, TimeUnit.SECONDS)__			}_		}_		serverAddress = null__	};shuts,down,the,server,and,all,related,thread,pools;public,void,shutdown,log,info,shutting,down,server,server,name,server,address,if,handler,null,handler,shutdown,handler,null,if,query,executor,null,query,executor,shutdown,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,shutdown,gracefully,0l,10l,time,unit,seconds,server,address,null
AbstractServerBase -> public void shutdown();1510911969;Shuts down the server and all related thread pools.;public void shutdown() {_		log.info("Shutting down {} @ {}", serverName, serverAddress)___		if (handler != null) {_			handler.shutdown()__			handler = null__		}__		if (queryExecutor != null) {_			queryExecutor.shutdown()__		}__		if (bootstrap != null) {_			EventLoopGroup group = bootstrap.group()__			if (group != null) {_				group.shutdownGracefully(0L, 10L, TimeUnit.SECONDS)__			}_		}_		serverAddress = null__	};shuts,down,the,server,and,all,related,thread,pools;public,void,shutdown,log,info,shutting,down,server,name,server,address,if,handler,null,handler,shutdown,handler,null,if,query,executor,null,query,executor,shutdown,if,bootstrap,null,event,loop,group,group,bootstrap,group,if,group,null,group,shutdown,gracefully,0l,10l,time,unit,seconds,server,address,null
AbstractServerBase -> public void start() throws Throwable;1509037054;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null,_				"Server " + serverName + " already running @ " + serverAddress + '.')___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			LOG.info("Started server {} @ {}.", serverName, serverAddress)__		} else {_			LOG.info("Unable to start server {}. All ports in provided range are occupied.", serverName)__			throw new FlinkRuntimeException("Unable to start server " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,server,server,name,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,server,server,name,server,address,else,log,info,unable,to,start,server,all,ports,in,provided,range,are,occupied,server,name,throw,new,flink,runtime,exception,unable,to,start,server,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> public void start() throws Throwable;1509981553;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null,_				"Server " + serverName + " already running @ " + serverAddress + '.')___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			LOG.info("Started server {} @ {}.", serverName, serverAddress)__		} else {_			LOG.info("Unable to start server {}. All ports in provided range are occupied.", serverName)__			throw new FlinkRuntimeException("Unable to start server " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,server,server,name,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,server,server,name,server,address,else,log,info,unable,to,start,server,all,ports,in,provided,range,are,occupied,server,name,throw,new,flink,runtime,exception,unable,to,start,server,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> public void start() throws Throwable;1510060074;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null,_				"The " + serverName + " already running @ " + serverAddress + '.')___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			LOG.info("Started the {} @ {}.", serverName, serverAddress)__		} else {_			LOG.info("Unable to start the {}. All ports in provided range are occupied.", serverName)__			throw new FlinkRuntimeException("Unable to start the " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,the,server,name,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,the,server,name,server,address,else,log,info,unable,to,start,the,all,ports,in,provided,range,are,occupied,server,name,throw,new,flink,runtime,exception,unable,to,start,the,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> public void start() throws Throwable;1510911969;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null,_				serverName + " is already running @ " + serverAddress + '.')___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			log.info("Started {} @ {}.", serverName, serverAddress)__		} else {_			log.info("Unable to start {}. All ports in provided range are occupied.", serverName)__			throw new FlinkRuntimeException("Unable to start " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,server,name,is,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,server,name,server,address,else,log,info,unable,to,start,all,ports,in,provided,range,are,occupied,server,name,throw,new,flink,runtime,exception,unable,to,start,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> public void start() throws Throwable;1512567202;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null && serverShutdownFuture.get() == null,_				serverName + " is already running @ " + serverAddress + ". ")___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			log.info("Started {} @ {}.", serverName, serverAddress)__		} else {_			log.info("Unable to start {}. All ports in provided range are occupied.", serverName)__			throw new FlinkRuntimeException("Unable to start " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,server,shutdown,future,get,null,server,name,is,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,server,name,server,address,else,log,info,unable,to,start,all,ports,in,provided,range,are,occupied,server,name,throw,new,flink,runtime,exception,unable,to,start,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> public void start() throws Throwable;1522337587;Starts the server by binding to the configured bind address (blocking)._@throws Exception If something goes wrong during the bind operation.;public void start() throws Throwable {_		Preconditions.checkState(serverAddress == null && serverShutdownFuture.get() == null,_				serverName + " is already running @ " + serverAddress + ". ")___		Iterator<Integer> portIterator = bindPortRange.iterator()__		while (portIterator.hasNext() && !attemptToBind(portIterator.next())) {}__		if (serverAddress != null) {_			log.info("Started {} @ {}.", serverName, serverAddress)__		} else {_			log.info("Unable to start {}. All ports in provided range ({}) are occupied.", serverName, bindPortRange)__			throw new FlinkRuntimeException("Unable to start " + serverName + ". All ports in provided range are occupied.")__		}_	};starts,the,server,by,binding,to,the,configured,bind,address,blocking,throws,exception,if,something,goes,wrong,during,the,bind,operation;public,void,start,throws,throwable,preconditions,check,state,server,address,null,server,shutdown,future,get,null,server,name,is,already,running,server,address,iterator,integer,port,iterator,bind,port,range,iterator,while,port,iterator,has,next,attempt,to,bind,port,iterator,next,if,server,address,null,log,info,started,server,name,server,address,else,log,info,unable,to,start,all,ports,in,provided,range,are,occupied,server,name,bind,port,range,throw,new,flink,runtime,exception,unable,to,start,server,name,all,ports,in,provided,range,are,occupied
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1509037054;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1509981553;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1510060074;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1510911969;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1512567202;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> ServerChannelInitializer -> ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler);1522337587;Creates the channel pipeline initializer with the shared request handler.__@param sharedRequestHandler Shared request handler.;ServerChannelInitializer(AbstractServerHandler<REQ, RESP> sharedRequestHandler) {_			this.sharedRequestHandler = Preconditions.checkNotNull(sharedRequestHandler, "MessageBody handler")__		};creates,the,channel,pipeline,initializer,with,the,shared,request,handler,param,shared,request,handler,shared,request,handler;server,channel,initializer,abstract,server,handler,req,resp,shared,request,handler,this,shared,request,handler,preconditions,check,not,null,shared,request,handler,message,body,handler
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1509037054;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1509981553;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1510060074;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1510911969;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1512567202;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> protected AbstractServerBase( 			final String serverName, 			final InetAddress bindAddress, 			final Iterator<Integer> bindPortIterator, 			final Integer numEventLoopThreads, 			final Integer numQueryThreads);1522337587;Creates the {@link AbstractServerBase}.__<p>The server needs to be started via {@link #start()}.__@param serverName the name of the server_@param bindAddress address to bind to_@param bindPortIterator port to bind to_@param numEventLoopThreads number of event loop threads;protected AbstractServerBase(_			final String serverName,_			final InetAddress bindAddress,_			final Iterator<Integer> bindPortIterator,_			final Integer numEventLoopThreads,_			final Integer numQueryThreads) {__		Preconditions.checkNotNull(bindPortIterator)__		Preconditions.checkArgument(numEventLoopThreads >= 1, "Non-positive number of event loop threads.")__		Preconditions.checkArgument(numQueryThreads >= 1, "Non-positive number of query threads.")___		this.serverName = Preconditions.checkNotNull(serverName)__		this.bindAddress = Preconditions.checkNotNull(bindAddress)__		this.numEventLoopThreads = numEventLoopThreads__		this.numQueryThreads = numQueryThreads___		this.bindPortRange = new HashSet<>()__		while (bindPortIterator.hasNext()) {_			int port = bindPortIterator.next()__			Preconditions.checkArgument(port >= 0 && port <= 65535,_					"Invalid port configuration. Port must be between 0 and 65535, but was " + port + ".")__			bindPortRange.add(port)__		}_	};creates,the,link,abstract,server,base,p,the,server,needs,to,be,started,via,link,start,param,server,name,the,name,of,the,server,param,bind,address,address,to,bind,to,param,bind,port,iterator,port,to,bind,to,param,num,event,loop,threads,number,of,event,loop,threads;protected,abstract,server,base,final,string,server,name,final,inet,address,bind,address,final,iterator,integer,bind,port,iterator,final,integer,num,event,loop,threads,final,integer,num,query,threads,preconditions,check,not,null,bind,port,iterator,preconditions,check,argument,num,event,loop,threads,1,non,positive,number,of,event,loop,threads,preconditions,check,argument,num,query,threads,1,non,positive,number,of,query,threads,this,server,name,preconditions,check,not,null,server,name,this,bind,address,preconditions,check,not,null,bind,address,this,num,event,loop,threads,num,event,loop,threads,this,num,query,threads,num,query,threads,this,bind,port,range,new,hash,set,while,bind,port,iterator,has,next,int,port,bind,port,iterator,next,preconditions,check,argument,port,0,port,65535,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,bind,port,range,add,port
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1509037054;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1509981553;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1510060074;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1510911969;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1512567202;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
AbstractServerBase -> public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;1522337587;Returns the {@link AbstractServerHandler handler} to be used for_serving the incoming requests.;public abstract AbstractServerHandler<REQ, RESP> initializeHandler()_;returns,the,link,abstract,server,handler,handler,to,be,used,for,serving,the,incoming,requests;public,abstract,abstract,server,handler,req,resp,initialize,handler
