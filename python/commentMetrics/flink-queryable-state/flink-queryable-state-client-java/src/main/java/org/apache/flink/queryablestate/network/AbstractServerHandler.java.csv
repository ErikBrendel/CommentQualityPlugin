# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractServerHandler -> public abstract CompletableFuture<Void> shutdown()_;1512567202;Shuts down any handler-specific resources, e.g. thread pools etc and returns_a {@link CompletableFuture}.__<p>If an exception is thrown during the shutdown process, then that exception_will be included in the returned future.__@return A {@link CompletableFuture} that will be completed when the shutdown_process actually finishes.;public abstract CompletableFuture<Void> shutdown()_;shuts,down,any,handler,specific,resources,e,g,thread,pools,etc,and,returns,a,link,completable,future,p,if,an,exception,is,thrown,during,the,shutdown,process,then,that,exception,will,be,included,in,the,returned,future,return,a,link,completable,future,that,will,be,completed,when,the,shutdown,process,actually,finishes;public,abstract,completable,future,void,shutdown
AbstractServerHandler -> public abstract CompletableFuture<Void> shutdown()_;1526574663;Shuts down any handler-specific resources, e.g. thread pools etc and returns_a {@link CompletableFuture}.__<p>If an exception is thrown during the shutdown process, then that exception_will be included in the returned future.__@return A {@link CompletableFuture} that will be completed when the shutdown_process actually finishes.;public abstract CompletableFuture<Void> shutdown()_;shuts,down,any,handler,specific,resources,e,g,thread,pools,etc,and,returns,a,link,completable,future,p,if,an,exception,is,thrown,during,the,shutdown,process,then,that,exception,will,be,included,in,the,returned,future,return,a,link,completable,future,that,will,be,completed,when,the,shutdown,process,actually,finishes;public,abstract,completable,future,void,shutdown
AbstractServerHandler -> public abstract CompletableFuture<Void> shutdown()_;1531303508;Shuts down any handler-specific resources, e.g. thread pools etc and returns_a {@link CompletableFuture}.__<p>If an exception is thrown during the shutdown process, then that exception_will be included in the returned future.__@return A {@link CompletableFuture} that will be completed when the shutdown_process actually finishes.;public abstract CompletableFuture<Void> shutdown()_;shuts,down,any,handler,specific,resources,e,g,thread,pools,etc,and,returns,a,link,completable,future,p,if,an,exception,is,thrown,during,the,shutdown,process,then,that,exception,will,be,included,in,the,returned,future,return,a,link,completable,future,that,will,be,completed,when,the,shutdown,process,actually,finishes;public,abstract,completable,future,void,shutdown
AbstractServerHandler -> public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;1509037054;Handles an incoming request and returns a {@link CompletableFuture} containing the corresponding response.__<p><b>NOTE:</b> This method is called by multiple threads.__@param requestId the id of the received request to be handled._@param request the request to be handled._@return A future with the response to be forwarded to the client.;public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;handles,an,incoming,request,and,returns,a,link,completable,future,containing,the,corresponding,response,p,b,note,b,this,method,is,called,by,multiple,threads,param,request,id,the,id,of,the,received,request,to,be,handled,param,request,the,request,to,be,handled,return,a,future,with,the,response,to,be,forwarded,to,the,client;public,abstract,completable,future,resp,handle,request,final,long,request,id,final,req,request
AbstractServerHandler -> public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;1510910970;Handles an incoming request and returns a {@link CompletableFuture} containing the corresponding response.__<p><b>NOTE:</b> This method is called by multiple threads.__@param requestId the id of the received request to be handled._@param request the request to be handled._@return A future with the response to be forwarded to the client.;public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;handles,an,incoming,request,and,returns,a,link,completable,future,containing,the,corresponding,response,p,b,note,b,this,method,is,called,by,multiple,threads,param,request,id,the,id,of,the,received,request,to,be,handled,param,request,the,request,to,be,handled,return,a,future,with,the,response,to,be,forwarded,to,the,client;public,abstract,completable,future,resp,handle,request,final,long,request,id,final,req,request
AbstractServerHandler -> public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;1512567202;Handles an incoming request and returns a {@link CompletableFuture} containing the corresponding response.__<p><b>NOTE:</b> This method is called by multiple threads.__@param requestId the id of the received request to be handled._@param request the request to be handled._@return A future with the response to be forwarded to the client.;public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;handles,an,incoming,request,and,returns,a,link,completable,future,containing,the,corresponding,response,p,b,note,b,this,method,is,called,by,multiple,threads,param,request,id,the,id,of,the,received,request,to,be,handled,param,request,the,request,to,be,handled,return,a,future,with,the,response,to,be,forwarded,to,the,client;public,abstract,completable,future,resp,handle,request,final,long,request,id,final,req,request
AbstractServerHandler -> public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;1526574663;Handles an incoming request and returns a {@link CompletableFuture} containing the corresponding response.__<p><b>NOTE:</b> This method is called by multiple threads.__@param requestId the id of the received request to be handled._@param request the request to be handled._@return A future with the response to be forwarded to the client.;public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;handles,an,incoming,request,and,returns,a,link,completable,future,containing,the,corresponding,response,p,b,note,b,this,method,is,called,by,multiple,threads,param,request,id,the,id,of,the,received,request,to,be,handled,param,request,the,request,to,be,handled,return,a,future,with,the,response,to,be,forwarded,to,the,client;public,abstract,completable,future,resp,handle,request,final,long,request,id,final,req,request
AbstractServerHandler -> public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;1531303508;Handles an incoming request and returns a {@link CompletableFuture} containing the corresponding response.__<p><b>NOTE:</b> This method is called by multiple threads.__@param requestId the id of the received request to be handled._@param request the request to be handled._@return A future with the response to be forwarded to the client.;public abstract CompletableFuture<RESP> handleRequest(final long requestId, final REQ request)_;handles,an,incoming,request,and,returns,a,link,completable,future,containing,the,corresponding,response,p,b,note,b,this,method,is,called,by,multiple,threads,param,request,id,the,id,of,the,received,request,to,be,handled,param,request,the,request,to,be,handled,return,a,future,with,the,response,to,be,forwarded,to,the,client;public,abstract,completable,future,resp,handle,request,final,long,request,id,final,req,request
AbstractServerHandler -> public abstract void shutdown()_;1509037054;Shuts down any handler specific resources, e.g. thread pools etc.;public abstract void shutdown()_;shuts,down,any,handler,specific,resources,e,g,thread,pools,etc;public,abstract,void,shutdown
AbstractServerHandler -> public abstract void shutdown()_;1510910970;Shuts down any handler specific resources, e.g. thread pools etc.;public abstract void shutdown()_;shuts,down,any,handler,specific,resources,e,g,thread,pools,etc;public,abstract,void,shutdown
AbstractServerHandler -> public AbstractServerHandler( 			final AbstractServerBase<REQ, RESP> server, 			final MessageSerializer<REQ, RESP> serializer, 			final KvStateRequestStats stats);1509037054;Create the handler.__@param serializer the serializer used to (de-)serialize messages_@param stats statistics collector;public AbstractServerHandler(_			final AbstractServerBase<REQ, RESP> server,_			final MessageSerializer<REQ, RESP> serializer,_			final KvStateRequestStats stats) {__		this.server = Preconditions.checkNotNull(server)__		this.serializer = Preconditions.checkNotNull(serializer)__		this.queryExecutor = server.getQueryExecutor()__		this.stats = Preconditions.checkNotNull(stats)__	};create,the,handler,param,serializer,the,serializer,used,to,de,serialize,messages,param,stats,statistics,collector;public,abstract,server,handler,final,abstract,server,base,req,resp,server,final,message,serializer,req,resp,serializer,final,kv,state,request,stats,stats,this,server,preconditions,check,not,null,server,this,serializer,preconditions,check,not,null,serializer,this,query,executor,server,get,query,executor,this,stats,preconditions,check,not,null,stats
AbstractServerHandler -> public AbstractServerHandler( 			final AbstractServerBase<REQ, RESP> server, 			final MessageSerializer<REQ, RESP> serializer, 			final KvStateRequestStats stats);1510910970;Create the handler.__@param serializer the serializer used to (de-)serialize messages_@param stats statistics collector;public AbstractServerHandler(_			final AbstractServerBase<REQ, RESP> server,_			final MessageSerializer<REQ, RESP> serializer,_			final KvStateRequestStats stats) {__		this.server = Preconditions.checkNotNull(server)__		this.serializer = Preconditions.checkNotNull(serializer)__		this.queryExecutor = server.getQueryExecutor()__		this.stats = Preconditions.checkNotNull(stats)__	};create,the,handler,param,serializer,the,serializer,used,to,de,serialize,messages,param,stats,statistics,collector;public,abstract,server,handler,final,abstract,server,base,req,resp,server,final,message,serializer,req,resp,serializer,final,kv,state,request,stats,stats,this,server,preconditions,check,not,null,server,this,serializer,preconditions,check,not,null,serializer,this,query,executor,server,get,query,executor,this,stats,preconditions,check,not,null,stats
AbstractServerHandler -> public AbstractServerHandler( 			final AbstractServerBase<REQ, RESP> server, 			final MessageSerializer<REQ, RESP> serializer, 			final KvStateRequestStats stats);1512567202;Create the handler.__@param serializer the serializer used to (de-)serialize messages_@param stats statistics collector;public AbstractServerHandler(_			final AbstractServerBase<REQ, RESP> server,_			final MessageSerializer<REQ, RESP> serializer,_			final KvStateRequestStats stats) {__		this.server = Preconditions.checkNotNull(server)__		this.serializer = Preconditions.checkNotNull(serializer)__		this.queryExecutor = server.getQueryExecutor()__		this.stats = Preconditions.checkNotNull(stats)__	};create,the,handler,param,serializer,the,serializer,used,to,de,serialize,messages,param,stats,statistics,collector;public,abstract,server,handler,final,abstract,server,base,req,resp,server,final,message,serializer,req,resp,serializer,final,kv,state,request,stats,stats,this,server,preconditions,check,not,null,server,this,serializer,preconditions,check,not,null,serializer,this,query,executor,server,get,query,executor,this,stats,preconditions,check,not,null,stats
AbstractServerHandler -> public AbstractServerHandler( 			final AbstractServerBase<REQ, RESP> server, 			final MessageSerializer<REQ, RESP> serializer, 			final KvStateRequestStats stats);1526574663;Create the handler.__@param serializer the serializer used to (de-)serialize messages_@param stats statistics collector;public AbstractServerHandler(_			final AbstractServerBase<REQ, RESP> server,_			final MessageSerializer<REQ, RESP> serializer,_			final KvStateRequestStats stats) {__		this.server = Preconditions.checkNotNull(server)__		this.serializer = Preconditions.checkNotNull(serializer)__		this.queryExecutor = server.getQueryExecutor()__		this.stats = Preconditions.checkNotNull(stats)__	};create,the,handler,param,serializer,the,serializer,used,to,de,serialize,messages,param,stats,statistics,collector;public,abstract,server,handler,final,abstract,server,base,req,resp,server,final,message,serializer,req,resp,serializer,final,kv,state,request,stats,stats,this,server,preconditions,check,not,null,server,this,serializer,preconditions,check,not,null,serializer,this,query,executor,server,get,query,executor,this,stats,preconditions,check,not,null,stats
AbstractServerHandler -> public AbstractServerHandler( 			final AbstractServerBase<REQ, RESP> server, 			final MessageSerializer<REQ, RESP> serializer, 			final KvStateRequestStats stats);1531303508;Create the handler.__@param serializer the serializer used to (de-)serialize messages_@param stats statistics collector;public AbstractServerHandler(_			final AbstractServerBase<REQ, RESP> server,_			final MessageSerializer<REQ, RESP> serializer,_			final KvStateRequestStats stats) {__		this.server = Preconditions.checkNotNull(server)__		this.serializer = Preconditions.checkNotNull(serializer)__		this.queryExecutor = server.getQueryExecutor()__		this.stats = Preconditions.checkNotNull(stats)__	};create,the,handler,param,serializer,the,serializer,used,to,de,serialize,messages,param,stats,statistics,collector;public,abstract,server,handler,final,abstract,server,base,req,resp,server,final,message,serializer,req,resp,serializer,final,kv,state,request,stats,stats,this,server,preconditions,check,not,null,server,this,serializer,preconditions,check,not,null,serializer,this,query,executor,server,get,query,executor,this,stats,preconditions,check,not,null,stats
