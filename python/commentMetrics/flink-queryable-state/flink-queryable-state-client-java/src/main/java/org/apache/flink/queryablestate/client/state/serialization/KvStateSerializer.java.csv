# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateSerializer -> public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1509037054;Deserializes the value with the given serializer.__@param serializedValue Serialized value of type T_@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized value or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue == null) {_			return null__		} else {_			final DataInputDeserializer deser = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)__			final T value = serializer.deserialize(deser)__			if (deser.available() > 0) {_				throw new IOException(_					"Unconsumed bytes in the deserialized value. " +_						"This indicates a mismatch in the value serializers " +_						"used by the KvState instance and this access.")__			}_			return value__		}_	};deserializes,the,value,with,the,given,serializer,param,serialized,value,serialized,value,of,type,t,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,value,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,t,deserialize,value,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,return,null,else,final,data,input,deserializer,deser,new,data,input,deserializer,serialized,value,0,serialized,value,length,final,t,value,serializer,deserialize,deser,if,deser,available,0,throw,new,ioexception,unconsumed,bytes,in,the,deserialized,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,return,value
KvStateSerializer -> public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1509646806;Deserializes the value with the given serializer.__@param serializedValue Serialized value of type T_@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized value or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue == null) {_			return null__		} else {_			final DataInputDeserializer deser = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)__			final T value = serializer.deserialize(deser)__			if (deser.available() > 0) {_				throw new IOException(_					"Unconsumed bytes in the deserialized value. " +_						"This indicates a mismatch in the value serializers " +_						"used by the KvState instance and this access.")__			}_			return value__		}_	};deserializes,the,value,with,the,given,serializer,param,serialized,value,serialized,value,of,type,t,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,value,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,t,deserialize,value,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,return,null,else,final,data,input,deserializer,deser,new,data,input,deserializer,serialized,value,0,serialized,value,length,final,t,value,serializer,deserialize,deser,if,deser,available,0,throw,new,ioexception,unconsumed,bytes,in,the,deserialized,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,return,value
KvStateSerializer -> public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1549554847;Deserializes the value with the given serializer.__@param serializedValue Serialized value of type T_@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized value or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> T deserializeValue(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue == null) {_			return null__		} else {_			final DataInputDeserializer deser = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)__			final T value = serializer.deserialize(deser)__			if (deser.available() > 0) {_				throw new IOException(_					"Unconsumed bytes in the deserialized value. " +_						"This indicates a mismatch in the value serializers " +_						"used by the KvState instance and this access.")__			}_			return value__		}_	};deserializes,the,value,with,the,given,serializer,param,serialized,value,serialized,value,of,type,t,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,value,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,t,deserialize,value,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,return,null,else,final,data,input,deserializer,deser,new,data,input,deserializer,serialized,value,0,serialized,value,length,final,t,value,serializer,deserialize,deser,if,deser,available,0,throw,new,ioexception,unconsumed,bytes,in,the,deserialized,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,return,value
KvStateSerializer -> public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1509037054;Deserializes all values with the given serializer.__@param serializedValue Serialized value of type List&lt_T&gt__@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized list or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue != null) {_			final DataInputDeserializer in = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)___			try {_				final List<T> result = new ArrayList<>()__				while (in.available() > 0) {_					result.add(serializer.deserialize(in))___					_					_					_					_					_					_					if (in.available() > 0) {_						in.readByte()__					}_				}__				return result__			} catch (IOException e) {_				throw new IOException(_						"Unable to deserialize value. " +_							"This indicates a mismatch in the value serializers " +_							"used by the KvState instance and this access.", e)__			}_		} else {_			return null__		}_	};deserializes,all,values,with,the,given,serializer,param,serialized,value,serialized,value,of,type,list,lt,t,gt,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,list,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,list,t,deserialize,list,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,final,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,try,final,list,t,result,new,array,list,while,in,available,0,result,add,serializer,deserialize,in,if,in,available,0,in,read,byte,return,result,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,e,else,return,null
KvStateSerializer -> public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1509646806;Deserializes all values with the given serializer.__@param serializedValue Serialized value of type List&lt_T&gt__@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized list or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue != null) {_			final DataInputDeserializer in = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)___			try {_				final List<T> result = new ArrayList<>()__				while (in.available() > 0) {_					result.add(serializer.deserialize(in))___					_					_					_					_					_					_					if (in.available() > 0) {_						in.readByte()__					}_				}__				return result__			} catch (IOException e) {_				throw new IOException(_						"Unable to deserialize value. " +_							"This indicates a mismatch in the value serializers " +_							"used by the KvState instance and this access.", e)__			}_		} else {_			return null__		}_	};deserializes,all,values,with,the,given,serializer,param,serialized,value,serialized,value,of,type,list,lt,t,gt,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,list,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,list,t,deserialize,list,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,final,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,try,final,list,t,result,new,array,list,while,in,available,0,result,add,serializer,deserialize,in,if,in,available,0,in,read,byte,return,result,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,e,else,return,null
KvStateSerializer -> public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException;1549554847;Deserializes all values with the given serializer.__@param serializedValue Serialized value of type List&lt_T&gt__@param serializer      Serializer for T_@param <T>             Type of the value_@return Deserialized list or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <T> List<T> deserializeList(byte[] serializedValue, TypeSerializer<T> serializer) throws IOException {_		if (serializedValue != null) {_			final DataInputDeserializer in = new DataInputDeserializer(_				serializedValue, 0, serializedValue.length)___			try {_				final List<T> result = new ArrayList<>()__				while (in.available() > 0) {_					result.add(serializer.deserialize(in))___					_					_					_					_					_					_					if (in.available() > 0) {_						in.readByte()__					}_				}__				return result__			} catch (IOException e) {_				throw new IOException(_						"Unable to deserialize value. " +_							"This indicates a mismatch in the value serializers " +_							"used by the KvState instance and this access.", e)__			}_		} else {_			return null__		}_	};deserializes,all,values,with,the,given,serializer,param,serialized,value,serialized,value,of,type,list,lt,t,gt,param,serializer,serializer,for,t,param,t,type,of,the,value,return,deserialized,list,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,t,list,t,deserialize,list,byte,serialized,value,type,serializer,t,serializer,throws,ioexception,if,serialized,value,null,final,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,try,final,list,t,result,new,array,list,while,in,available,0,result,add,serializer,deserialize,in,if,in,available,0,in,read,byte,return,result,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,value,this,indicates,a,mismatch,in,the,value,serializers,used,by,the,kv,state,instance,and,this,access,e,else,return,null
KvStateSerializer -> public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1509037054;Serializes all values of the Iterable with the given serializer.__@param entries         Key-value pairs to serialize_@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the keys_@param <UV>            Type of the values_@return Serialized values or <code>null</code> if values <code>null</code> or empty_@throws IOException On failure during serialization;public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (entries != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)___			for (Map.Entry<UK, UV> entry : entries) {_				keySerializer.serialize(entry.getKey(), dos)___				if (entry.getValue() == null) {_					dos.writeBoolean(true)__				} else {_					dos.writeBoolean(false)__					valueSerializer.serialize(entry.getValue(), dos)__				}_			}__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,all,values,of,the,iterable,with,the,given,serializer,param,entries,key,value,pairs,to,serialize,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,keys,param,uv,type,of,the,values,return,serialized,values,or,code,null,code,if,values,code,null,code,or,empty,throws,ioexception,on,failure,during,serialization;public,static,uk,uv,byte,serialize,map,iterable,map,entry,uk,uv,entries,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,entries,null,data,output,serializer,dos,new,data,output,serializer,32,for,map,entry,uk,uv,entry,entries,key,serializer,serialize,entry,get,key,dos,if,entry,get,value,null,dos,write,boolean,true,else,dos,write,boolean,false,value,serializer,serialize,entry,get,value,dos,return,dos,get,copy,of,buffer,else,return,null
KvStateSerializer -> public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1509646806;Serializes all values of the Iterable with the given serializer.__@param entries         Key-value pairs to serialize_@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the keys_@param <UV>            Type of the values_@return Serialized values or <code>null</code> if values <code>null</code> or empty_@throws IOException On failure during serialization;public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (entries != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)___			for (Map.Entry<UK, UV> entry : entries) {_				keySerializer.serialize(entry.getKey(), dos)___				if (entry.getValue() == null) {_					dos.writeBoolean(true)__				} else {_					dos.writeBoolean(false)__					valueSerializer.serialize(entry.getValue(), dos)__				}_			}__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,all,values,of,the,iterable,with,the,given,serializer,param,entries,key,value,pairs,to,serialize,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,keys,param,uv,type,of,the,values,return,serialized,values,or,code,null,code,if,values,code,null,code,or,empty,throws,ioexception,on,failure,during,serialization;public,static,uk,uv,byte,serialize,map,iterable,map,entry,uk,uv,entries,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,entries,null,data,output,serializer,dos,new,data,output,serializer,32,for,map,entry,uk,uv,entry,entries,key,serializer,serialize,entry,get,key,dos,if,entry,get,value,null,dos,write,boolean,true,else,dos,write,boolean,false,value,serializer,serialize,entry,get,value,dos,return,dos,get,copy,of,buffer,else,return,null
KvStateSerializer -> public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1549554847;Serializes all values of the Iterable with the given serializer.__@param entries         Key-value pairs to serialize_@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the keys_@param <UV>            Type of the values_@return Serialized values or <code>null</code> if values <code>null</code> or empty_@throws IOException On failure during serialization;public static <UK, UV> byte[] serializeMap(Iterable<Map.Entry<UK, UV>> entries, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (entries != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)___			for (Map.Entry<UK, UV> entry : entries) {_				keySerializer.serialize(entry.getKey(), dos)___				if (entry.getValue() == null) {_					dos.writeBoolean(true)__				} else {_					dos.writeBoolean(false)__					valueSerializer.serialize(entry.getValue(), dos)__				}_			}__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,all,values,of,the,iterable,with,the,given,serializer,param,entries,key,value,pairs,to,serialize,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,keys,param,uv,type,of,the,values,return,serialized,values,or,code,null,code,if,values,code,null,code,or,empty,throws,ioexception,on,failure,during,serialization;public,static,uk,uv,byte,serialize,map,iterable,map,entry,uk,uv,entries,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,entries,null,data,output,serializer,dos,new,data,output,serializer,32,for,map,entry,uk,uv,entry,entries,key,serializer,serialize,entry,get,key,dos,if,entry,get,value,null,dos,write,boolean,true,else,dos,write,boolean,false,value,serializer,serialize,entry,get,value,dos,return,dos,get,copy,of,buffer,else,return,null
KvStateSerializer -> public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1509037054;Deserializes all kv pairs with the given serializer.__@param serializedValue Serialized value of type Map&lt_UK, UV&gt__@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the key_@param <UV>            Type of the value._@return Deserialized map or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (serializedValue != null) {_			DataInputDeserializer in = new DataInputDeserializer(serializedValue, 0, serializedValue.length)___			Map<UK, UV> result = new HashMap<>()__			while (in.available() > 0) {_				UK key = keySerializer.deserialize(in)___				boolean isNull = in.readBoolean()__				UV value = isNull ? null : valueSerializer.deserialize(in)___				result.put(key, value)__			}__			return result__		} else {_			return null__		}_	};deserializes,all,kv,pairs,with,the,given,serializer,param,serialized,value,serialized,value,of,type,map,lt,uk,uv,gt,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,key,param,uv,type,of,the,value,return,deserialized,map,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,uk,uv,map,uk,uv,deserialize,map,byte,serialized,value,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,serialized,value,null,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,map,uk,uv,result,new,hash,map,while,in,available,0,uk,key,key,serializer,deserialize,in,boolean,is,null,in,read,boolean,uv,value,is,null,null,value,serializer,deserialize,in,result,put,key,value,return,result,else,return,null
KvStateSerializer -> public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1509646806;Deserializes all kv pairs with the given serializer.__@param serializedValue Serialized value of type Map&lt_UK, UV&gt__@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the key_@param <UV>            Type of the value._@return Deserialized map or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (serializedValue != null) {_			DataInputDeserializer in = new DataInputDeserializer(serializedValue, 0, serializedValue.length)___			Map<UK, UV> result = new HashMap<>()__			while (in.available() > 0) {_				UK key = keySerializer.deserialize(in)___				boolean isNull = in.readBoolean()__				UV value = isNull ? null : valueSerializer.deserialize(in)___				result.put(key, value)__			}__			return result__		} else {_			return null__		}_	};deserializes,all,kv,pairs,with,the,given,serializer,param,serialized,value,serialized,value,of,type,map,lt,uk,uv,gt,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,key,param,uv,type,of,the,value,return,deserialized,map,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,uk,uv,map,uk,uv,deserialize,map,byte,serialized,value,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,serialized,value,null,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,map,uk,uv,result,new,hash,map,while,in,available,0,uk,key,key,serializer,deserialize,in,boolean,is,null,in,read,boolean,uv,value,is,null,null,value,serializer,deserialize,in,result,put,key,value,return,result,else,return,null
KvStateSerializer -> public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException;1549554847;Deserializes all kv pairs with the given serializer.__@param serializedValue Serialized value of type Map&lt_UK, UV&gt__@param keySerializer   Serializer for UK_@param valueSerializer Serializer for UV_@param <UK>            Type of the key_@param <UV>            Type of the value._@return Deserialized map or <code>null</code> if the serialized value_is <code>null</code>_@throws IOException On failure during deserialization;public static <UK, UV> Map<UK, UV> deserializeMap(byte[] serializedValue, TypeSerializer<UK> keySerializer, TypeSerializer<UV> valueSerializer) throws IOException {_		if (serializedValue != null) {_			DataInputDeserializer in = new DataInputDeserializer(serializedValue, 0, serializedValue.length)___			Map<UK, UV> result = new HashMap<>()__			while (in.available() > 0) {_				UK key = keySerializer.deserialize(in)___				boolean isNull = in.readBoolean()__				UV value = isNull ? null : valueSerializer.deserialize(in)___				result.put(key, value)__			}__			return result__		} else {_			return null__		}_	};deserializes,all,kv,pairs,with,the,given,serializer,param,serialized,value,serialized,value,of,type,map,lt,uk,uv,gt,param,key,serializer,serializer,for,uk,param,value,serializer,serializer,for,uv,param,uk,type,of,the,key,param,uv,type,of,the,value,return,deserialized,map,or,code,null,code,if,the,serialized,value,is,code,null,code,throws,ioexception,on,failure,during,deserialization;public,static,uk,uv,map,uk,uv,deserialize,map,byte,serialized,value,type,serializer,uk,key,serializer,type,serializer,uv,value,serializer,throws,ioexception,if,serialized,value,null,data,input,deserializer,in,new,data,input,deserializer,serialized,value,0,serialized,value,length,map,uk,uv,result,new,hash,map,while,in,available,0,uk,key,key,serializer,deserialize,in,boolean,is,null,in,read,boolean,uv,value,is,null,null,value,serializer,deserialize,in,result,put,key,value,return,result,else,return,null
KvStateSerializer -> public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace( 			byte[] serializedKeyAndNamespace, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer) throws IOException;1509037054;Deserializes the key and namespace into a {@link Tuple2}.__@param serializedKeyAndNamespace Serialized key and namespace_@param keySerializer             Serializer for the key_@param namespaceSerializer       Serializer for the namespace_@param <K>                       Key type_@param <N>                       Namespace_@return Tuple2 holding deserialized key and namespace_@throws IOException              if the deserialization fails for any reason;public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace(_			byte[] serializedKeyAndNamespace,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataInputDeserializer dis = new DataInputDeserializer(_				serializedKeyAndNamespace,_				0,_				serializedKeyAndNamespace.length)___		try {_			K key = keySerializer.deserialize(dis)__			byte magicNumber = dis.readByte()__			if (magicNumber != 42) {_				throw new IOException("Unexpected magic number " + magicNumber + ".")__			}_			N namespace = namespaceSerializer.deserialize(dis)___			if (dis.available() > 0) {_				throw new IOException("Unconsumed bytes in the serialized key and namespace.")__			}__			return new Tuple2<>(key, namespace)__		} catch (IOException e) {_			throw new IOException("Unable to deserialize key " +_				"and namespace. This indicates a mismatch in the key/namespace " +_				"serializers used by the KvState instance and this access.", e)__		}_	};deserializes,the,key,and,namespace,into,a,link,tuple2,param,serialized,key,and,namespace,serialized,key,and,namespace,param,key,serializer,serializer,for,the,key,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,return,tuple2,holding,deserialized,key,and,namespace,throws,ioexception,if,the,deserialization,fails,for,any,reason;public,static,k,n,tuple2,k,n,deserialize,key,and,namespace,byte,serialized,key,and,namespace,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,throws,ioexception,data,input,deserializer,dis,new,data,input,deserializer,serialized,key,and,namespace,0,serialized,key,and,namespace,length,try,k,key,key,serializer,deserialize,dis,byte,magic,number,dis,read,byte,if,magic,number,42,throw,new,ioexception,unexpected,magic,number,magic,number,n,namespace,namespace,serializer,deserialize,dis,if,dis,available,0,throw,new,ioexception,unconsumed,bytes,in,the,serialized,key,and,namespace,return,new,tuple2,key,namespace,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,key,and,namespace,this,indicates,a,mismatch,in,the,key,namespace,serializers,used,by,the,kv,state,instance,and,this,access,e
KvStateSerializer -> public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace( 			byte[] serializedKeyAndNamespace, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer) throws IOException;1509646806;Deserializes the key and namespace into a {@link Tuple2}.__@param serializedKeyAndNamespace Serialized key and namespace_@param keySerializer             Serializer for the key_@param namespaceSerializer       Serializer for the namespace_@param <K>                       Key type_@param <N>                       Namespace_@return Tuple2 holding deserialized key and namespace_@throws IOException              if the deserialization fails for any reason;public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace(_			byte[] serializedKeyAndNamespace,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataInputDeserializer dis = new DataInputDeserializer(_				serializedKeyAndNamespace,_				0,_				serializedKeyAndNamespace.length)___		try {_			K key = keySerializer.deserialize(dis)__			byte magicNumber = dis.readByte()__			if (magicNumber != 42) {_				throw new IOException("Unexpected magic number " + magicNumber + ".")__			}_			N namespace = namespaceSerializer.deserialize(dis)___			if (dis.available() > 0) {_				throw new IOException("Unconsumed bytes in the serialized key and namespace.")__			}__			return new Tuple2<>(key, namespace)__		} catch (IOException e) {_			throw new IOException("Unable to deserialize key " +_				"and namespace. This indicates a mismatch in the key/namespace " +_				"serializers used by the KvState instance and this access.", e)__		}_	};deserializes,the,key,and,namespace,into,a,link,tuple2,param,serialized,key,and,namespace,serialized,key,and,namespace,param,key,serializer,serializer,for,the,key,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,return,tuple2,holding,deserialized,key,and,namespace,throws,ioexception,if,the,deserialization,fails,for,any,reason;public,static,k,n,tuple2,k,n,deserialize,key,and,namespace,byte,serialized,key,and,namespace,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,throws,ioexception,data,input,deserializer,dis,new,data,input,deserializer,serialized,key,and,namespace,0,serialized,key,and,namespace,length,try,k,key,key,serializer,deserialize,dis,byte,magic,number,dis,read,byte,if,magic,number,42,throw,new,ioexception,unexpected,magic,number,magic,number,n,namespace,namespace,serializer,deserialize,dis,if,dis,available,0,throw,new,ioexception,unconsumed,bytes,in,the,serialized,key,and,namespace,return,new,tuple2,key,namespace,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,key,and,namespace,this,indicates,a,mismatch,in,the,key,namespace,serializers,used,by,the,kv,state,instance,and,this,access,e
KvStateSerializer -> public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace( 			byte[] serializedKeyAndNamespace, 			TypeSerializer<K> keySerializer, 			TypeSerializer<N> namespaceSerializer) throws IOException;1549554847;Deserializes the key and namespace into a {@link Tuple2}.__@param serializedKeyAndNamespace Serialized key and namespace_@param keySerializer             Serializer for the key_@param namespaceSerializer       Serializer for the namespace_@param <K>                       Key type_@param <N>                       Namespace_@return Tuple2 holding deserialized key and namespace_@throws IOException              if the deserialization fails for any reason;public static <K, N> Tuple2<K, N> deserializeKeyAndNamespace(_			byte[] serializedKeyAndNamespace,_			TypeSerializer<K> keySerializer,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataInputDeserializer dis = new DataInputDeserializer(_				serializedKeyAndNamespace,_				0,_				serializedKeyAndNamespace.length)___		try {_			K key = keySerializer.deserialize(dis)__			byte magicNumber = dis.readByte()__			if (magicNumber != MAGIC_NUMBER) {_				throw new IOException("Unexpected magic number " + magicNumber + ".")__			}_			N namespace = namespaceSerializer.deserialize(dis)___			if (dis.available() > 0) {_				throw new IOException("Unconsumed bytes in the serialized key and namespace.")__			}__			return new Tuple2<>(key, namespace)__		} catch (IOException e) {_			throw new IOException("Unable to deserialize key " +_				"and namespace. This indicates a mismatch in the key/namespace " +_				"serializers used by the KvState instance and this access.", e)__		}_	};deserializes,the,key,and,namespace,into,a,link,tuple2,param,serialized,key,and,namespace,serialized,key,and,namespace,param,key,serializer,serializer,for,the,key,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,return,tuple2,holding,deserialized,key,and,namespace,throws,ioexception,if,the,deserialization,fails,for,any,reason;public,static,k,n,tuple2,k,n,deserialize,key,and,namespace,byte,serialized,key,and,namespace,type,serializer,k,key,serializer,type,serializer,n,namespace,serializer,throws,ioexception,data,input,deserializer,dis,new,data,input,deserializer,serialized,key,and,namespace,0,serialized,key,and,namespace,length,try,k,key,key,serializer,deserialize,dis,byte,magic,number,dis,read,byte,if,magic,number,throw,new,ioexception,unexpected,magic,number,magic,number,n,namespace,namespace,serializer,deserialize,dis,if,dis,available,0,throw,new,ioexception,unconsumed,bytes,in,the,serialized,key,and,namespace,return,new,tuple2,key,namespace,catch,ioexception,e,throw,new,ioexception,unable,to,deserialize,key,and,namespace,this,indicates,a,mismatch,in,the,key,namespace,serializers,used,by,the,kv,state,instance,and,this,access,e
KvStateSerializer -> public static <K, N> byte[] serializeKeyAndNamespace( 			K key, 			TypeSerializer<K> keySerializer, 			N namespace, 			TypeSerializer<N> namespaceSerializer) throws IOException;1509037054;Serializes the key and namespace into a {@link ByteBuffer}.__<p>The serialized format matches the RocksDB state backend key format, i.e._the key and namespace don't have to be deserialized for RocksDB lookups.__@param key                 Key to serialize_@param keySerializer       Serializer for the key_@param namespace           Namespace to serialize_@param namespaceSerializer Serializer for the namespace_@param <K>                 Key type_@param <N>                 Namespace type_@return Buffer holding the serialized key and namespace_@throws IOException Serialization errors are forwarded;public static <K, N> byte[] serializeKeyAndNamespace(_			K key,_			TypeSerializer<K> keySerializer,_			N namespace,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataOutputSerializer dos = new DataOutputSerializer(32)___		keySerializer.serialize(key, dos)__		dos.writeByte(42)__		namespaceSerializer.serialize(namespace, dos)___		return dos.getCopyOfBuffer()__	};serializes,the,key,and,namespace,into,a,link,byte,buffer,p,the,serialized,format,matches,the,rocks,db,state,backend,key,format,i,e,the,key,and,namespace,don,t,have,to,be,deserialized,for,rocks,db,lookups,param,key,key,to,serialize,param,key,serializer,serializer,for,the,key,param,namespace,namespace,to,serialize,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,type,return,buffer,holding,the,serialized,key,and,namespace,throws,ioexception,serialization,errors,are,forwarded;public,static,k,n,byte,serialize,key,and,namespace,k,key,type,serializer,k,key,serializer,n,namespace,type,serializer,n,namespace,serializer,throws,ioexception,data,output,serializer,dos,new,data,output,serializer,32,key,serializer,serialize,key,dos,dos,write,byte,42,namespace,serializer,serialize,namespace,dos,return,dos,get,copy,of,buffer
KvStateSerializer -> public static <K, N> byte[] serializeKeyAndNamespace( 			K key, 			TypeSerializer<K> keySerializer, 			N namespace, 			TypeSerializer<N> namespaceSerializer) throws IOException;1509646806;Serializes the key and namespace into a {@link ByteBuffer}.__<p>The serialized format matches the RocksDB state backend key format, i.e._the key and namespace don't have to be deserialized for RocksDB lookups.__@param key                 Key to serialize_@param keySerializer       Serializer for the key_@param namespace           Namespace to serialize_@param namespaceSerializer Serializer for the namespace_@param <K>                 Key type_@param <N>                 Namespace type_@return Buffer holding the serialized key and namespace_@throws IOException Serialization errors are forwarded;public static <K, N> byte[] serializeKeyAndNamespace(_			K key,_			TypeSerializer<K> keySerializer,_			N namespace,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataOutputSerializer dos = new DataOutputSerializer(32)___		keySerializer.serialize(key, dos)__		dos.writeByte(42)__		namespaceSerializer.serialize(namespace, dos)___		return dos.getCopyOfBuffer()__	};serializes,the,key,and,namespace,into,a,link,byte,buffer,p,the,serialized,format,matches,the,rocks,db,state,backend,key,format,i,e,the,key,and,namespace,don,t,have,to,be,deserialized,for,rocks,db,lookups,param,key,key,to,serialize,param,key,serializer,serializer,for,the,key,param,namespace,namespace,to,serialize,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,type,return,buffer,holding,the,serialized,key,and,namespace,throws,ioexception,serialization,errors,are,forwarded;public,static,k,n,byte,serialize,key,and,namespace,k,key,type,serializer,k,key,serializer,n,namespace,type,serializer,n,namespace,serializer,throws,ioexception,data,output,serializer,dos,new,data,output,serializer,32,key,serializer,serialize,key,dos,dos,write,byte,42,namespace,serializer,serialize,namespace,dos,return,dos,get,copy,of,buffer
KvStateSerializer -> public static <K, N> byte[] serializeKeyAndNamespace( 			K key, 			TypeSerializer<K> keySerializer, 			N namespace, 			TypeSerializer<N> namespaceSerializer) throws IOException;1549554847;Serializes the key and namespace into a {@link ByteBuffer}.__<p>The serialized format matches the RocksDB state backend key format, i.e._the key and namespace don't have to be deserialized for RocksDB lookups.__@param key                 Key to serialize_@param keySerializer       Serializer for the key_@param namespace           Namespace to serialize_@param namespaceSerializer Serializer for the namespace_@param <K>                 Key type_@param <N>                 Namespace type_@return Buffer holding the serialized key and namespace_@throws IOException Serialization errors are forwarded;public static <K, N> byte[] serializeKeyAndNamespace(_			K key,_			TypeSerializer<K> keySerializer,_			N namespace,_			TypeSerializer<N> namespaceSerializer) throws IOException {__		DataOutputSerializer dos = new DataOutputSerializer(32)___		keySerializer.serialize(key, dos)__		dos.writeByte(MAGIC_NUMBER)__		namespaceSerializer.serialize(namespace, dos)___		return dos.getCopyOfBuffer()__	};serializes,the,key,and,namespace,into,a,link,byte,buffer,p,the,serialized,format,matches,the,rocks,db,state,backend,key,format,i,e,the,key,and,namespace,don,t,have,to,be,deserialized,for,rocks,db,lookups,param,key,key,to,serialize,param,key,serializer,serializer,for,the,key,param,namespace,namespace,to,serialize,param,namespace,serializer,serializer,for,the,namespace,param,k,key,type,param,n,namespace,type,return,buffer,holding,the,serialized,key,and,namespace,throws,ioexception,serialization,errors,are,forwarded;public,static,k,n,byte,serialize,key,and,namespace,k,key,type,serializer,k,key,serializer,n,namespace,type,serializer,n,namespace,serializer,throws,ioexception,data,output,serializer,dos,new,data,output,serializer,32,key,serializer,serialize,key,dos,dos,write,byte,namespace,serializer,serialize,namespace,dos,return,dos,get,copy,of,buffer
KvStateSerializer -> public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException;1509037054;Serializes the value with the given serializer.__@param value      Value of type T to serialize_@param serializer Serializer for T_@param <T>        Type of the value_@return Serialized value or <code>null</code> if value <code>null</code>_@throws IOException On failure during serialization;public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException {_		if (value != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)__			serializer.serialize(value, dos)__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,the,value,with,the,given,serializer,param,value,value,of,type,t,to,serialize,param,serializer,serializer,for,t,param,t,type,of,the,value,return,serialized,value,or,code,null,code,if,value,code,null,code,throws,ioexception,on,failure,during,serialization;public,static,t,byte,serialize,value,t,value,type,serializer,t,serializer,throws,ioexception,if,value,null,data,output,serializer,dos,new,data,output,serializer,32,serializer,serialize,value,dos,return,dos,get,copy,of,buffer,else,return,null
KvStateSerializer -> public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException;1509646806;Serializes the value with the given serializer.__@param value      Value of type T to serialize_@param serializer Serializer for T_@param <T>        Type of the value_@return Serialized value or <code>null</code> if value <code>null</code>_@throws IOException On failure during serialization;public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException {_		if (value != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)__			serializer.serialize(value, dos)__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,the,value,with,the,given,serializer,param,value,value,of,type,t,to,serialize,param,serializer,serializer,for,t,param,t,type,of,the,value,return,serialized,value,or,code,null,code,if,value,code,null,code,throws,ioexception,on,failure,during,serialization;public,static,t,byte,serialize,value,t,value,type,serializer,t,serializer,throws,ioexception,if,value,null,data,output,serializer,dos,new,data,output,serializer,32,serializer,serialize,value,dos,return,dos,get,copy,of,buffer,else,return,null
KvStateSerializer -> public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException;1549554847;Serializes the value with the given serializer.__@param value      Value of type T to serialize_@param serializer Serializer for T_@param <T>        Type of the value_@return Serialized value or <code>null</code> if value <code>null</code>_@throws IOException On failure during serialization;public static <T> byte[] serializeValue(T value, TypeSerializer<T> serializer) throws IOException {_		if (value != null) {_			_			DataOutputSerializer dos = new DataOutputSerializer(32)__			serializer.serialize(value, dos)__			return dos.getCopyOfBuffer()__		} else {_			return null__		}_	};serializes,the,value,with,the,given,serializer,param,value,value,of,type,t,to,serialize,param,serializer,serializer,for,t,param,t,type,of,the,value,return,serialized,value,or,code,null,code,if,value,code,null,code,throws,ioexception,on,failure,during,serialization;public,static,t,byte,serialize,value,t,value,type,serializer,t,serializer,throws,ioexception,if,value,null,data,output,serializer,dos,new,data,output,serializer,32,serializer,serialize,value,dos,return,dos,get,copy,of,buffer,else,return,null
