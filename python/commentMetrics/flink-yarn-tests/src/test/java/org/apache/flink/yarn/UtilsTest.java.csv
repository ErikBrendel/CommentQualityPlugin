# id;timestamp;commentText;codeText;commentWords;codeWords
UtilsTest -> @Test 	public void testHeapCutoff();1462389709;Remove 15% of the heap, at least 384MB.;@Test_	public void testHeapCutoff() {_		Configuration conf = new Configuration()__		conf.setDouble(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf) )__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf) )___		_		Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERED_HEAP_CUTOFF_MIN, "1000")__		conf.setString(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO, "0.1")__		Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO, "0.5")__		Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERED_HEAP_CUTOFF_RATIO, "1")__		Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf))___		_		conf = new Configuration()__		conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf) )__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf) )__	};remove,15,of,the,heap,at,least,384mb;test,public,void,test,heap,cutoff,configuration,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf,assert,assert,equals,3400,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1000,conf,set,string,config,constants,0,1,assert,assert,equals,3000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,0,5,assert,assert,equals,2000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1,assert,assert,equals,0,utils,calculate,heap,size,4000,conf,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf
UtilsTest -> @Test 	public void testHeapCutoff();1468399420;Remove 15% of the heap, at least 384MB.;@Test_	public void testHeapCutoff() {_		Configuration conf = new Configuration()__		conf.setDouble(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf) )__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf) )___		_		Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN, "1000")__		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "0.1")__		Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "0.5")__		Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "1")__		Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf))___		_		conf = new Configuration()__		conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf) )__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf) )__	};remove,15,of,the,heap,at,least,384mb;test,public,void,test,heap,cutoff,configuration,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf,assert,assert,equals,3400,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1000,conf,set,string,config,constants,0,1,assert,assert,equals,3000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,0,5,assert,assert,equals,2000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1,assert,assert,equals,0,utils,calculate,heap,size,4000,conf,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf
UtilsTest -> @Test 	public void testHeapCutoff();1495702763;Remove 15% of the heap, at least 384MB.;@Test_	public void testHeapCutoff() {_		Configuration conf = new Configuration()__		conf.setDouble(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))___		_		Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_MIN, "1000")__		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "0.1")__		Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "0.5")__		Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ConfigConstants.CONTAINERIZED_HEAP_CUTOFF_RATIO, "1")__		Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf))___		_		conf = new Configuration()__		conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))__	};remove,15,of,the,heap,at,least,384mb;test,public,void,test,heap,cutoff,configuration,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf,assert,assert,equals,3400,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1000,conf,set,string,config,constants,0,1,assert,assert,equals,3000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,0,5,assert,assert,equals,2000,utils,calculate,heap,size,4000,conf,conf,set,string,config,constants,1,assert,assert,equals,0,utils,calculate,heap,size,4000,conf,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf
UtilsTest -> @Test 	public void testHeapCutoff();1502357790;Remove 15% of the heap, at least 384MB.;@Test_	public void testHeapCutoff() {_		Configuration conf = new Configuration()__		conf.setFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO, 0.15F)__		conf.setInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))___		_		Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key(), "1000")__		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.1")__		Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.5")__		Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "1")__		Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf))___		_		conf = new Configuration()__		conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))__	};remove,15,of,the,heap,at,least,384mb;test,public,void,test,heap,cutoff,configuration,conf,new,configuration,conf,set,float,resource,manager,options,0,15f,conf,set,integer,resource,manager,options,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf,assert,assert,equals,3400,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,1000,conf,set,string,resource,manager,options,key,0,1,assert,assert,equals,3000,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,0,5,assert,assert,equals,2000,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,1,assert,assert,equals,0,utils,calculate,heap,size,4000,conf,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf
UtilsTest -> @Test 	public void testHeapCutoff();1509547680;Remove 15% of the heap, at least 384MB.;@Test_	public void testHeapCutoff() {_		Configuration conf = new Configuration()__		conf.setFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO, 0.15F)__		conf.setInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))___		_		Assert.assertEquals(3400, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key(), "1000")__		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.1")__		Assert.assertEquals(3000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "0.5")__		Assert.assertEquals(2000, Utils.calculateHeapSize(4000, conf))___		conf.setString(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key(), "1")__		Assert.assertEquals(0, Utils.calculateHeapSize(4000, conf))___		_		conf = new Configuration()__		conf.setDouble(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.15)__		conf.setInteger(ConfigConstants.YARN_HEAP_CUTOFF_MIN, 384)___		Assert.assertEquals(616, Utils.calculateHeapSize(1000, conf))__		Assert.assertEquals(8500, Utils.calculateHeapSize(10000, conf))__	};remove,15,of,the,heap,at,least,384mb;test,public,void,test,heap,cutoff,configuration,conf,new,configuration,conf,set,float,resource,manager,options,0,15f,conf,set,integer,resource,manager,options,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf,assert,assert,equals,3400,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,1000,conf,set,string,resource,manager,options,key,0,1,assert,assert,equals,3000,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,0,5,assert,assert,equals,2000,utils,calculate,heap,size,4000,conf,conf,set,string,resource,manager,options,key,1,assert,assert,equals,0,utils,calculate,heap,size,4000,conf,conf,new,configuration,conf,set,double,config,constants,0,15,conf,set,integer,config,constants,384,assert,assert,equals,616,utils,calculate,heap,size,1000,conf,assert,assert,equals,8500,utils,calculate,heap,size,10000,conf
