# id;timestamp;commentText;codeText;commentWords;codeWords
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1518245533;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1519819705;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1521255281;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1522660437;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1522757621;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1524386308;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1525357660;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1530395596;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1547818098;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1547847142;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1548327929;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1548949269;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception;1550496538;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1461059459;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_				_			new String[]{"System.out)(1/1) switched to FINISHED "},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,system,out,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1461347574;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_				_			new String[]{"System.out)(1/1) switched to FINISHED "},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,system,out,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1466166557;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1469059713;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1473084350;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1473157324;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1476111856;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1486489641;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1495622548;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"}, "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1496893136;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1497366084;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1499270430;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1499408671;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1501586640;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1502272383;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1502976333;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1508150892;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1514884774;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism();1514982309;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1515709558;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1517300523;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1518245533;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1519819705;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1521255281;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1522660437;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1522757621;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1524386308;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1525357660;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1530395596;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1547818098;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1547847142;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1548327929;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1548949269;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterWithParallelism() throws IOException;1550496538;Test per-job yarn cluster with the parallelism set at the CliFrontend instead of the YARN client.;@Test_	public void perJobYarnClusterWithParallelism() throws IOException {_		LOG.info("Starting perJobYarnClusterWithParallelism()")__		_		_		addTestAppender(CliFrontend.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run",_				"-p", "2", _				"-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2",_				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_				_			"Program execution finished",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnClusterWithParallelism()")__	};test,per,job,yarn,cluster,with,the,parallelism,set,at,the,cli,frontend,instead,of,the,yarn,client;test,public,void,per,job,yarn,cluster,with,parallelism,throws,ioexception,log,info,starting,per,job,yarn,cluster,with,parallelism,add,test,appender,cli,frontend,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,p,2,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster,with,parallelism
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1421845001;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1423681821;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1424778095;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1424789905;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1425404151;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)___		ensureNoExceptionsInLogFiles()__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,ensure,no,exceptions,in,log,files
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1461059459;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1461347574;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1466166557;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1469059713;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1473084350;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1473157324;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1476111856;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1486489641;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1495622548;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1496893136;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1497366084;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1499270430;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1499408671;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1501586640;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1502272383;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1502976333;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1508150892;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1514884774;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup();1514982309;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1495622548;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1496893136;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1497366084;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1499270430;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1499408671;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1501586640;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1502272383;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1502976333;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1508150892;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1514884774;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1514982309;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap();1501586640;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap();1502272383;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap();1514884774;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap();1514982309;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1461059459;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		try {_			List<NodeReport> nodeReports = yc.getNodeReports(NodeState.RUNNING)___			_			int userVcores = 0__			for (NodeReport rep: nodeReports) {_				userVcores += rep.getUsed().getVirtualCores()__			}_			Assert.assertEquals(2, userVcores)__		} catch (Exception e) {_			Assert.fail("Test failed: " + e.getMessage())__		}__		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,try,list,node,report,node,reports,yc,get,node,reports,node,state,running,int,user,vcores,0,for,node,report,rep,node,reports,user,vcores,rep,get,used,get,virtual,cores,assert,assert,equals,2,user,vcores,catch,exception,e,assert,fail,test,failed,e,get,message,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1461347574;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		try {_			List<NodeReport> nodeReports = yc.getNodeReports(NodeState.RUNNING)___			_			int userVcores = 0__			for (NodeReport rep: nodeReports) {_				userVcores += rep.getUsed().getVirtualCores()__			}_			Assert.assertEquals(2, userVcores)__		} catch (Exception e) {_			Assert.fail("Test failed: " + e.getMessage())__		}__		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,try,list,node,report,node,reports,yc,get,node,reports,node,state,running,int,user,vcores,0,for,node,report,rep,node,reports,user,vcores,rep,get,used,get,virtual,cores,assert,assert,equals,2,user,vcores,catch,exception,e,assert,fail,test,failed,e,get,message,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1466166557;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		try {_			List<NodeReport> nodeReports = yc.getNodeReports(NodeState.RUNNING)___			_			int userVcores = 0__			for (NodeReport rep: nodeReports) {_				userVcores += rep.getUsed().getVirtualCores()__			}_			Assert.assertEquals(2, userVcores)__		} catch (Exception e) {_			Assert.fail("Test failed: " + e.getMessage())__		}__		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,try,list,node,report,node,reports,yc,get,node,reports,node,state,running,int,user,vcores,0,for,node,report,rep,node,reports,user,vcores,rep,get,used,get,virtual,cores,assert,assert,equals,2,user,vcores,catch,exception,e,assert,fail,test,failed,e,get,message,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1469059713;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1473084350;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		try {_			List<NodeReport> nodeReports = yc.getNodeReports(NodeState.RUNNING)___			_			_			boolean foundVCoresSetting = false__			for (NodeReport rep: nodeReports) {_				Resource resource = rep.getUsed()__				if (resource != null && resource.getVirtualCores() == 2) {_					foundVCoresSetting = true__					break__				}_			}_			Assert.assertTrue(foundVCoresSetting)__		} catch (Exception e) {_			Assert.fail("Test failed: " + e.getMessage())__		}__		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,try,list,node,report,node,reports,yc,get,node,reports,node,state,running,boolean,found,vcores,setting,false,for,node,report,rep,node,reports,resource,resource,rep,get,used,if,resource,null,resource,get,virtual,cores,2,found,vcores,setting,true,break,assert,assert,true,found,vcores,setting,catch,exception,e,assert,fail,test,failed,e,get,message,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1473157324;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1476111856;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout=100000)  	public void testTaskManagerFailure();1486489641;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout=100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if(!url.endsWith("/")) {_				url += "/"__			}_			if(!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while(matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch(Throwable e) {_			LOG.warn("Error while running test",e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for(int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for(Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if(command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "",0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: "+e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)____		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(originalStdout)__		System.setErr(originalStderr)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,original,stdout,system,set,err,original,stderr,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100_000) 	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception;1547847142;Starts a session cluster on YARN, and submits a streaming job.__<p>Tests_<ul>_<li>if a custom YARN application name can be set from the command line,_<li>if the number of TaskManager slots can be set from the command line,_<li>if dynamic properties from the command line are set,_<li>if the vcores are set correctly (FLINK-2213),_<li>if jobmanager hostname/port are shown in web interface (FLINK-1902)_</ul>__<p><b>Hint: </b> If you think it is a good idea to add more assertions to this test, think again!;@Test(timeout = 100_000)_	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception {_		checkForProhibitedLogContents = false__		final Runner yarnSessionClusterRunner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Flink JobManager is now running on ",_			RunTypes.YARN_SESSION)___		final String logs = outContent.toString()__		final HostAndPort hostAndPort = parseJobManagerHostname(logs)__		final String host = hostAndPort.getHostText()__		final int port = hostAndPort.getPort()__		LOG.info("Extracted hostname:port: {}", host, port)___		submitJob("WindowJoin.jar")___		_		_		_		final ApplicationReport applicationReport = getOnlyApplicationReport()__		assertEquals("customName", applicationReport.getName())___		_		_		_		waitForTaskManagerRegistration(host, port, Duration.ofMillis(30_000))__		assertNumberOfSlotsPerTask(host, port, 3)___		final Map<String, String> flinkConfig = getFlinkConfig(host, port)___		_		_		_		assertThat(flinkConfig, hasEntry("fancy-configuration-value", "veryFancy"))__		assertThat(flinkConfig, hasEntry("yarn.maximum-failed-containers", "3"))___		_		_		_		assertThat(flinkConfig, hasEntry(YarnConfigOptions.VCORES.key(), "2"))___		_		_		_		assertThat(flinkConfig, hasEntry(JobManagerOptions.ADDRESS.key(), host))___		yarnSessionClusterRunner.sendStop()__		yarnSessionClusterRunner.join()__	};starts,a,session,cluster,on,yarn,and,submits,a,streaming,job,p,tests,ul,li,if,a,custom,yarn,application,name,can,be,set,from,the,command,line,li,if,the,number,of,task,manager,slots,can,be,set,from,the,command,line,li,if,dynamic,properties,from,the,command,line,are,set,li,if,the,vcores,are,set,correctly,flink,2213,li,if,jobmanager,hostname,port,are,shown,in,web,interface,flink,1902,ul,p,b,hint,b,if,you,think,it,is,a,good,idea,to,add,more,assertions,to,this,test,think,again;test,timeout,public,void,test,vcores,are,set,correctly,and,job,manager,hostname,are,shown,in,web,interface,and,dynamic,properties,and,yarn,application,name,and,task,manager,slots,throws,exception,check,for,prohibited,log,contents,false,final,runner,yarn,session,cluster,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,flink,job,manager,is,now,running,on,run,types,final,string,logs,out,content,to,string,final,host,and,port,host,and,port,parse,job,manager,hostname,logs,final,string,host,host,and,port,get,host,text,final,int,port,host,and,port,get,port,log,info,extracted,hostname,port,host,port,submit,job,window,join,jar,final,application,report,application,report,get,only,application,report,assert,equals,custom,name,application,report,get,name,wait,for,task,manager,registration,host,port,duration,of,millis,assert,number,of,slots,per,task,host,port,3,final,map,string,string,flink,config,get,flink,config,host,port,assert,that,flink,config,has,entry,fancy,configuration,value,very,fancy,assert,that,flink,config,has,entry,yarn,maximum,failed,containers,3,assert,that,flink,config,has,entry,yarn,config,options,vcores,key,2,assert,that,flink,config,has,entry,job,manager,options,address,key,host,yarn,session,cluster,runner,send,stop,yarn,session,cluster,runner,join
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100_000) 	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception;1548327929;Starts a session cluster on YARN, and submits a streaming job.__<p>Tests_<ul>_<li>if a custom YARN application name can be set from the command line,_<li>if the number of TaskManager slots can be set from the command line,_<li>if dynamic properties from the command line are set,_<li>if the vcores are set correctly (FLINK-2213),_<li>if jobmanager hostname/port are shown in web interface (FLINK-1902)_</ul>__<p><b>Hint: </b> If you think it is a good idea to add more assertions to this test, think again!;@Test(timeout = 100_000)_	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception {_		checkForProhibitedLogContents = false__		final Runner yarnSessionClusterRunner = startWithArgs(new String[]{_				"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Flink JobManager is now running on ",_			RunTypes.YARN_SESSION)___		final String logs = outContent.toString()__		final HostAndPort hostAndPort = parseJobManagerHostname(logs)__		final String host = hostAndPort.getHostText()__		final int port = hostAndPort.getPort()__		LOG.info("Extracted hostname:port: {}", host, port)___		submitJob("WindowJoin.jar")___		_		_		_		final ApplicationReport applicationReport = getOnlyApplicationReport()__		assertEquals("customName", applicationReport.getName())___		_		_		_		waitForTaskManagerRegistration(host, port, Duration.ofMillis(30_000))__		assertNumberOfSlotsPerTask(host, port, 3)___		final Map<String, String> flinkConfig = getFlinkConfig(host, port)___		_		_		_		assertThat(flinkConfig, hasEntry("fancy-configuration-value", "veryFancy"))__		assertThat(flinkConfig, hasEntry("yarn.maximum-failed-containers", "3"))___		_		_		_		assertThat(flinkConfig, hasEntry(YarnConfigOptions.VCORES.key(), "2"))___		_		_		_		assertThat(flinkConfig, hasEntry(JobManagerOptions.ADDRESS.key(), host))___		yarnSessionClusterRunner.sendStop()__		yarnSessionClusterRunner.join()__	};starts,a,session,cluster,on,yarn,and,submits,a,streaming,job,p,tests,ul,li,if,a,custom,yarn,application,name,can,be,set,from,the,command,line,li,if,the,number,of,task,manager,slots,can,be,set,from,the,command,line,li,if,dynamic,properties,from,the,command,line,are,set,li,if,the,vcores,are,set,correctly,flink,2213,li,if,jobmanager,hostname,port,are,shown,in,web,interface,flink,1902,ul,p,b,hint,b,if,you,think,it,is,a,good,idea,to,add,more,assertions,to,this,test,think,again;test,timeout,public,void,test,vcores,are,set,correctly,and,job,manager,hostname,are,shown,in,web,interface,and,dynamic,properties,and,yarn,application,name,and,task,manager,slots,throws,exception,check,for,prohibited,log,contents,false,final,runner,yarn,session,cluster,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,flink,job,manager,is,now,running,on,run,types,final,string,logs,out,content,to,string,final,host,and,port,host,and,port,parse,job,manager,hostname,logs,final,string,host,host,and,port,get,host,text,final,int,port,host,and,port,get,port,log,info,extracted,hostname,port,host,port,submit,job,window,join,jar,final,application,report,application,report,get,only,application,report,assert,equals,custom,name,application,report,get,name,wait,for,task,manager,registration,host,port,duration,of,millis,assert,number,of,slots,per,task,host,port,3,final,map,string,string,flink,config,get,flink,config,host,port,assert,that,flink,config,has,entry,fancy,configuration,value,very,fancy,assert,that,flink,config,has,entry,yarn,maximum,failed,containers,3,assert,that,flink,config,has,entry,yarn,config,options,vcores,key,2,assert,that,flink,config,has,entry,job,manager,options,address,key,host,yarn,session,cluster,runner,send,stop,yarn,session,cluster,runner,join
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100_000) 	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception;1548949269;Starts a session cluster on YARN, and submits a streaming job.__<p>Tests_<ul>_<li>if a custom YARN application name can be set from the command line,_<li>if the number of TaskManager slots can be set from the command line,_<li>if dynamic properties from the command line are set,_<li>if the vcores are set correctly (FLINK-2213),_<li>if jobmanager hostname/port are shown in web interface (FLINK-1902)_</ul>__<p><b>Hint: </b> If you think it is a good idea to add more assertions to this test, think again!;@Test(timeout = 100_000)_	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception {_		checkForProhibitedLogContents = false__		final Runner yarnSessionClusterRunner = startWithArgs(new String[]{_				"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Flink JobManager is now running on ",_			RunTypes.YARN_SESSION)___		final String logs = outContent.toString()__		final HostAndPort hostAndPort = parseJobManagerHostname(logs)__		final String host = hostAndPort.getHostText()__		final int port = hostAndPort.getPort()__		LOG.info("Extracted hostname:port: {}", host, port)___		submitJob("WindowJoin.jar")___		_		_		_		final ApplicationReport applicationReport = getOnlyApplicationReport()__		assertEquals("customName", applicationReport.getName())___		_		_		_		waitForTaskManagerRegistration(host, port, Duration.ofMillis(30_000))__		assertNumberOfSlotsPerTask(host, port, 3)___		final Map<String, String> flinkConfig = getFlinkConfig(host, port)___		_		_		_		assertThat(flinkConfig, hasEntry("fancy-configuration-value", "veryFancy"))__		assertThat(flinkConfig, hasEntry("yarn.maximum-failed-containers", "3"))___		_		_		_		assertThat(flinkConfig, hasEntry(YarnConfigOptions.VCORES.key(), "2"))___		_		_		_		assertThat(flinkConfig, hasEntry(JobManagerOptions.ADDRESS.key(), host))___		yarnSessionClusterRunner.sendStop()__		yarnSessionClusterRunner.join()__	};starts,a,session,cluster,on,yarn,and,submits,a,streaming,job,p,tests,ul,li,if,a,custom,yarn,application,name,can,be,set,from,the,command,line,li,if,the,number,of,task,manager,slots,can,be,set,from,the,command,line,li,if,dynamic,properties,from,the,command,line,are,set,li,if,the,vcores,are,set,correctly,flink,2213,li,if,jobmanager,hostname,port,are,shown,in,web,interface,flink,1902,ul,p,b,hint,b,if,you,think,it,is,a,good,idea,to,add,more,assertions,to,this,test,think,again;test,timeout,public,void,test,vcores,are,set,correctly,and,job,manager,hostname,are,shown,in,web,interface,and,dynamic,properties,and,yarn,application,name,and,task,manager,slots,throws,exception,check,for,prohibited,log,contents,false,final,runner,yarn,session,cluster,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,flink,job,manager,is,now,running,on,run,types,final,string,logs,out,content,to,string,final,host,and,port,host,and,port,parse,job,manager,hostname,logs,final,string,host,host,and,port,get,host,text,final,int,port,host,and,port,get,port,log,info,extracted,hostname,port,host,port,submit,job,window,join,jar,final,application,report,application,report,get,only,application,report,assert,equals,custom,name,application,report,get,name,wait,for,task,manager,registration,host,port,duration,of,millis,assert,number,of,slots,per,task,host,port,3,final,map,string,string,flink,config,get,flink,config,host,port,assert,that,flink,config,has,entry,fancy,configuration,value,very,fancy,assert,that,flink,config,has,entry,yarn,maximum,failed,containers,3,assert,that,flink,config,has,entry,yarn,config,options,vcores,key,2,assert,that,flink,config,has,entry,job,manager,options,address,key,host,yarn,session,cluster,runner,send,stop,yarn,session,cluster,runner,join
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100_000) 	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception;1550496538;Starts a session cluster on YARN, and submits a streaming job.__<p>Tests_<ul>_<li>if a custom YARN application name can be set from the command line,_<li>if the number of TaskManager slots can be set from the command line,_<li>if dynamic properties from the command line are set,_<li>if the vcores are set correctly (FLINK-2213),_<li>if jobmanager hostname/port are shown in web interface (FLINK-1902)_</ul>__<p><b>Hint: </b> If you think it is a good idea to add more assertions to this test, think again!;@Test(timeout = 100_000)_	public void testVCoresAreSetCorrectlyAndJobManagerHostnameAreShownInWebInterfaceAndDynamicPropertiesAndYarnApplicationNameAndTaskManagerSlots() throws Exception {_		checkForProhibitedLogContents = false__		final Runner yarnSessionClusterRunner = startWithArgs(new String[]{_				"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Flink JobManager is now running on ",_			RunTypes.YARN_SESSION)___		final String logs = outContent.toString()__		final HostAndPort hostAndPort = parseJobManagerHostname(logs)__		final String host = hostAndPort.getHostText()__		final int port = hostAndPort.getPort()__		LOG.info("Extracted hostname:port: {}", host, port)___		submitJob("WindowJoin.jar")___		_		_		_		final ApplicationReport applicationReport = getOnlyApplicationReport()__		assertEquals("customName", applicationReport.getName())___		_		_		_		waitForTaskManagerRegistration(host, port, Duration.ofMillis(30_000))__		assertNumberOfSlotsPerTask(host, port, 3)___		final Map<String, String> flinkConfig = getFlinkConfig(host, port)___		_		_		_		assertThat(flinkConfig, hasEntry("fancy-configuration-value", "veryFancy"))__		assertThat(flinkConfig, hasEntry("yarn.maximum-failed-containers", "3"))___		_		_		_		assertThat(flinkConfig, hasEntry(YarnConfigOptions.VCORES.key(), "2"))___		_		_		_		assertThat(flinkConfig, hasEntry(JobManagerOptions.ADDRESS.key(), host))___		yarnSessionClusterRunner.sendStop()__		yarnSessionClusterRunner.join()__	};starts,a,session,cluster,on,yarn,and,submits,a,streaming,job,p,tests,ul,li,if,a,custom,yarn,application,name,can,be,set,from,the,command,line,li,if,the,number,of,task,manager,slots,can,be,set,from,the,command,line,li,if,dynamic,properties,from,the,command,line,are,set,li,if,the,vcores,are,set,correctly,flink,2213,li,if,jobmanager,hostname,port,are,shown,in,web,interface,flink,1902,ul,p,b,hint,b,if,you,think,it,is,a,good,idea,to,add,more,assertions,to,this,test,think,again;test,timeout,public,void,test,vcores,are,set,correctly,and,job,manager,hostname,are,shown,in,web,interface,and,dynamic,properties,and,yarn,application,name,and,task,manager,slots,throws,exception,check,for,prohibited,log,contents,false,final,runner,yarn,session,cluster,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,flink,job,manager,is,now,running,on,run,types,final,string,logs,out,content,to,string,final,host,and,port,host,and,port,parse,job,manager,hostname,logs,final,string,host,host,and,port,get,host,text,final,int,port,host,and,port,get,port,log,info,extracted,hostname,port,host,port,submit,job,window,join,jar,final,application,report,application,report,get,only,application,report,assert,equals,custom,name,application,report,get,name,wait,for,task,manager,registration,host,port,duration,of,millis,assert,number,of,slots,per,task,host,port,3,final,map,string,string,flink,config,get,flink,config,host,port,assert,that,flink,config,has,entry,fancy,configuration,value,very,fancy,assert,that,flink,config,has,entry,yarn,maximum,failed,containers,3,assert,that,flink,config,has,entry,yarn,config,options,vcores,key,2,assert,that,flink,config,has,entry,job,manager,options,address,key,host,yarn,session,cluster,runner,send,stop,yarn,session,cluster,runner,join
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure();1495622548;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if (!url.endsWith("/")) {_				url += "/"__			}_			if (!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while (matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch (Throwable e) {_			LOG.warn("Error while running test", e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure();1496893136;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if (!url.endsWith("/")) {_				url += "/"__			}_			if (!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while (matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(JobManagerOptions.ADDRESS.key()))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(JobManagerOptions.PORT.key()))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch (Throwable e) {_			LOG.warn("Error while running test", e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure();1497366084;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if (!url.endsWith("/")) {_				url += "/"__			}_			if (!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while (matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(JobManagerOptions.ADDRESS.key()))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(JobManagerOptions.PORT.key()))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch (Throwable e) {_			LOG.warn("Error while running test", e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure();1499270430;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if (!url.endsWith("/")) {_				url += "/"__			}_			if (!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while (matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch (Throwable e) {_			LOG.warn("Error while running test", e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,config,constants,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,config,constants,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure();1499408671;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + ConfigConstants.YARN_VCORES + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		YarnClient yc = null__		try {_			yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()___			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)__			Assert.assertEquals("customName", app.getName())__			String url = app.getTrackingUrl()__			if (!url.endsWith("/")) {_				url += "/"__			}_			if (!url.startsWith("http://")) {_				url = "http://" + url__			}_			LOG.info("Got application URL from YARN {}", url)___			String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___			JsonNode parsedTMs = new ObjectMapper().readTree(response)__			ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__			Assert.assertNotNull(taskManagers)__			Assert.assertEquals(1, taskManagers.size())__			Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___			_			String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__			Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___			Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__			Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__			Assert.assertEquals("2", parsedConfig.get(ConfigConstants.YARN_VCORES))___			_			_			String oC = outContent.toString()__			Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__			Matcher matches = p.matcher(oC)__			String hostname = null__			String port = null__			while (matches.find()) {_				hostname = matches.group(1).toLowerCase()__				port = matches.group(2)__			}_			LOG.info("Extracted hostname:port: {} {}", hostname, port)___			Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_				parsedConfig.get(JobManagerOptions.ADDRESS.key()))__			Assert.assertEquals("unable to find port in " + jsonConfig, port,_				parsedConfig.get(JobManagerOptions.PORT.key()))___			_			String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__			Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__			Assert.assertTrue(logs.contains("Starting JobManager"))__			Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))__		} catch (Throwable e) {_			LOG.warn("Error while running test", e)__			Assert.fail(e.getMessage())__		}__		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = Joiner.on(" ").join(entry.getValue().getLaunchContext().getCommands())__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		String oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,config,constants,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,yarn,client,yc,null,try,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,config,constants,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,catch,throwable,e,log,warn,error,while,running,test,e,assert,fail,e,get,message,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,joiner,on,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,string,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1515709558;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1517300523;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1518245533;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1519819705;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1521255281;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1522660437;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1522757621;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1524386308;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1525357660;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1530395596;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1547818098;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1547847142;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1548327929;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1548949269;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage() throws IOException;1550496538;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() throws IOException {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		try {_			runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		} catch (Exception e) {_			assertTrue(ExceptionUtils.findThrowableWithMessage(e, "to unknown queue: doesntExist").isPresent())__		}_		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,throws,ioexception,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,try,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,n,1,jm,768m,tm,1024m,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,catch,exception,e,assert,true,exception,utils,find,throwable,with,message,e,to,unknown,queue,doesnt,exist,is,present,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException;1547818098;Tests that a session cluster, that uses the resources from the <i>qa-team</i> queue,_can be started from the command line.;@Test_	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException {_		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Flink JobManager is now running on ", null, RunTypes.YARN_SESSION, 0)__	};tests,that,a,session,cluster,that,uses,the,resources,from,the,i,qa,team,i,queue,can,be,started,from,the,command,line;test,public,void,test,start,yarn,session,cluster,in,qa,team,queue,throws,ioexception,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,jm,768m,tm,1024m,qu,qa,team,flink,job,manager,is,now,running,on,null,run,types,0
YARNSessionCapacitySchedulerITCase -> @Test 	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException;1547847142;Tests that a session cluster, that uses the resources from the <i>qa-team</i> queue,_can be started from the command line.;@Test_	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException {_		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Flink JobManager is now running on ", null, RunTypes.YARN_SESSION, 0)__	};tests,that,a,session,cluster,that,uses,the,resources,from,the,i,qa,team,i,queue,can,be,started,from,the,command,line;test,public,void,test,start,yarn,session,cluster,in,qa,team,queue,throws,ioexception,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,jm,768m,tm,1024m,qu,qa,team,flink,job,manager,is,now,running,on,null,run,types,0
YARNSessionCapacitySchedulerITCase -> @Test 	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException;1548327929;Tests that a session cluster, that uses the resources from the <i>qa-team</i> queue,_can be started from the command line.;@Test_	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException {_		runWithArgs(new String[]{_						"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-t", flinkShadedHadoopDir.getAbsolutePath(),_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Flink JobManager is now running on ", null, RunTypes.YARN_SESSION, 0)__	};tests,that,a,session,cluster,that,uses,the,resources,from,the,i,qa,team,i,queue,can,be,started,from,the,command,line;test,public,void,test,start,yarn,session,cluster,in,qa,team,queue,throws,ioexception,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,qu,qa,team,flink,job,manager,is,now,running,on,null,run,types,0
YARNSessionCapacitySchedulerITCase -> @Test 	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException;1548949269;Tests that a session cluster, that uses the resources from the <i>qa-team</i> queue,_can be started from the command line.;@Test_	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException {_		runWithArgs(new String[]{_						"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-t", flinkShadedHadoopDir.getAbsolutePath(),_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Flink JobManager is now running on ", null, RunTypes.YARN_SESSION, 0)__	};tests,that,a,session,cluster,that,uses,the,resources,from,the,i,qa,team,i,queue,can,be,started,from,the,command,line;test,public,void,test,start,yarn,session,cluster,in,qa,team,queue,throws,ioexception,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,qu,qa,team,flink,job,manager,is,now,running,on,null,run,types,0
YARNSessionCapacitySchedulerITCase -> @Test 	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException;1550496538;Tests that a session cluster, that uses the resources from the <i>qa-team</i> queue,_can be started from the command line.;@Test_	public void testStartYarnSessionClusterInQaTeamQueue() throws IOException {_		runWithArgs(new String[]{_						"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-t", flinkShadedHadoopDir.getAbsolutePath(),_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Flink JobManager is now running on ", null, RunTypes.YARN_SESSION, 0)__	};tests,that,a,session,cluster,that,uses,the,resources,from,the,i,qa,team,i,queue,can,be,started,from,the,command,line;test,public,void,test,start,yarn,session,cluster,in,qa,team,queue,throws,ioexception,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,jm,768m,tm,1024m,qu,qa,team,flink,job,manager,is,now,running,on,null,run,types,0
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1518245533;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1519819705;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1521255281;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1522660437;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1522757621;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1524386308;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1525357660;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1530395596;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1547818098;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1547847142;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1548327929;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1548949269;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws Exception;1550496538;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws Exception {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,exception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,get,test,jar,path,batch,word,count,jar,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1515709558;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1517300523;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("Flip-6 does not start TMs upfront.", !flip6)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,flip,6,does,not,start,tms,upfront,flip6,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1518245533;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768m",_						"-tm", "1024m", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1519819705;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("Flip-6 does not start TMs upfront.", !flip6)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,flip,6,does,not,start,tms,upfront,flip6,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1521255281;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1522660437;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1522757621;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1524386308;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1525357660;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test 	public void testClientStartup() throws IOException;1530395596;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() throws IOException {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024", "-qu", "qa-team"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,throws,ioexception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,qa,team,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,client,startup
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws IOException;1515709558;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws IOException {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,ioexception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob() throws IOException;1517300523;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() throws IOException {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = new File("target/programs/StreamingWordCount.jar")___		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,throws,ioexception,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,new,file,target,programs,streaming,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1461059459;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1461347574;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1466166557;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1469059713;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1473084350;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1473157324;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1476111856;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnCluster();1486489641;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1486489641;Ensures that the YARN application tags were set properly.__Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Sets.newHashSet("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,sets,new,hash,set,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1495622548;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Sets.newHashSet("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,sets,new,hash,set,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1496893136;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1497366084;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1499270430;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Sets.newHashSet("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,sets,new,hash,set,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1499408671;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Sets.newHashSet("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,sets,new,hash,set,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1501586640;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1502272383;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1502976333;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1508150892;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1514884774;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1514982309;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1515709558;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1517300523;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(applicationTags, Collections.singleton("test-tag"))__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,application,tags,collections,singleton,test,tag
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1518245533;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1519819705;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1521255281;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1522660437;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1522757621;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1524386308;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1525357660;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1530395596;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1547818098;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		Assert.assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1547847142;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1548327929;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1548949269;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException, 		IllegalAccessException;1550496538;Ensures that the YARN application tags were set properly.__<p>Since YARN application tags were only added in Hadoop 2.4, but Flink still supports Hadoop 2.3, reflection is_required to invoke the methods. If the method does not exist, this test passes.;private void verifyApplicationTags(final ApplicationReport report) throws InvocationTargetException,_		IllegalAccessException {__		final Method applicationTagsMethod___		Class<ApplicationReport> clazz = ApplicationReport.class__		try {_			_			applicationTagsMethod = clazz.getMethod("getApplicationTags")__		} catch (NoSuchMethodException e) {_			_			return__		}__		@SuppressWarnings("unchecked")_		Set<String> applicationTags = (Set<String>) applicationTagsMethod.invoke(report)___		assertEquals(Collections.singleton("test-tag"), applicationTags)__	};ensures,that,the,yarn,application,tags,were,set,properly,p,since,yarn,application,tags,were,only,added,in,hadoop,2,4,but,flink,still,supports,hadoop,2,3,reflection,is,required,to,invoke,the,methods,if,the,method,does,not,exist,this,test,passes;private,void,verify,application,tags,final,application,report,report,throws,invocation,target,exception,illegal,access,exception,final,method,application,tags,method,class,application,report,clazz,application,report,class,try,application,tags,method,clazz,get,method,get,application,tags,catch,no,such,method,exception,e,return,suppress,warnings,unchecked,set,string,application,tags,set,string,application,tags,method,invoke,report,assert,equals,collections,singleton,test,tag,application,tags
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1461059459;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_				_			new String[]{"System.out)(1/1) switched to FINISHED "},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,system,out,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1461347574;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_				_			new String[]{"System.out)(1/1) switched to FINISHED "},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,system,out,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1466166557;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1469059713;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1473084350;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1473157324;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1476111856;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1486489641;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1495622548;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = YarnTestBase.findFile("..", new ContainsName(new String[] {"-WordCount.jar"} , "streaming"))_ _		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,yarn,test,base,find,file,new,contains,name,new,string,word,count,jar,streaming,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1496893136;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1497366084;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1499270430;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1499408671;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1501586640;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1502272383;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1502976333;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1508150892;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_				_			"Job execution complete",_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1514884774;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster();1514982309;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1501586640;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1502272383;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1502976333;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1508150892;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1514884774;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1514982309;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1515709558;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1517300523;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("Flip-6 does not start TMs upfront.", !flip6)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,flip,6,does,not,start,tms,upfront,flip6,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1518245533;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join()__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1519819705;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("Flip-6 does not start TMs upfront.", !flip6)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,flip,6,does,not,start,tms,upfront,flip6,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1521255281;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1522660437;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1522757621;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1524386308;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1525357660;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join(1000)__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,1000,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1530395596;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join()__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 100000)  	public void testTaskManagerFailure() throws Exception;1547818098;Test TaskManager failure and also if the vcores are set correctly (see issue FLINK-2213).;@Test(timeout = 100000) _	public void testTaskManagerFailure() throws Exception {_		assumeTrue("The new mode does not start TMs upfront.", !isNewMode)__		LOG.info("Starting testTaskManagerFailure()")__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768m",_				"-tm", "1024m",_				"-s", "3", _				"-nm", "customName",_				"-Dfancy-configuration-value=veryFancy",_				"-Dyarn.maximum-failed-containers=3",_				"-D" + YarnConfigOptions.VCORES.key() + "=2"},_			"Number of connected TaskManagers changed to 1. Slots available: 3",_			RunTypes.YARN_SESSION)___		Assert.assertEquals(2, getRunningContainers())___		__		final YarnClient yc = YarnClient.createYarnClient()__		yc.init(YARN_CONFIGURATION)__		yc.start()___		List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__		Assert.assertEquals(1, apps.size())_ _		ApplicationReport app = apps.get(0)__		Assert.assertEquals("customName", app.getName())__		String url = app.getTrackingUrl()__		if (!url.endsWith("/")) {_			url += "/"__		}_		if (!url.startsWith("http://")) {_			url = "http://" + url__		}_		LOG.info("Got application URL from YARN {}", url)___		String response = TestBaseUtils.getFromHTTP(url + "taskmanagers/")___		JsonNode parsedTMs = new ObjectMapper().readTree(response)__		ArrayNode taskManagers = (ArrayNode) parsedTMs.get("taskmanagers")__		Assert.assertNotNull(taskManagers)__		Assert.assertEquals(1, taskManagers.size())__		Assert.assertEquals(3, taskManagers.get(0).get("slotsNumber").asInt())___		_		String jsonConfig = TestBaseUtils.getFromHTTP(url + "jobmanager/config")__		Map<String, String> parsedConfig = WebMonitorUtils.fromKeyValueJsonArray(jsonConfig)___		Assert.assertEquals("veryFancy", parsedConfig.get("fancy-configuration-value"))__		Assert.assertEquals("3", parsedConfig.get("yarn.maximum-failed-containers"))__		Assert.assertEquals("2", parsedConfig.get(YarnConfigOptions.VCORES.key()))___		_		_		String oC = outContent.toString()__		Pattern p = Pattern.compile("Flink JobManager is now running on ([a-zA-Z0-9.-]+):([0-9]+)")__		Matcher matches = p.matcher(oC)__		String hostname = null__		String port = null__		while (matches.find()) {_			hostname = matches.group(1).toLowerCase()__			port = matches.group(2)__		}_		LOG.info("Extracted hostname:port: {} {}", hostname, port)___		Assert.assertEquals("unable to find hostname in " + jsonConfig, hostname,_			parsedConfig.get(JobManagerOptions.ADDRESS.key()))__		Assert.assertEquals("unable to find port in " + jsonConfig, port,_			parsedConfig.get(JobManagerOptions.PORT.key()))___		_		String logs = TestBaseUtils.getFromHTTP(url + "jobmanager/log")__		Assert.assertTrue(logs.contains("Starting YARN ApplicationMaster"))__		Assert.assertTrue(logs.contains("Starting JobManager"))__		Assert.assertTrue(logs.contains("Starting JobManager Web Frontend"))___		__		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		UserGroupInformation remoteUgi = null__		NMTokenIdentifier nmIdent = null__		try {_			remoteUgi = UserGroupInformation.getCurrentUser()__		} catch (IOException e) {_			LOG.warn("Unable to get curr user", e)__			Assert.fail()__		}_		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskManager.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_			sleep(500)__		}__		Assert.assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		Assert.assertNotNull("Illegal state", nodeManager)___		yc.stop()___		List<ContainerId> toStop = new LinkedList<ContainerId>()__		toStop.add(taskManagerContainer)__		StopContainersRequest scr = StopContainersRequest.newInstance(toStop)___		try {_			nodeManager.getNMContext().getContainerManager().stopContainers(scr)__		} catch (Throwable e) {_			LOG.warn("Error stopping container", e)__			Assert.fail("Error stopping container: " + e.getMessage())__		}__		_		_		boolean ok = false__		do {_			LOG.debug("Waiting for correct order of events. Output: {}", errContent.toString())___			String o = errContent.toString()__			int killedOff = o.indexOf("Container killed by the ApplicationMaster")__			if (killedOff != -1) {_				o = o.substring(killedOff)__				ok = o.indexOf("Launching TaskManager") > 0__			}_			sleep(1000)__		} while(!ok)___		_		runner.sendStop()__		_		try {_			runner.join()__		} catch (InterruptedException e) {_			LOG.warn("Interrupted while stopping runner", e)__		}_		LOG.warn("stopped")___		_		System.setOut(ORIGINAL_STDOUT)__		System.setErr(ORIGINAL_STDERR)__		oC = outContent.toString()__		String eC = errContent.toString()__		LOG.info("Sending stdout content through logger: \n\n{}\n\n", oC)__		LOG.info("Sending stderr content through logger: \n\n{}\n\n", eC)___		_		Assert.assertTrue("Expect to see failed container",_			eC.contains("New messages from the YARN cluster"))___		Assert.assertTrue("Expect to see failed container",_			eC.contains("Container killed by the ApplicationMaster"))___		Assert.assertTrue("Expect to see new container started",_			eC.contains("Launching TaskManager") && eC.contains("on host"))___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)___		LOG.info("Finished testTaskManagerFailure()")__	};test,task,manager,failure,and,also,if,the,vcores,are,set,correctly,see,issue,flink,2213;test,timeout,100000,public,void,test,task,manager,failure,throws,exception,assume,true,the,new,mode,does,not,start,tms,upfront,is,new,mode,log,info,starting,test,task,manager,failure,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768m,tm,1024m,s,3,nm,custom,name,dfancy,configuration,value,very,fancy,dyarn,maximum,failed,containers,3,d,yarn,config,options,vcores,key,2,number,of,connected,task,managers,changed,to,1,slots,available,3,run,types,assert,assert,equals,2,get,running,containers,final,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,custom,name,app,get,name,string,url,app,get,tracking,url,if,url,ends,with,url,if,url,starts,with,http,url,http,url,log,info,got,application,url,from,yarn,url,string,response,test,base,utils,get,from,http,url,taskmanagers,json,node,parsed,tms,new,object,mapper,read,tree,response,array,node,task,managers,array,node,parsed,tms,get,taskmanagers,assert,assert,not,null,task,managers,assert,assert,equals,1,task,managers,size,assert,assert,equals,3,task,managers,get,0,get,slots,number,as,int,string,json,config,test,base,utils,get,from,http,url,jobmanager,config,map,string,string,parsed,config,web,monitor,utils,from,key,value,json,array,json,config,assert,assert,equals,very,fancy,parsed,config,get,fancy,configuration,value,assert,assert,equals,3,parsed,config,get,yarn,maximum,failed,containers,assert,assert,equals,2,parsed,config,get,yarn,config,options,vcores,key,string,o,c,out,content,to,string,pattern,p,pattern,compile,flink,job,manager,is,now,running,on,a,z,a,z0,9,0,9,matcher,matches,p,matcher,o,c,string,hostname,null,string,port,null,while,matches,find,hostname,matches,group,1,to,lower,case,port,matches,group,2,log,info,extracted,hostname,port,hostname,port,assert,assert,equals,unable,to,find,hostname,in,json,config,hostname,parsed,config,get,job,manager,options,address,key,assert,assert,equals,unable,to,find,port,in,json,config,port,parsed,config,get,job,manager,options,port,key,string,logs,test,base,utils,get,from,http,url,jobmanager,log,assert,assert,true,logs,contains,starting,yarn,application,master,assert,assert,true,logs,contains,starting,job,manager,assert,assert,true,logs,contains,starting,job,manager,web,frontend,container,id,task,manager,container,null,node,manager,node,manager,null,user,group,information,remote,ugi,null,nmtoken,identifier,nm,ident,null,try,remote,ugi,user,group,information,get,current,user,catch,ioexception,e,log,warn,unable,to,get,curr,user,e,assert,fail,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,manager,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,sleep,500,assert,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,assert,not,null,illegal,state,node,manager,yc,stop,list,container,id,to,stop,new,linked,list,container,id,to,stop,add,task,manager,container,stop,containers,request,scr,stop,containers,request,new,instance,to,stop,try,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,catch,throwable,e,log,warn,error,stopping,container,e,assert,fail,error,stopping,container,e,get,message,boolean,ok,false,do,log,debug,waiting,for,correct,order,of,events,output,err,content,to,string,string,o,err,content,to,string,int,killed,off,o,index,of,container,killed,by,the,application,master,if,killed,off,1,o,o,substring,killed,off,ok,o,index,of,launching,task,manager,0,sleep,1000,while,ok,runner,send,stop,try,runner,join,catch,interrupted,exception,e,log,warn,interrupted,while,stopping,runner,e,log,warn,stopped,system,set,out,system,set,err,o,c,out,content,to,string,string,e,c,err,content,to,string,log,info,sending,stdout,content,through,logger,n,n,n,n,o,c,log,info,sending,stderr,content,through,logger,n,n,n,n,e,c,assert,assert,true,expect,to,see,failed,container,e,c,contains,new,messages,from,the,yarn,cluster,assert,assert,true,expect,to,see,failed,container,e,c,contains,container,killed,by,the,application,master,assert,assert,true,expect,to,see,new,container,started,e,c,contains,launching,task,manager,e,c,contains,on,host,remote,ugi,get,token,identifiers,remove,nm,ident,log,info,finished,test,task,manager,failure
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1515709558;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1517300523;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1518245533;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1519819705;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1521255281;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1522660437;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1522757621;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1524386308;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1525357660;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1530395596;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", String.valueOf(taskManagerMemoryMB),_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory,_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,string,value,of,task,manager,memory,mb,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1547818098;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1547847142;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1548327929;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1548949269;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnClusterOffHeap() throws IOException;1550496538;Test per-job yarn cluster and memory calculations for off-heap use (see FLINK-7400) with the_same job as {@link #perJobYarnCluster()}.__<p>This ensures that with (any) pre-allocated off-heap memory by us, there is some off-heap_memory remaining for Flink's libraries. Creating task managers will thus fail if no off-heap_memory remains.;@Test_	public void perJobYarnClusterOffHeap() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(CliFrontend.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")___		_		final long taskManagerMemoryMB = 1024__		_		final long networkBuffersMB = TaskManagerServices_			.calculateNetworkBufferMemory(_				(taskManagerMemoryMB -_					ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()) << 20,_				new Configuration()) >> 20__		final long offHeapMemory = taskManagerMemoryMB_			- ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.defaultValue()_			_			- networkBuffersMB _			- 100_ __		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", taskManagerMemoryMB + "m",_				"-yD", "taskmanager.memory.off-heap=true",_				"-yD", "taskmanager.memory.size=" + offHeapMemory + "m",_				"-yD", "taskmanager.memory.preallocate=true", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,and,memory,calculations,for,off,heap,use,see,flink,7400,with,the,same,job,as,link,per,job,yarn,cluster,p,this,ensures,that,with,any,pre,allocated,off,heap,memory,by,us,there,is,some,off,heap,memory,remaining,for,flink,s,libraries,creating,task,managers,will,thus,fail,if,no,off,heap,memory,remains;test,public,void,per,job,yarn,cluster,off,heap,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,cli,frontend,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,final,long,task,manager,memory,mb,1024,final,long,network,buffers,mb,task,manager,services,calculate,network,buffer,memory,task,manager,memory,mb,resource,manager,options,default,value,20,new,configuration,20,final,long,off,heap,memory,task,manager,memory,mb,resource,manager,options,default,value,network,buffers,mb,100,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,task,manager,memory,mb,m,y,d,taskmanager,memory,off,heap,true,y,d,taskmanager,memory,size,off,heap,memory,m,y,d,taskmanager,memory,preallocate,true,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws IOException;1515709558;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws IOException {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,ioexception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster() throws IOException;1517300523;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() throws IOException {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,throws,ioexception,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1461059459;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1461347574;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1466166557;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1469059713;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1473084350;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1473157324;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1476111856;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout=60000) 	public void testDetachedPerJobYarnClusterWithStreamingJob();1486489641;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout=60000)_	public void testDetachedPerJobYarnClusterWithStreamingJob() {_		LOG.info("Starting testDetachedPerJobYarnClusterWithStreamingJob()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-streaming",_			new ContainsName(new String[] {"-WordCount.jar"}))__		Assert.assertNotNull("Could not find streaming wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnClusterWithStreamingJob()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,with,streaming,job,log,info,starting,test,detached,per,job,yarn,cluster,with,streaming,job,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,streaming,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,streaming,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster,with,streaming,job
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1495622548;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = YarnTestBase.findFile(_			".." + File.separator + "flink-examples" + File.separator + "flink-examples-batch",_			new ContainsName(new String[] {"-WordCount.jar"}))___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,file,separator,flink,examples,file,separator,flink,examples,batch,new,contains,name,new,string,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1496893136;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1497366084;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1499270430;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1499408671;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1501586640;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1502272383;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1502976333;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1508150892;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1514884774;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test(timeout = 60000) 	public void testDetachedPerJobYarnCluster();1514982309;Test a fire-and-forget job submission to a YARN cluster.;@Test(timeout = 60000)_	public void testDetachedPerJobYarnCluster() {_		LOG.info("Starting testDetachedPerJobYarnCluster()")___		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")___		Assert.assertNotNull("Could not find batch wordcount jar", exampleJarLocation)___		testDetachedPerJobYarnClusterInternal(exampleJarLocation.getAbsolutePath())___		LOG.info("Finished testDetachedPerJobYarnCluster()")__	};test,a,fire,and,forget,job,submission,to,a,yarn,cluster;test,timeout,60000,public,void,test,detached,per,job,yarn,cluster,log,info,starting,test,detached,per,job,yarn,cluster,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,batch,wordcount,jar,example,jar,location,test,detached,per,job,yarn,cluster,internal,example,jar,location,get,absolute,path,log,info,finished,test,detached,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1421845001;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Error while deploying YARN cluster: The specified queue 'doesntExist' does not exist. Available queues: default, qa-team, ", RunTypes.YARN_SESSION)__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,error,while,deploying,yarn,cluster,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,run,types
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1423681821;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		addTestAppender()__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", RunTypes.YARN_SESSION)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,add,test,appender,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,run,types,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1424778095;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		addTestAppender()__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", RunTypes.YARN_SESSION)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,add,test,appender,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,run,types,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1424789905;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		addTestAppender()__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", RunTypes.YARN_SESSION)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,add,test,appender,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,run,types,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1425404151;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		addTestAppender()__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", RunTypes.YARN_SESSION)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")___		ensureNoExceptionsInLogFiles()__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,add,test,appender,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,run,types,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,ensure,no,exceptions,in,log,files
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1461059459;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(FlinkYarnClient.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,flink,yarn,client,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1461347574;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1466166557;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1469059713;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1473084350;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueue();1473157324;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues: default, qa-team")__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,default,qa,team,log,info,finished,test,nonexisting,queue
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1476111856;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1486489641;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1495622548;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1496893136;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1497366084;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1499270430;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1499408671;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1501586640;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1502272383;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1502976333;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1508150892;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1514884774;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void testNonexistingQueueWARNmessage();1514982309;Test deployment to non-existing queue & ensure that the system logs a WARN message_for the user. (Users had unexpected behavior of Flink on YARN because they mistyped the_target queue. With an error message, we can help users identifying the issue);@Test_	public void testNonexistingQueueWARNmessage() {_		LOG.info("Starting testNonexistingQueueWARNmessage()")__		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "to unknown queue: doesntExist", null, RunTypes.YARN_SESSION, 1)__		checkForLogString("The specified queue 'doesntExist' does not exist. Available queues")__		LOG.info("Finished testNonexistingQueueWARNmessage()")__	};test,deployment,to,non,existing,queue,ensure,that,the,system,logs,a,warn,message,for,the,user,users,had,unexpected,behavior,of,flink,on,yarn,because,they,mistyped,the,target,queue,with,an,error,message,we,can,help,users,identifying,the,issue;test,public,void,test,nonexisting,queue,warnmessage,log,info,starting,test,nonexisting,queue,warnmessage,add,test,appender,yarn,cluster,descriptor,class,level,warn,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,to,unknown,queue,doesnt,exist,null,run,types,1,check,for,log,string,the,specified,queue,doesnt,exist,does,not,exist,available,queues,log,info,finished,test,nonexisting,queue,warnmessage
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1515709558;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Job execution complete",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,job,execution,complete,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1517300523;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1518245533;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1519819705;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1521255281;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1522660437;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = new File("target/programs/BatchWordCount.jar")__		Assert.assertNotNull("Could not find wordcount jar", exampleJarLocation)__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,new,file,target,programs,batch,word,count,jar,assert,assert,not,null,could,not,find,wordcount,jar,example,jar,location,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1522757621;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1524386308;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1525357660;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1530395596;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768,ytm,1024,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1547818098;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1547847142;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(), "-yt", flinkLibFolder.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1548327929;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1548949269;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(JobClient.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,job,client,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
YARNSessionCapacitySchedulerITCase -> @Test 	public void perJobYarnCluster() throws IOException;1550496538;Test per-job yarn cluster__<p>This also tests the prefixed CliFrontend options for the YARN case_We also test if the requested parallelism of 2 is passed through._The parallelism is requested at the YARN client (-ys).;@Test_	public void perJobYarnCluster() throws IOException {_		LOG.info("Starting perJobYarnCluster()")__		addTestAppender(CliFrontend.class, Level.INFO)__		File exampleJarLocation = getTestJarPath("BatchWordCount.jar")__		runWithArgs(new String[]{"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yt", flinkLibFolder.getAbsolutePath(),_				"-yt", flinkShadedHadoopDir.getAbsolutePath(),_				"-yn", "1",_				"-ys", "2", _				"-yjm", "768m",_				"-ytm", "1024m", exampleJarLocation.getAbsolutePath()},_			_			"Program execution finished",_			_			_			new String[]{"DataSink \\(.*\\) \\(1/1\\) switched to FINISHED"},_			RunTypes.CLI_FRONTEND, 0, true)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,p,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case,we,also,test,if,the,requested,parallelism,of,2,is,passed,through,the,parallelism,is,requested,at,the,yarn,client,ys;test,public,void,per,job,yarn,cluster,throws,ioexception,log,info,starting,per,job,yarn,cluster,add,test,appender,cli,frontend,class,level,info,file,example,jar,location,get,test,jar,path,batch,word,count,jar,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yt,flink,lib,folder,get,absolute,path,yt,flink,shaded,hadoop,dir,get,absolute,path,yn,1,ys,2,yjm,768m,ytm,1024m,example,jar,location,get,absolute,path,program,execution,finished,new,string,data,sink,1,1,switched,to,finished,run,types,0,true,log,info,finished,per,job,yarn,cluster
