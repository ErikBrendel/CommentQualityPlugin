# id;timestamp;commentText;codeText;commentWords;codeWords
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1422034750;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1422034750;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1423061851;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1424858499;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1424858532;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1425463229;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testQueryCluster()")__		ensureNoExceptionsInLogFiles()__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,run,types,log,info,finished,test,query,cluster,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1462389709;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1466152678;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1467379351;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1469630409;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1474401809;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1476266315;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1478286462;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1493975167;Test querying the YARN cluster.__This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332",null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1495702763;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1501083592;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1501088110;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1501237018;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1515686369;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1515770042;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster();1515770043;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1515770043;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1515770044;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1517237717;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1518945174;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1520030750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1521739913;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1522681180;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1525773113;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1525961911;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1530798894;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1531905191;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1540151936;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1547815932;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1547815933;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation() throws IOException;1548773096;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{_				"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-n", "5",_				"-jm", "256m",_				"-tm", "1585m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,n,5,jm,256m,tm,1585m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1493975167;Test the YARN Java API;@Test_	public void testJavaAPI() throws Exception {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1495702763;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for (int second = 0_ second < waitTime * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if (status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if (second > waitTime) {_				_				Assert.fail("The custer didn't start after " + waitTime + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1501083592;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploySessionCluster()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for (int second = 0_ second < waitTime * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if (status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if (second > waitTime) {_				_				Assert.fail("The custer didn't start after " + waitTime + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1501088110;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for (int second = 0_ second < waitTime * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if (status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if (second > waitTime) {_				_				Assert.fail("The custer didn't start after " + waitTime + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1501237018;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor(configuration, confDirPath)__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for (int second = 0_ second < waitTime * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if (status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if (second > waitTime) {_				_				Assert.fail("The custer didn't start after " + waitTime + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,configuration,conf,dir,path,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1515686369;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getJobManagerAddress())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1515770042;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getJobManagerAddress())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1515770043;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getJobManagerAddress())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1515770043;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getJobManagerAddress())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1515770044;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getJobManagerAddress())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1517237717;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1518945174;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()__		final YarnClient yarnClient = YarnClient.createYarnClient()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			confDirPath,_			yarnClient)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,final,yarn,client,yarn,client,yarn,client,create,yarn,client,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,conf,dir,path,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1520030750;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1521739913;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new YarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1522681180;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1525773113;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1525961911;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1530798894;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnCluster = null__			try {_				yarnCluster = clusterDescriptor.deploySessionCluster(clusterSpecification)__			} catch (Exception e) {_				LOG.warn("Failing test", e)__				Assert.fail("Error while deploying YARN cluster: " + e.getMessage())__			}_			GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__			for (int second = 0_ second < waitTime * 2_ second++) { _				try {_					Thread.sleep(1000)__				} catch (InterruptedException e) {_					LOG.warn("Interrupted", e)__				}_				GetClusterStatusResponse status = yarnCluster.getClusterStatus()__				if (status != null && status.equals(expectedStatus)) {_					LOG.info("ClusterClient reached status " + status)__					break_ _				}_				if (second > waitTime) {_					_					Assert.fail("The custer didn't start after " + waitTime + " seconds")__				}_			}__			_			Assert.assertNotNull(yarnCluster.getClusterConnectionInfo())__			Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___			LOG.info("Shutting down cluster. All tests passed")__			_			yarnCluster.shutdown()__		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,null,try,yarn,cluster,cluster,descriptor,deploy,session,cluster,cluster,specification,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1531905191;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnClusterClient = null__			try {_				yarnClusterClient = clusterDescriptor.deploySessionCluster(clusterSpecification)___				GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__				for (int second = 0_ second < waitTime * 2_ second++) { _					try {_						Thread.sleep(1000)__					} catch (InterruptedException e) {_						LOG.warn("Interrupted", e)__					}_					GetClusterStatusResponse status = yarnClusterClient.getClusterStatus()__					if (status != null && status.equals(expectedStatus)) {_						LOG.info("ClusterClient reached status " + status)__						break_ _					}_					if (second > waitTime) {_						_						Assert.fail("The custer didn't start after " + waitTime + " seconds")__					}_				}__				_				Assert.assertNotNull(yarnClusterClient.getClusterConnectionInfo())__				Assert.assertNotNull(yarnClusterClient.getWebInterfaceURL())__				LOG.info("All tests passed.")__			} finally {_				if (yarnClusterClient != null) {_					_					LOG.info("Shutting down the Flink Yarn application.")__					yarnClusterClient.shutDownCluster()__					yarnClusterClient.shutdown()__				}_			}_		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,client,null,try,yarn,cluster,client,cluster,descriptor,deploy,session,cluster,cluster,specification,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,client,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,client,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,client,get,web,interface,url,log,info,all,tests,passed,finally,if,yarn,cluster,client,null,log,info,shutting,down,the,flink,yarn,application,yarn,cluster,client,shut,down,cluster,yarn,cluster,client,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1540151936;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnClusterClient = null__			try {_				yarnClusterClient = clusterDescriptor.deploySessionCluster(clusterSpecification)___				GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__				for (int second = 0_ second < waitTime * 2_ second++) { _					try {_						Thread.sleep(1000)__					} catch (InterruptedException e) {_						LOG.warn("Interrupted", e)__					}_					GetClusterStatusResponse status = yarnClusterClient.getClusterStatus()__					if (status != null && status.equals(expectedStatus)) {_						LOG.info("ClusterClient reached status " + status)__						break_ _					}_					if (second > waitTime) {_						_						Assert.fail("The custer didn't start after " + waitTime + " seconds")__					}_				}__				_				Assert.assertNotNull(yarnClusterClient.getClusterConnectionInfo())__				Assert.assertNotNull(yarnClusterClient.getWebInterfaceURL())__				LOG.info("All tests passed.")__			} finally {_				if (yarnClusterClient != null) {_					_					LOG.info("Shutting down the Flink Yarn application.")__					yarnClusterClient.shutDownCluster()__					yarnClusterClient.shutdown()__				}_			}_		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,client,null,try,yarn,cluster,client,cluster,descriptor,deploy,session,cluster,cluster,specification,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,client,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,client,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,client,get,web,interface,url,log,info,all,tests,passed,finally,if,yarn,cluster,client,null,log,info,shutting,down,the,flink,yarn,application,yarn,cluster,client,shut,down,cluster,yarn,cluster,client,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI() throws Exception;1547815932;Test the YARN Java API.;@Test_	public void testJavaAPI() throws Exception {_		final int waitTime = 15__		LOG.info("Starting testJavaAPI()")___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		Configuration configuration = GlobalConfiguration.loadConfiguration()___		try (final AbstractYarnClusterDescriptor clusterDescriptor = new LegacyYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)) {_			Assert.assertNotNull("unable to get yarn client", clusterDescriptor)__			clusterDescriptor.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__			clusterDescriptor.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___			final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_				.setMasterMemoryMB(768)_				.setTaskManagerMemoryMB(1024)_				.setNumberTaskManagers(1)_				.setSlotsPerTaskManager(1)_				.createClusterSpecification()__			_			ClusterClient<ApplicationId> yarnClusterClient = null__			try {_				yarnClusterClient = clusterDescriptor.deploySessionCluster(clusterSpecification)___				GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__				for (int second = 0_ second < waitTime * 2_ second++) { _					try {_						Thread.sleep(1000)__					} catch (InterruptedException e) {_						LOG.warn("Interrupted", e)__					}_					GetClusterStatusResponse status = yarnClusterClient.getClusterStatus()__					if (status != null && status.equals(expectedStatus)) {_						LOG.info("ClusterClient reached status " + status)__						break_ _					}_					if (second > waitTime) {_						_						Assert.fail("The custer didn't start after " + waitTime + " seconds")__					}_				}__				_				Assert.assertNotNull(yarnClusterClient.getClusterConnectionInfo())__				Assert.assertNotNull(yarnClusterClient.getWebInterfaceURL())__				LOG.info("All tests passed.")__			} finally {_				if (yarnClusterClient != null) {_					_					LOG.info("Shutting down the Flink Yarn application.")__					yarnClusterClient.shutDownCluster()__					yarnClusterClient.shutdown()__				}_			}_		}_		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,throws,exception,final,int,wait,time,15,log,info,starting,test,java,api,string,conf,dir,path,system,getenv,config,constants,configuration,configuration,global,configuration,load,configuration,try,final,abstract,yarn,cluster,descriptor,cluster,descriptor,new,legacy,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,cluster,descriptor,cluster,descriptor,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,cluster,descriptor,add,ship,files,arrays,as,list,flink,lib,folder,list,files,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,cluster,client,application,id,yarn,cluster,client,null,try,yarn,cluster,client,cluster,descriptor,deploy,session,cluster,cluster,specification,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,wait,time,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,client,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,wait,time,assert,fail,the,custer,didn,t,start,after,wait,time,seconds,assert,assert,not,null,yarn,cluster,client,get,cluster,connection,info,assert,assert,not,null,yarn,cluster,client,get,web,interface,url,log,info,all,tests,passed,finally,if,yarn,cluster,client,null,log,info,shutting,down,the,flink,yarn,application,yarn,cluster,client,shut,down,cluster,yarn,cluster,client,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1422034750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Error while deploying YARN cluster: There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,error,while,deploying,yarn,cluster,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256,run,types,log,info,finished,testfull,alloc
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1422034750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,if,ignore,on,travis,return,add,test,appender,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,run,types,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1423061851;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,if,ignore,on,travis,return,add,test,appender,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,run,types,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1424858499;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,if,ignore,on,travis,return,add,test,appender,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,run,types,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1424858532;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,if,ignore,on,travis,return,add,test,appender,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,run,types,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Test 	public void testfullAlloc();1425463229;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Test_	public void testfullAlloc() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__		ensureNoExceptionsInLogFiles()__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;test,public,void,testfull,alloc,if,ignore,on,travis,return,add,test,appender,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,run,types,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode() throws InterruptedException;1478286462;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if(yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode() throws InterruptedException;1493975167;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if(yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1422034750;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1422034750;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1423061851;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1424858499;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1424858532;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup
YARNSessionFIFOITCase -> @Test 	public void testClientStartup();1425463229;Test regular operation, including command line parameter parsing.;@Test_	public void testClientStartup() {_		LOG.info("Starting testClientStartup()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_						"-n", "1",_						"-jm", "512",_						"-tm", "1024"},_				"Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testClientStartup()")__		ensureNoExceptionsInLogFiles()__	};test,regular,operation,including,command,line,parameter,parsing;test,public,void,test,client,startup,log,info,starting,test,client,startup,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,client,startup,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1422034750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Error while deploying YARN cluster: This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,error,while,deploying,yarn,cluster,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available,run,types,log,info,finished,test,resource,computation
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1422034750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1423061851;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1424858499;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1424858532;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testResourceComputation();1425463229;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Test_	public void testResourceComputation() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;test,public,void,test,resource,computation,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1462389709;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(FlinkYarnClient.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,flink,yarn,client,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1466152678;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1467379351;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1469630409;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1474401809;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1476266315;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1478286462;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1493975167;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1495702763;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1501083592;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1501088110;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1501237018;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1515686369;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1515770042;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8.5 GB of memory)") 	@Test 	public void testResourceComputation();1515770043;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_5 TaskManagers with 1585 MB__<p>user sees a total request of: 8181 MB (fits)_system sees a total request of: 8437 (doesn't fit due to min alloc mb);@Ignore("The test is too resource consuming (8.5 GB of memory)")_	@Test_	public void testResourceComputation() {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testResourceComputation()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "5",_				"-jm", "256",_				"-tm", "1585"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testResourceComputation()")__		checkForLogString("This YARN session requires 8437MB of memory in the cluster. There are currently only 8192MB available.")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,5,task,managers,with,1585,mb,p,user,sees,a,total,request,of,8181,mb,fits,system,sees,a,total,request,of,8437,doesn,t,fit,due,to,min,alloc,mb;ignore,the,test,is,too,resource,consuming,8,5,gb,of,memory,test,public,void,test,resource,computation,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,test,resource,computation,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,5,jm,256,tm,1585,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,test,resource,computation,check,for,log,string,this,yarn,session,requires,8437mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1515770043;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1515770044;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1517237717;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1518945174;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		if (!flip6) {_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,if,flip6,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1520030750;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		if (!flip6) {_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,if,flip6,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1521739913;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		if (!flip6) {_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_						new String[]{"YARN Application Master started"}, "jobmanager.log") &&_						verifyStringsInNamedLogFiles(_								new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_			LOG.info("Still waiting for JM/TM to initialize...")__			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,if,flip6,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1522681180;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		if (!isNewMode) {_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_						new String[]{"YARN Application Master started"}, "jobmanager.log") &&_						verifyStringsInNamedLogFiles(_								new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_			LOG.info("Still waiting for JM/TM to initialize...")__			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,if,is,new,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1525773113;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768")___		args.add("-tm")__		args.add("1024")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		if (!isNewMode) {_			checkForLogString("The Flink YARN client has been started in detached mode")___			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}__			_			long startTime = System.nanoTime()__			while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_					new String[]{"YARN Application Master started"}, "jobmanager.log") &&_					verifyStringsInNamedLogFiles(_						new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_				LOG.info("Still waiting for JM/TM to initialize...")__				sleep(500)__			}_		}__		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		if (isNewMode) {_			_			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{isNewMode ? "JobManager successfully registered at ResourceManager"_					: "YARN Application Master started"}, "jobmanager.log") &&_				verifyStringsInNamedLogFiles(_					new String[]{isNewMode ? "Successful registration at job manager"_						: "Starting TaskManager actor"}, "taskmanager.log"))) {_			LOG.info("Still waiting for JM/TM to initialize...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768,args,add,tm,args,add,1024,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,if,is,new,mode,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,if,is,new,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,is,new,mode,job,manager,successfully,registered,at,resource,manager,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,is,new,mode,successful,registration,at,job,manager,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1525961911;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768")___		args.add("-tm")__		args.add("1024")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		if (!isNewMode) {_			checkForLogString("The Flink YARN client has been started in detached mode")___			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}__			_			long startTime = System.nanoTime()__			while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_					new String[]{"YARN Application Master started"}, "jobmanager.log") &&_					verifyStringsInNamedLogFiles(_						new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_				LOG.info("Still waiting for JM/TM to initialize...")__				sleep(500)__			}_		}__		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		if (isNewMode) {_			_			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768,args,add,tm,args,add,1024,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,if,is,new,mode,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,if,is,new,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1530798894;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		if (!isNewMode) {_			checkForLogString("The Flink YARN client has been started in detached mode")___			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}__			_			long startTime = System.nanoTime()__			while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_					new String[]{"YARN Application Master started"}, "jobmanager.log") &&_					verifyStringsInNamedLogFiles(_						new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_				LOG.info("Still waiting for JM/TM to initialize...")__				sleep(500)__			}_		}__		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		if (isNewMode) {_			_			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,if,is,new,mode,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,if,is,new,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1531905191;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		if (!isNewMode) {_			checkForLogString("The Flink YARN client has been started in detached mode")___			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}__			_			long startTime = System.nanoTime()__			while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_				!(verifyStringsInNamedLogFiles(_					new String[]{"YARN Application Master started"}, "jobmanager.log") &&_					verifyStringsInNamedLogFiles(_						new String[]{"Starting TaskManager actor"}, "taskmanager.log"))) {_				LOG.info("Still waiting for JM/TM to initialize...")__				sleep(500)__			}_		}__		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		if (isNewMode) {_			_			_			LOG.info("Waiting until two containers are running")__			_			while (getRunningContainers() < 2) {_				sleep(500)__			}_		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,if,is,new,mode,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,yarn,application,master,started,jobmanager,log,verify,strings,in,named,log,files,new,string,starting,task,manager,actor,taskmanager,log,log,info,still,waiting,for,jm,tm,to,initialize,sleep,500,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,if,is,new,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1540151936;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		_		_		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1547815932;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		_		_		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1547815933;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		_		_		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException, IOException;1548773096;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException, IOException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)___		File exampleJarLocation = getTestJarPath("StreamingWordCount.jar")__		_		File tmpInFile = tmp.newFile()__		FileUtils.writeStringToFile(tmpInFile, WordCountData.TEXT)___		ArrayList<String> args = new ArrayList<>()__		args.add("-j")__		args.add(flinkUberjar.getAbsolutePath())___		args.add("-t")__		args.add(flinkLibFolder.getAbsolutePath())___		args.add("-t")__		args.add(flinkShadedHadoopDir.getAbsolutePath())___		args.add("-n")__		args.add("1")___		args.add("-jm")__		args.add("768m")___		args.add("-tm")__		args.add("1024m")___		if (SecureTestEnvironment.getTestKeytab() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_KEYTAB.key() + "=" + SecureTestEnvironment.getTestKeytab())__		}_		if (SecureTestEnvironment.getHadoopServicePrincipal() != null) {_			args.add("-D" + SecurityOptions.KERBEROS_LOGIN_PRINCIPAL.key() + "=" + SecureTestEnvironment.getHadoopServicePrincipal())__		}_		args.add("--name")__		args.add("MyCustomName")___		args.add("--detached")___		Runner clusterRunner =_			startWithArgs(_				args.toArray(new String[args.size()]),_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		clusterRunner.join()___		_		_		Runner jobRunner = startWithArgs(new String[]{"run",_				"--detached", exampleJarLocation.getAbsolutePath(),_				"--input", tmpInFile.getAbsoluteFile().toString()},_			"Job has been submitted with JobID", RunTypes.CLI_FRONTEND)___		jobRunner.join()___		_		_		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		long startTime = System.nanoTime()__		while (System.nanoTime() - startTime < TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS) &&_			!(verifyStringsInNamedLogFiles(_				new String[]{"switched from state RUNNING to FINISHED"}, "jobmanager.log"))) {_			LOG.info("Still waiting for cluster to finish job...")__			sleep(500)__		}__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0 &&_					yc.getApplications(EnumSet.of(YarnApplicationState.FINISHED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}_		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,ioexception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,file,example,jar,location,get,test,jar,path,streaming,word,count,jar,file,tmp,in,file,tmp,new,file,file,utils,write,string,to,file,tmp,in,file,word,count,data,text,array,list,string,args,new,array,list,args,add,j,args,add,flink,uberjar,get,absolute,path,args,add,t,args,add,flink,lib,folder,get,absolute,path,args,add,t,args,add,flink,shaded,hadoop,dir,get,absolute,path,args,add,n,args,add,1,args,add,jm,args,add,768m,args,add,tm,args,add,1024m,if,secure,test,environment,get,test,keytab,null,args,add,d,security,options,key,secure,test,environment,get,test,keytab,if,secure,test,environment,get,hadoop,service,principal,null,args,add,d,security,options,key,secure,test,environment,get,hadoop,service,principal,args,add,name,args,add,my,custom,name,args,add,detached,runner,cluster,runner,start,with,args,args,to,array,new,string,args,size,flink,job,manager,is,now,running,on,run,types,cluster,runner,join,runner,job,runner,start,with,args,new,string,run,detached,example,jar,location,get,absolute,path,input,tmp,in,file,get,absolute,file,to,string,job,has,been,submitted,with,job,id,run,types,job,runner,join,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,long,start,time,system,nano,time,while,system,nano,time,start,time,time,unit,nanoseconds,convert,10,time,unit,seconds,verify,strings,in,named,log,files,new,string,switched,from,state,running,to,finished,jobmanager,log,log,info,still,waiting,for,cluster,to,finish,job,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,yc,get,applications,enum,set,of,yarn,application,state,finished,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1422034750;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1422034750;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1423061851;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1424858499;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1424858532;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1425463229;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-n", "1",_				"-jm", "512",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", RunTypes.YARN_SESSION)__		LOG.info("Finished testNonexistingQueue()")__		ensureNoExceptionsInLogFiles()__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,1,jm,512,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,run,types,log,info,finished,test,nonexisting,queue,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1462389709;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1466152678;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1467379351;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1469630409;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testNonexistingQueue();1474401809;Test deployment to non-existing queue. (user-reported error)_Deployment to the queue is possible because there are no queues, so we don't check.;@Test_	public void testNonexistingQueue() {_		LOG.info("Starting testNonexistingQueue()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-n", "1",_				"-jm", "768",_				"-tm", "1024",_				"-qu", "doesntExist"}, "Number of connected TaskManagers changed to 1. Slots available: 1", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testNonexistingQueue()")__	};test,deployment,to,non,existing,queue,user,reported,error,deployment,to,the,queue,is,possible,because,there,are,no,queues,so,we,don,t,check;test,public,void,test,nonexisting,queue,log,info,starting,test,nonexisting,queue,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,qu,doesnt,exist,number,of,connected,task,managers,changed,to,1,slots,available,1,null,run,types,0,log,info,finished,test,nonexisting,queue
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1422034750;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Error while deploying YARN cluster: This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.", RunTypes.YARN_SESSION)__		LOG.info("Finished testMoreNodesThanAvailable()")__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,error,while,deploying,yarn,cluster,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available,run,types,log,info,finished,test,more,nodes,than,available
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1422034750;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testMoreNodesThanAvailable()")__		checkForLogString("This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.")__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,more,nodes,than,available,check,for,log,string,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1423061851;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testMoreNodesThanAvailable()")__		checkForLogString("This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.")__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,more,nodes,than,available,check,for,log,string,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1424858499;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testMoreNodesThanAvailable()")__		checkForLogString("This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.")__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,more,nodes,than,available,check,for,log,string,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1424858532;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testMoreNodesThanAvailable()")__		checkForLogString("This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.")__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,more,nodes,than,available,check,for,log,string,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available
YARNSessionFIFOITCase -> @Test 	public void testMoreNodesThanAvailable();1425463229;Test requesting more resources than available.;@Test_	public void testMoreNodesThanAvailable() {_		if(ignoreOnTravis()) {_			return__		}_		addTestAppender()__		LOG.info("Starting testMoreNodesThanAvailable()")__		runWithArgs(new String[] {"-j", flinkUberjar.getAbsolutePath(),_				"-n", "10",_				"-jm", "512",_				"-tm", "1024"}, "Number of connected TaskManagers changed to", RunTypes.YARN_SESSION)_ _		LOG.info("Finished testMoreNodesThanAvailable()")__		checkForLogString("This YARN session requires 10752MB of memory in the cluster. There are currently only 8192MB available.")__		ensureNoExceptionsInLogFiles()__	};test,requesting,more,resources,than,available;test,public,void,test,more,nodes,than,available,if,ignore,on,travis,return,add,test,appender,log,info,starting,test,more,nodes,than,available,run,with,args,new,string,j,flink,uberjar,get,absolute,path,n,10,jm,512,tm,1024,number,of,connected,task,managers,changed,to,run,types,log,info,finished,test,more,nodes,than,available,check,for,log,string,this,yarn,session,requires,10752mb,of,memory,in,the,cluster,there,are,currently,only,8192mb,available,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1422034750;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1422034750;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1423061851;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1424858499;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1424858532;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster
YARNSessionFIFOITCase -> @Test 	public void perJobYarnCluster();1425463229;Test per-job yarn cluster__This also tests the prefixed CliFrontend options for the YARN case;@Test_	public void perJobYarnCluster() {_		LOG.info("Starting perJobYarnCluster()")__		File exampleJarLocation = YarnTestBase.findFile(".", new ContainsName("-WordCount.jar", "streaming"))_ _		runWithArgs(new String[] {"run", "-m", "yarn-cluster",_				"-yj", flinkUberjar.getAbsolutePath(),_				"-yn", "1",_				"-yjm", "512",_				"-ytm", "1024", exampleJarLocation.getAbsolutePath()}, "Job execution switched to status FINISHED.", RunTypes.CLI_FRONTEND)__		LOG.info("Finished perJobYarnCluster()")__		ensureNoExceptionsInLogFiles()__	};test,per,job,yarn,cluster,this,also,tests,the,prefixed,cli,frontend,options,for,the,yarn,case;test,public,void,per,job,yarn,cluster,log,info,starting,per,job,yarn,cluster,file,example,jar,location,yarn,test,base,find,file,new,contains,name,word,count,jar,streaming,run,with,args,new,string,run,m,yarn,cluster,yj,flink,uberjar,get,absolute,path,yn,1,yjm,512,ytm,1024,example,jar,location,get,absolute,path,job,execution,switched,to,status,finished,run,types,log,info,finished,per,job,yarn,cluster,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1495702763;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1501083592;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1501088110;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1501237018;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1515686369;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1515770042;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout = 60000)  	public void testDetachedMode() throws InterruptedException;1515770043;Test regular operation, including command line parameter parsing.;@Test(timeout = 60000) _	public void testDetachedMode() throws InterruptedException {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner =_			startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		_		runner.join()__		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while (getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(YARN_CONFIGURATION)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while (yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch (Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			Configuration configuration = GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(configuration.getString(YarnConfigOptions.PROPERTIES_FILE_LOCATION))__				if (yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,throws,interrupted,exception,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,runner,join,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,configuration,configuration,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,configuration,get,string,yarn,config,options,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1515770043;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1515770044;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1517237717;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1518945174;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1520030750;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1521739913;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1522681180;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1525773113;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1525961911;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1530798894;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1531905191;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1540151936;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1547815932;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1547815933;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Test 	public void testQueryCluster() throws IOException;1548773096;Test querying the YARN cluster.__<p>This test validates through 666*2 cores in the "cluster".;@Test_	public void testQueryCluster() throws IOException {_		LOG.info("Starting testQueryCluster()")__		runWithArgs(new String[] {"-q"}, "Summary: totalMemory 8192 totalCores 1332", null, RunTypes.YARN_SESSION, 0)_ _		LOG.info("Finished testQueryCluster()")__	};test,querying,the,yarn,cluster,p,this,test,validates,through,666,2,cores,in,the,cluster;test,public,void,test,query,cluster,throws,ioexception,log,info,starting,test,query,cluster,run,with,args,new,string,q,summary,total,memory,8192,total,cores,1332,null,run,types,0,log,info,finished,test,query,cluster
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1462389709;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(FlinkYarnClient.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,flink,yarn,client,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1466152678;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1467379351;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1469630409;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1474401809;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1476266315;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1478286462;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1493975167;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1495702763;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1501083592;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1501088110;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1501237018;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1515686369;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1515770042;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(YarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc();1515770043;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1422034750;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1422034750;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,object,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1423061851;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,object,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1424858499;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,object,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1424858532;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,object,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1425463229;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(512)__		flinkYarnClient.setTaskManagerMemory(512)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfigurationObject(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy(null)__		} catch (Exception e) {_			System.err.println("Error while deploying YARN cluster: "+e.getMessage())__			e.printStackTrace(System.err)__			Assert.fail()__		}_		FlinkYarnClusterStatus expectedStatus = new FlinkYarnClusterStatus(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__				Thread.interrupted()__			}_			FlinkYarnClusterStatus status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")___		ensureNoExceptionsInLogFiles()__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,512,flink,yarn,client,set,task,manager,memory,512,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,object,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,null,catch,exception,e,system,err,println,error,while,deploying,yarn,cluster,e,get,message,e,print,stack,trace,system,err,assert,fail,flink,yarn,cluster,status,expected,status,new,flink,yarn,cluster,status,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,thread,interrupted,flink,yarn,cluster,status,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api,ensure,no,exceptions,in,log,files
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1462389709;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractFlinkYarnClient flinkYarnClient = FlinkYarnSessionCli.getFlinkYarnClient()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.setShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		AbstractFlinkYarnCluster yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__			yarnCluster.connectToCluster()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("Cluster reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown(false)__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,flink,yarn,client,flink,yarn,client,flink,yarn,session,cli,get,flink,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,set,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,yarn,cluster,connect,to,cluster,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,false,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1466152678;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.setShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,set,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1467379351;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1469630409;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1474401809;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1476266315;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test 	public void testJavaAPI();1478286462;Test the YARN Java API;@Test_	public void testJavaAPI() {_		final int WAIT_TIME = 15__		LOG.info("Starting testJavaAPI()")___		AbstractYarnClusterDescriptor flinkYarnClient = new YarnClusterDescriptor()__		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)__		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		_		ClusterClient yarnCluster = null__		try {_			yarnCluster = flinkYarnClient.deploy()__		} catch (Exception e) {_			LOG.warn("Failing test", e)__			Assert.fail("Error while deploying YARN cluster: "+e.getMessage())__		}_		GetClusterStatusResponse expectedStatus = new GetClusterStatusResponse(1, 1)__		for(int second = 0_ second < WAIT_TIME * 2_ second++) { _			try {_				Thread.sleep(1000)__			} catch (InterruptedException e) {_				LOG.warn("Interrupted", e)__			}_			GetClusterStatusResponse status = yarnCluster.getClusterStatus()__			if(status != null && status.equals(expectedStatus)) {_				LOG.info("ClusterClient reached status " + status)__				break_ _			}_			if(second > WAIT_TIME) {_				_				Assert.fail("The custer didn't start after " + WAIT_TIME + " seconds")__			}_		}__		_		Assert.assertNotNull(yarnCluster.getJobManagerAddress())__		Assert.assertNotNull(yarnCluster.getWebInterfaceURL())___		LOG.info("Shutting down cluster. All tests passed")__		_		yarnCluster.shutdown()__		LOG.info("Finished testJavaAPI()")__	};test,the,yarn,java,api;test,public,void,test,java,api,final,int,15,log,info,starting,test,java,api,abstract,yarn,cluster,descriptor,flink,yarn,client,new,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,try,yarn,cluster,flink,yarn,client,deploy,catch,exception,e,log,warn,failing,test,e,assert,fail,error,while,deploying,yarn,cluster,e,get,message,get,cluster,status,response,expected,status,new,get,cluster,status,response,1,1,for,int,second,0,second,2,second,try,thread,sleep,1000,catch,interrupted,exception,e,log,warn,interrupted,e,get,cluster,status,response,status,yarn,cluster,get,cluster,status,if,status,null,status,equals,expected,status,log,info,cluster,client,reached,status,status,break,if,second,assert,fail,the,custer,didn,t,start,after,seconds,assert,assert,not,null,yarn,cluster,get,job,manager,address,assert,assert,not,null,yarn,cluster,get,web,interface,url,log,info,shutting,down,cluster,all,tests,passed,yarn,cluster,shutdown,log,info,finished,test,java,api
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1462389709;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		Assert.assertFalse("The runner should detach.", runner.isAlive())___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,assert,assert,false,the,runner,should,detach,runner,is,alive,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1466152678;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1467379351;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1469630409;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}_		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1474401809;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		Runner runner = startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if(yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,runner,runner,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Test(timeout=60000)  	public void testDetachedMode();1476266315;Test regular operation, including command line parameter parsing.;@Test(timeout=60000) _	public void testDetachedMode() {_		LOG.info("Starting testDetachedMode()")__		addTestAppender(FlinkYarnSessionCli.class, Level.INFO)__		startWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(),_						"-t", flinkLibFolder.getAbsolutePath(),_						"-n", "1",_						"-jm", "768",_						"-tm", "1024",_						"--name", "MyCustomName", _						"--detached"},_				"Flink JobManager is now running on", RunTypes.YARN_SESSION)___		checkForLogString("The Flink YARN client has been started in detached mode")___		LOG.info("Waiting until two containers are running")__		_		while(getRunningContainers() < 2) {_			sleep(500)__		}__		_		sleep(2000)__		LOG.info("Two containers are running. Killing the application")___		_		try {_			YarnClient yc = YarnClient.createYarnClient()__			yc.init(yarnConfiguration)__			yc.start()__			List<ApplicationReport> apps = yc.getApplications(EnumSet.of(YarnApplicationState.RUNNING))__			Assert.assertEquals(1, apps.size())_ _			ApplicationReport app = apps.get(0)___			Assert.assertEquals("MyCustomName", app.getName())__			ApplicationId id = app.getApplicationId()__			yc.killApplication(id)___			while(yc.getApplications(EnumSet.of(YarnApplicationState.KILLED)).size() == 0) {_				sleep(500)__			}_		} catch(Throwable t) {_			LOG.warn("Killing failed", t)__			Assert.fail()__		} finally {__			_			String confDirPath = System.getenv("FLINK_CONF_DIR")__			File configDirectory = new File(confDirPath)__			LOG.info("testDetachedPerJobYarnClusterInternal: Using configuration directory " + configDirectory.getAbsolutePath())___			_			LOG.info("testDetachedPerJobYarnClusterInternal: Trying to load configuration file")__			GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___			try {_				File yarnPropertiesFile = FlinkYarnSessionCli.getYarnPropertiesLocation(GlobalConfiguration.loadConfiguration())__				if(yarnPropertiesFile.exists()) {_					LOG.info("testDetachedPerJobYarnClusterInternal: Cleaning up temporary Yarn address reference: {}", yarnPropertiesFile.getAbsolutePath())__					yarnPropertiesFile.delete()__				}_			} catch (Exception e) {_				LOG.warn("testDetachedPerJobYarnClusterInternal: Exception while deleting the JobManager address file", e)__			}__		}__		LOG.info("Finished testDetachedMode()")__	};test,regular,operation,including,command,line,parameter,parsing;test,timeout,60000,public,void,test,detached,mode,log,info,starting,test,detached,mode,add,test,appender,flink,yarn,session,cli,class,level,info,start,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,1,jm,768,tm,1024,name,my,custom,name,detached,flink,job,manager,is,now,running,on,run,types,check,for,log,string,the,flink,yarn,client,has,been,started,in,detached,mode,log,info,waiting,until,two,containers,are,running,while,get,running,containers,2,sleep,500,sleep,2000,log,info,two,containers,are,running,killing,the,application,try,yarn,client,yc,yarn,client,create,yarn,client,yc,init,yarn,configuration,yc,start,list,application,report,apps,yc,get,applications,enum,set,of,yarn,application,state,running,assert,assert,equals,1,apps,size,application,report,app,apps,get,0,assert,assert,equals,my,custom,name,app,get,name,application,id,id,app,get,application,id,yc,kill,application,id,while,yc,get,applications,enum,set,of,yarn,application,state,killed,size,0,sleep,500,catch,throwable,t,log,warn,killing,failed,t,assert,fail,finally,string,conf,dir,path,system,getenv,file,config,directory,new,file,conf,dir,path,log,info,test,detached,per,job,yarn,cluster,internal,using,configuration,directory,config,directory,get,absolute,path,log,info,test,detached,per,job,yarn,cluster,internal,trying,to,load,configuration,file,global,configuration,load,configuration,config,directory,get,absolute,path,try,file,yarn,properties,file,flink,yarn,session,cli,get,yarn,properties,location,global,configuration,load,configuration,if,yarn,properties,file,exists,log,info,test,detached,per,job,yarn,cluster,internal,cleaning,up,temporary,yarn,address,reference,yarn,properties,file,get,absolute,path,yarn,properties,file,delete,catch,exception,e,log,warn,test,detached,per,job,yarn,cluster,internal,exception,while,deleting,the,job,manager,address,file,e,log,info,finished,test,detached,mode
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1515770043;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1515770044;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1517237717;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1518945174;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1520030750;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1521739913;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1522681180;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1525773113;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1525961911;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256",_				"-tm", "3840"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256,tm,3840,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1530798894;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1531905191;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1540151936;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1547815932;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1547815933;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{"-j", flinkUberjar.getAbsolutePath(), "-t", flinkLibFolder.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
YARNSessionFIFOITCase -> @Ignore("The test is too resource consuming (8 GB of memory)") 	@Test 	public void testfullAlloc() throws IOException;1548773096;The test cluster has the following resources:_- 2 Nodes with 4096 MB each._- RM_SCHEDULER_MINIMUM_ALLOCATION_MB is 512__<p>We allocate:_1 JobManager with 256 MB (will be automatically upgraded to 512 due to min alloc mb)_2 TaskManagers with 3840 MB__<p>the user sees a total request of: 7936 MB (fits)_the system sees a request of: 8192 MB (fits)_HOWEVER: one machine is going to need 3840 + 512 = 4352 MB, which doesn't fit.__<p>--> check if the system properly rejects allocating this session.;@Ignore("The test is too resource consuming (8 GB of memory)")_	@Test_	public void testfullAlloc() throws IOException {_		addTestAppender(AbstractYarnClusterDescriptor.class, Level.WARN)__		LOG.info("Starting testfullAlloc()")__		runWithArgs(new String[]{_				"-j", flinkUberjar.getAbsolutePath(),_				"-t", flinkLibFolder.getAbsolutePath(),_				"-t", flinkShadedHadoopDir.getAbsolutePath(),_				"-n", "2",_				"-jm", "256m",_				"-tm", "3840m"}, "Number of connected TaskManagers changed to", null, RunTypes.YARN_SESSION, 0)__		LOG.info("Finished testfullAlloc()")__		checkForLogString("There is not enough memory available in the YARN cluster. The TaskManager(s) require 3840MB each. NodeManagers available: [4096, 4096]\n" +_				"After allocating the JobManager (512MB) and (1/2) TaskManagers, the following NodeManagers are available: [3584, 256]")__	};the,test,cluster,has,the,following,resources,2,nodes,with,4096,mb,each,is,512,p,we,allocate,1,job,manager,with,256,mb,will,be,automatically,upgraded,to,512,due,to,min,alloc,mb,2,task,managers,with,3840,mb,p,the,user,sees,a,total,request,of,7936,mb,fits,the,system,sees,a,request,of,8192,mb,fits,however,one,machine,is,going,to,need,3840,512,4352,mb,which,doesn,t,fit,p,check,if,the,system,properly,rejects,allocating,this,session;ignore,the,test,is,too,resource,consuming,8,gb,of,memory,test,public,void,testfull,alloc,throws,ioexception,add,test,appender,abstract,yarn,cluster,descriptor,class,level,warn,log,info,starting,testfull,alloc,run,with,args,new,string,j,flink,uberjar,get,absolute,path,t,flink,lib,folder,get,absolute,path,t,flink,shaded,hadoop,dir,get,absolute,path,n,2,jm,256m,tm,3840m,number,of,connected,task,managers,changed,to,null,run,types,0,log,info,finished,testfull,alloc,check,for,log,string,there,is,not,enough,memory,available,in,the,yarn,cluster,the,task,manager,s,require,3840mb,each,node,managers,available,4096,4096,n,after,allocating,the,job,manager,512mb,and,1,2,task,managers,the,following,node,managers,are,available,3584,256
