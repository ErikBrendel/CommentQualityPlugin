# id;timestamp;commentText;codeText;commentWords;codeWords
YARNHighAvailabilityITCase -> private void stopTaskManagerContainer() throws Exception;1548435402;Stops a container running {@link YarnTaskExecutorRunner}.;private void stopTaskManagerContainer() throws Exception {_		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		NMTokenIdentifier nmIdent = null__		UserGroupInformation remoteUgi = UserGroupInformation.getCurrentUser()___		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskExecutorRunner.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_		}__		assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		assertNotNull("Illegal state", nodeManager)___		StopContainersRequest scr = StopContainersRequest.newInstance(Collections.singletonList(taskManagerContainer))___		nodeManager.getNMContext().getContainerManager().stopContainers(scr)___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)__	};stops,a,container,running,link,yarn,task,executor,runner;private,void,stop,task,manager,container,throws,exception,container,id,task,manager,container,null,node,manager,node,manager,null,nmtoken,identifier,nm,ident,null,user,group,information,remote,ugi,user,group,information,get,current,user,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,executor,runner,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,not,null,illegal,state,node,manager,stop,containers,request,scr,stop,containers,request,new,instance,collections,singleton,list,task,manager,container,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,remote,ugi,get,token,identifiers,remove,nm,ident
YARNHighAvailabilityITCase -> private void stopTaskManagerContainer() throws Exception;1548773096;Stops a container running {@link YarnTaskExecutorRunner}.;private void stopTaskManagerContainer() throws Exception {_		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		NMTokenIdentifier nmIdent = null__		UserGroupInformation remoteUgi = UserGroupInformation.getCurrentUser()___		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskExecutorRunner.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_		}__		assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		assertNotNull("Illegal state", nodeManager)___		StopContainersRequest scr = StopContainersRequest.newInstance(Collections.singletonList(taskManagerContainer))___		nodeManager.getNMContext().getContainerManager().stopContainers(scr)___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)__	};stops,a,container,running,link,yarn,task,executor,runner;private,void,stop,task,manager,container,throws,exception,container,id,task,manager,container,null,node,manager,node,manager,null,nmtoken,identifier,nm,ident,null,user,group,information,remote,ugi,user,group,information,get,current,user,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,executor,runner,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,not,null,illegal,state,node,manager,stop,containers,request,scr,stop,containers,request,new,instance,collections,singleton,list,task,manager,container,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,remote,ugi,get,token,identifiers,remove,nm,ident
YARNHighAvailabilityITCase -> private void stopTaskManagerContainer() throws Exception;1549360056;Stops a container running {@link YarnTaskExecutorRunner}.;private void stopTaskManagerContainer() throws Exception {_		_		ContainerId taskManagerContainer = null__		NodeManager nodeManager = null__		NMTokenIdentifier nmIdent = null__		UserGroupInformation remoteUgi = UserGroupInformation.getCurrentUser()___		for (int nmId = 0_ nmId < NUM_NODEMANAGERS_ nmId++) {_			NodeManager nm = yarnCluster.getNodeManager(nmId)__			ConcurrentMap<ContainerId, Container> containers = nm.getNMContext().getContainers()__			for (Map.Entry<ContainerId, Container> entry : containers.entrySet()) {_				String command = StringUtils.join(entry.getValue().getLaunchContext().getCommands(), " ")__				if (command.contains(YarnTaskExecutorRunner.class.getSimpleName())) {_					taskManagerContainer = entry.getKey()__					nodeManager = nm__					nmIdent = new NMTokenIdentifier(taskManagerContainer.getApplicationAttemptId(), null, "", 0)__					_					_					remoteUgi.addTokenIdentifier(nmIdent)__				}_			}_		}__		assertNotNull("Unable to find container with TaskManager", taskManagerContainer)__		assertNotNull("Illegal state", nodeManager)___		StopContainersRequest scr = StopContainersRequest.newInstance(Collections.singletonList(taskManagerContainer))___		nodeManager.getNMContext().getContainerManager().stopContainers(scr)___		_		remoteUgi.getTokenIdentifiers().remove(nmIdent)__	};stops,a,container,running,link,yarn,task,executor,runner;private,void,stop,task,manager,container,throws,exception,container,id,task,manager,container,null,node,manager,node,manager,null,nmtoken,identifier,nm,ident,null,user,group,information,remote,ugi,user,group,information,get,current,user,for,int,nm,id,0,nm,id,nm,id,node,manager,nm,yarn,cluster,get,node,manager,nm,id,concurrent,map,container,id,container,containers,nm,get,nmcontext,get,containers,for,map,entry,container,id,container,entry,containers,entry,set,string,command,string,utils,join,entry,get,value,get,launch,context,get,commands,if,command,contains,yarn,task,executor,runner,class,get,simple,name,task,manager,container,entry,get,key,node,manager,nm,nm,ident,new,nmtoken,identifier,task,manager,container,get,application,attempt,id,null,0,remote,ugi,add,token,identifier,nm,ident,assert,not,null,unable,to,find,container,with,task,manager,task,manager,container,assert,not,null,illegal,state,node,manager,stop,containers,request,scr,stop,containers,request,new,instance,collections,singleton,list,task,manager,container,node,manager,get,nmcontext,get,container,manager,stop,containers,scr,remote,ugi,get,token,identifiers,remove,nm,ident
YARNHighAvailabilityITCase -> @Test 	public void testKillYarnSessionClusterEntrypoint() throws Exception;1547742425;Tests that Yarn will restart a killed {@link YarnSessionClusterEntrypoint} which will then resume_a persisted {@link JobGraph}.;@Test_	public void testKillYarnSessionClusterEntrypoint() throws Exception {_		assumeTrue(_			"This test kills processes via the pkill command. Thus, it only runs on Linux, Mac OS, Free BSD and Solaris.",_			OperatingSystem.isLinux() || OperatingSystem.isMac() || OperatingSystem.isFreeBSD() || OperatingSystem.isSolaris())___		final YarnClusterDescriptor yarnClusterDescriptor = setupYarnClusterDescriptor()___		final RestClusterClient<ApplicationId> restClusterClient = deploySessionCluster(yarnClusterDescriptor)___		final JobGraph job = createJobGraph()___		final JobID jobId = submitJob(restClusterClient, job)___		final ApplicationId id = restClusterClient.getClusterId()___		waitUntilJobIsRunning(restClusterClient, jobId, RETRY_TIMEOUT)___		killApplicationMaster(yarnClusterDescriptor.getYarnSessionClusterEntrypoint())___		final YarnClient yarnClient = getYarnClient()__		Assert.assertNotNull(yarnClient)___		while (yarnClient.getApplicationReport(id).getCurrentApplicationAttemptId().getAttemptId() < 2) {_			Thread.sleep(RETRY_TIMEOUT)__		}__		waitUntilJobIsRunning(restClusterClient, jobId, RETRY_TIMEOUT)___		yarnClient.killApplication(id)___		while (yarnClient.getApplications(EnumSet.of(YarnApplicationState.KILLED, YarnApplicationState.FINISHED)).isEmpty()) {_			Thread.sleep(RETRY_TIMEOUT)__		}_	};tests,that,yarn,will,restart,a,killed,link,yarn,session,cluster,entrypoint,which,will,then,resume,a,persisted,link,job,graph;test,public,void,test,kill,yarn,session,cluster,entrypoint,throws,exception,assume,true,this,test,kills,processes,via,the,pkill,command,thus,it,only,runs,on,linux,mac,os,free,bsd,and,solaris,operating,system,is,linux,operating,system,is,mac,operating,system,is,free,bsd,operating,system,is,solaris,final,yarn,cluster,descriptor,yarn,cluster,descriptor,setup,yarn,cluster,descriptor,final,rest,cluster,client,application,id,rest,cluster,client,deploy,session,cluster,yarn,cluster,descriptor,final,job,graph,job,create,job,graph,final,job,id,job,id,submit,job,rest,cluster,client,job,final,application,id,id,rest,cluster,client,get,cluster,id,wait,until,job,is,running,rest,cluster,client,job,id,kill,application,master,yarn,cluster,descriptor,get,yarn,session,cluster,entrypoint,final,yarn,client,yarn,client,get,yarn,client,assert,assert,not,null,yarn,client,while,yarn,client,get,application,report,id,get,current,application,attempt,id,get,attempt,id,2,thread,sleep,wait,until,job,is,running,rest,cluster,client,job,id,yarn,client,kill,application,id,while,yarn,client,get,applications,enum,set,of,yarn,application,state,killed,yarn,application,state,finished,is,empty,thread,sleep
YARNHighAvailabilityITCase -> @Test 	public void testKillYarnSessionClusterEntrypoint() throws Exception;1548435402;Tests that Yarn will restart a killed {@link YarnSessionClusterEntrypoint} which will then resume_a persisted {@link JobGraph}.;@Test_	public void testKillYarnSessionClusterEntrypoint() throws Exception {_		assumeTrue(_			"This test kills processes via the pkill command. Thus, it only runs on Linux, Mac OS, Free BSD and Solaris.",_			OperatingSystem.isLinux() || OperatingSystem.isMac() || OperatingSystem.isFreeBSD() || OperatingSystem.isSolaris())___		final YarnClusterDescriptor yarnClusterDescriptor = setupYarnClusterDescriptor()__		final RestClusterClient<ApplicationId> restClusterClient = deploySessionCluster(yarnClusterDescriptor)___		try {_			final JobID jobId = submitJob(restClusterClient)__			final ApplicationId id = restClusterClient.getClusterId()___			waitUntilJobIsRunning(restClusterClient, jobId)___			killApplicationMaster(yarnClusterDescriptor.getYarnSessionClusterEntrypoint())__			waitForApplicationAttempt(id, 2)___			waitForJobTermination(restClusterClient, jobId)___			killApplicationAndWait(id)__		} finally {_			restClusterClient.shutdown()__		}_	};tests,that,yarn,will,restart,a,killed,link,yarn,session,cluster,entrypoint,which,will,then,resume,a,persisted,link,job,graph;test,public,void,test,kill,yarn,session,cluster,entrypoint,throws,exception,assume,true,this,test,kills,processes,via,the,pkill,command,thus,it,only,runs,on,linux,mac,os,free,bsd,and,solaris,operating,system,is,linux,operating,system,is,mac,operating,system,is,free,bsd,operating,system,is,solaris,final,yarn,cluster,descriptor,yarn,cluster,descriptor,setup,yarn,cluster,descriptor,final,rest,cluster,client,application,id,rest,cluster,client,deploy,session,cluster,yarn,cluster,descriptor,try,final,job,id,job,id,submit,job,rest,cluster,client,final,application,id,id,rest,cluster,client,get,cluster,id,wait,until,job,is,running,rest,cluster,client,job,id,kill,application,master,yarn,cluster,descriptor,get,yarn,session,cluster,entrypoint,wait,for,application,attempt,id,2,wait,for,job,termination,rest,cluster,client,job,id,kill,application,and,wait,id,finally,rest,cluster,client,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testKillYarnSessionClusterEntrypoint() throws Exception;1548773096;Tests that Yarn will restart a killed {@link YarnSessionClusterEntrypoint} which will then resume_a persisted {@link JobGraph}.;@Test_	public void testKillYarnSessionClusterEntrypoint() throws Exception {_		assumeTrue(_			"This test kills processes via the pkill command. Thus, it only runs on Linux, Mac OS, Free BSD and Solaris.",_			OperatingSystem.isLinux() || OperatingSystem.isMac() || OperatingSystem.isFreeBSD() || OperatingSystem.isSolaris())___		final YarnClusterDescriptor yarnClusterDescriptor = setupYarnClusterDescriptor()__		yarnClusterDescriptor.addShipFiles(Arrays.asList(flinkShadedHadoopDir.listFiles()))___		final RestClusterClient<ApplicationId> restClusterClient = deploySessionCluster(yarnClusterDescriptor)___		try {_			final JobID jobId = submitJob(restClusterClient)__			final ApplicationId id = restClusterClient.getClusterId()___			waitUntilJobIsRunning(restClusterClient, jobId)___			killApplicationMaster(yarnClusterDescriptor.getYarnSessionClusterEntrypoint())__			waitForApplicationAttempt(id, 2)___			waitForJobTermination(restClusterClient, jobId)___			killApplicationAndWait(id)__		} finally {_			restClusterClient.shutdown()__		}_	};tests,that,yarn,will,restart,a,killed,link,yarn,session,cluster,entrypoint,which,will,then,resume,a,persisted,link,job,graph;test,public,void,test,kill,yarn,session,cluster,entrypoint,throws,exception,assume,true,this,test,kills,processes,via,the,pkill,command,thus,it,only,runs,on,linux,mac,os,free,bsd,and,solaris,operating,system,is,linux,operating,system,is,mac,operating,system,is,free,bsd,operating,system,is,solaris,final,yarn,cluster,descriptor,yarn,cluster,descriptor,setup,yarn,cluster,descriptor,yarn,cluster,descriptor,add,ship,files,arrays,as,list,flink,shaded,hadoop,dir,list,files,final,rest,cluster,client,application,id,rest,cluster,client,deploy,session,cluster,yarn,cluster,descriptor,try,final,job,id,job,id,submit,job,rest,cluster,client,final,application,id,id,rest,cluster,client,get,cluster,id,wait,until,job,is,running,rest,cluster,client,job,id,kill,application,master,yarn,cluster,descriptor,get,yarn,session,cluster,entrypoint,wait,for,application,attempt,id,2,wait,for,job,termination,rest,cluster,client,job,id,kill,application,and,wait,id,finally,rest,cluster,client,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testKillYarnSessionClusterEntrypoint() throws Exception;1549360056;Tests that Yarn will restart a killed {@link YarnSessionClusterEntrypoint} which will then resume_a persisted {@link JobGraph}.;@Test_	public void testKillYarnSessionClusterEntrypoint() throws Exception {_		assumeTrue(_			"This test kills processes via the pkill command. Thus, it only runs on Linux, Mac OS, Free BSD and Solaris.",_			OperatingSystem.isLinux() || OperatingSystem.isMac() || OperatingSystem.isFreeBSD() || OperatingSystem.isSolaris())___		final YarnClusterDescriptor yarnClusterDescriptor = setupYarnClusterDescriptor()__		yarnClusterDescriptor.addShipFiles(Arrays.asList(flinkShadedHadoopDir.listFiles()))___		final RestClusterClient<ApplicationId> restClusterClient = deploySessionCluster(yarnClusterDescriptor)___		try {_			final JobID jobId = submitJob(restClusterClient)__			final ApplicationId id = restClusterClient.getClusterId()___			waitUntilJobIsRunning(restClusterClient, jobId)___			killApplicationMaster(yarnClusterDescriptor.getYarnSessionClusterEntrypoint())__			waitForApplicationAttempt(id, 2)___			waitForJobTermination(restClusterClient, jobId)___			killApplicationAndWait(id)__		} finally {_			restClusterClient.shutdown()__		}_	};tests,that,yarn,will,restart,a,killed,link,yarn,session,cluster,entrypoint,which,will,then,resume,a,persisted,link,job,graph;test,public,void,test,kill,yarn,session,cluster,entrypoint,throws,exception,assume,true,this,test,kills,processes,via,the,pkill,command,thus,it,only,runs,on,linux,mac,os,free,bsd,and,solaris,operating,system,is,linux,operating,system,is,mac,operating,system,is,free,bsd,operating,system,is,solaris,final,yarn,cluster,descriptor,yarn,cluster,descriptor,setup,yarn,cluster,descriptor,yarn,cluster,descriptor,add,ship,files,arrays,as,list,flink,shaded,hadoop,dir,list,files,final,rest,cluster,client,application,id,rest,cluster,client,deploy,session,cluster,yarn,cluster,descriptor,try,final,job,id,job,id,submit,job,rest,cluster,client,final,application,id,id,rest,cluster,client,get,cluster,id,wait,until,job,is,running,rest,cluster,client,job,id,kill,application,master,yarn,cluster,descriptor,get,yarn,session,cluster,entrypoint,wait,for,application,attempt,id,2,wait,for,job,termination,rest,cluster,client,job,id,kill,application,and,wait,id,finally,rest,cluster,client,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1462389709;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingFlinkYarnClient flinkYarnClient = new TestingFlinkYarnClient()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.setShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_RECOVERY_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		AbstractFlinkYarnCluster yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			yarnCluster.connectToCluster()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown(false)__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,flink,yarn,client,flink,yarn,client,new,testing,flink,yarn,client,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,set,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,abstract,flink,yarn,cluster,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,yarn,cluster,connect,to,cluster,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,false
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1466152678;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.setShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_RECOVERY_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,set,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1467104066;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.setShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv("FLINK_CONF_DIR")__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_RECOVERY_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,set,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1467379351;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.getConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_RECOVERY_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,get,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1469630409;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_RECOVERY_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1472033364;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.ZOOKEEPER_HA_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1472033371;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = tmp.getRoot().getPath()___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.HA_ZOOKEEPER_STORAGE_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,tmp,get,root,get,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1474401809;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + ConfigConstants.HA_ZOOKEEPER_STORAGE_PATH + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,config,constants,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1476095826;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Messages.getAcknowledge())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Messages.getAcknowledge())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,messages,get,acknowledge,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1477989375;Tests that the application master can be killed multiple times and that the surviving_TaskManager succesfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,succesfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1481907119;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + ConfigConstants.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,config,constants,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1487622556;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1493975155;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		try {_			yarnCluster = flinkYarnClient.deploy()__			final Configuration config = yarnCluster.getFlinkConfiguration()___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config, false)__								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							LeaderRetrievalService lrs = LeaderRetrievalUtils.createLeaderRetrievalService(config, false)__							ActorGateway gateway2 = LeaderRetrievalUtils.retrieveLeaderGateway(lrs, actorSystem, timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway2.leaderSessionID())__							gateway2.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,try,yarn,cluster,flink,yarn,client,deploy,final,configuration,config,yarn,cluster,get,flink,configuration,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,false,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,leader,retrieval,service,lrs,leader,retrieval,utils,create,leader,retrieval,service,config,false,actor,gateway,gateway2,leader,retrieval,utils,retrieve,leader,gateway,lrs,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway2,leader,session,id,gateway2,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1493975167;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		try {_			yarnCluster = flinkYarnClient.deploy()___			final ClusterClient finalYarnCluster = yarnCluster___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,try,yarn,cluster,flink,yarn,client,deploy,final,cluster,client,final,yarn,cluster,yarn,cluster,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1495702763;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		try {_			yarnCluster = flinkYarnClient.deploy()___			final ClusterClient finalYarnCluster = yarnCluster___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,try,yarn,cluster,flink,yarn,client,deploy,final,cluster,client,final,yarn,cluster,yarn,cluster,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1501083592;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setTaskManagerCount(1)__		flinkYarnClient.setJobManagerMemory(768)__		flinkYarnClient.setTaskManagerMemory(1024)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster()___			final ClusterClient finalYarnCluster = yarnCluster___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,task,manager,count,1,flink,yarn,client,set,job,manager,memory,768,flink,yarn,client,set,task,manager,memory,1024,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,final,cluster,client,final,yarn,cluster,yarn,cluster,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1501088110;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1___		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor()___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		flinkYarnClient.setConfigurationDirectory(confDirPath)___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setFlinkConfiguration(GlobalConfiguration.loadConfiguration())__		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")__		flinkYarnClient.setConfigurationFilePath(new Path(confDirPath + File.separator + "flink-conf.yaml"))___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			final ClusterClient finalYarnCluster = yarnCluster___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,conf,dir,path,system,getenv,config,constants,flink,yarn,client,set,configuration,directory,conf,dir,path,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,flink,configuration,global,configuration,load,configuration,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,flink,yarn,client,set,configuration,file,path,new,path,conf,dir,path,file,separator,flink,conf,yaml,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,final,cluster,client,final,yarn,cluster,yarn,cluster,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1501237018;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(configuration, confDirPath)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			final ClusterClient finalYarnCluster = yarnCluster___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,conf,dir,path,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,final,cluster,client,final,yarn,cluster,yarn,cluster,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1515770044;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(configuration, confDirPath)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CoreOptions.STATE_BACKEND + "=FILESYSTEM" +_			"@@" + FsStateBackendFactory.CHECKPOINT_DIRECTORY_URI_CONF_KEY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,conf,dir,path,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,core,options,filesystem,fs,state,backend,factory,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1516295283;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(configuration, confDirPath)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CheckpointingOptions.STATE_BACKEND.key() + "=FILESYSTEM" +_			"@@" + CheckpointingOptions.CHECKPOINTS_DIRECTORY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,conf,dir,path,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,checkpointing,options,key,filesystem,checkpointing,options,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1518945174;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		assumeTrue("This test only works with the old actor based code.", !flip6)__		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(configuration, confDirPath)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CheckpointingOptions.STATE_BACKEND.key() + "=FILESYSTEM" +_			"@@" + CheckpointingOptions.CHECKPOINTS_DIRECTORY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,assume,true,this,test,only,works,with,the,old,actor,based,code,flip6,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,conf,dir,path,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,checkpointing,options,key,filesystem,checkpointing,options,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1520030750;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		assumeTrue("This test only works with the old actor based code.", !flip6)__		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CheckpointingOptions.STATE_BACKEND.key() + "=FILESYSTEM" +_			"@@" + CheckpointingOptions.CHECKPOINTS_DIRECTORY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,assume,true,this,test,only,works,with,the,old,actor,based,code,flip6,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,checkpointing,options,key,filesystem,checkpointing,options,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1522681180;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		assumeTrue("This test only works with the old actor based code.", !isNewMode)__		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CheckpointingOptions.STATE_BACKEND.key() + "=FILESYSTEM" +_			"@@" + CheckpointingOptions.CHECKPOINTS_DIRECTORY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnCluster = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnCluster = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnCluster.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnCluster != null) {_				yarnCluster.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,assume,true,this,test,only,works,with,the,old,actor,based,code,is,new,mode,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,checkpointing,options,key,filesystem,checkpointing,options,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,null,yarn,cluster,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
YARNHighAvailabilityITCase -> @Test 	public void testMultipleAMKill() throws Exception;1531982617;Tests that the application master can be killed multiple times and that the surviving_TaskManager successfully reconnects to the newly started JobManager._@throws Exception;@Test_	public void testMultipleAMKill() throws Exception {_		assumeTrue("This test only works with the old actor based code.", !isNewMode)__		final int numberKillingAttempts = numberApplicationAttempts - 1__		String confDirPath = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR)__		final Configuration configuration = GlobalConfiguration.loadConfiguration()__		TestingYarnClusterDescriptor flinkYarnClient = new TestingYarnClusterDescriptor(_			configuration,_			getYarnConfiguration(),_			confDirPath,_			getYarnClient(),_			true)___		Assert.assertNotNull("unable to get yarn client", flinkYarnClient)__		flinkYarnClient.setLocalJarPath(new Path(flinkUberjar.getAbsolutePath()))__		flinkYarnClient.addShipFiles(Arrays.asList(flinkLibFolder.listFiles()))___		String fsStateHandlePath = temp.getRoot().getPath()___		_		File configDirectory = new File(confDirPath)__		GlobalConfiguration.loadConfiguration(configDirectory.getAbsolutePath())___		flinkYarnClient.setDynamicPropertiesEncoded("recovery.mode=zookeeper@@recovery.zookeeper.quorum=" +_			zkServer.getConnectString() + "@@yarn.application-attempts=" + numberApplicationAttempts +_			"@@" + CheckpointingOptions.STATE_BACKEND.key() + "=FILESYSTEM" +_			"@@" + CheckpointingOptions.CHECKPOINTS_DIRECTORY + "=" + fsStateHandlePath + "/checkpoints" +_			"@@" + HighAvailabilityOptions.HA_STORAGE_PATH.key() + "=" + fsStateHandlePath + "/recovery")___		ClusterClient<ApplicationId> yarnClusterClient = null___		final FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		HighAvailabilityServices highAvailabilityServices = null___		final ClusterSpecification clusterSpecification = new ClusterSpecification.ClusterSpecificationBuilder()_			.setMasterMemoryMB(768)_			.setTaskManagerMemoryMB(1024)_			.setNumberTaskManagers(1)_			.setSlotsPerTaskManager(1)_			.createClusterSpecification()___		try {_			yarnClusterClient = flinkYarnClient.deploySessionCluster(clusterSpecification)___			highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				yarnClusterClient.getFlinkConfiguration(),_				Executors.directExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			final HighAvailabilityServices finalHighAvailabilityServices = highAvailabilityServices___			new JavaTestKit(actorSystem) {{_				for (int attempt = 0_ attempt < numberKillingAttempts_ attempt++) {_					new Within(timeout) {_						@Override_						protected void run() {_							try {_								ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_									finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_									actorSystem,_									timeout)__								ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___								gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___								expectMsgEquals(Acknowledge.get())___								gateway.tell(PoisonPill.getInstance())__							} catch (Exception e) {_								throw new AssertionError("Could not complete test.", e)__							}_						}_					}__				}__				new Within(timeout) {_					@Override_					protected void run() {_						try {_							ActorGateway gateway = LeaderRetrievalUtils.retrieveLeaderGateway(_								finalHighAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID),_								actorSystem,_								timeout)__							ActorGateway selfGateway = new AkkaActorGateway(getRef(), gateway.leaderSessionID())___							gateway.tell(new TestingJobManagerMessages.NotifyWhenAtLeastNumTaskManagerAreRegistered(1), selfGateway)___							expectMsgEquals(Acknowledge.get())__						} catch (Exception e) {_							throw new AssertionError("Could not complete test.", e)__						}_					}_				}___			}}__		} finally {_			if (yarnClusterClient != null) {_				log.info("Shutting down the Flink Yarn application.")__				yarnClusterClient.shutDownCluster()__				yarnClusterClient.shutdown()__			}__			if (highAvailabilityServices != null) {_				highAvailabilityServices.closeAndCleanupAllData()__			}_		}_	};tests,that,the,application,master,can,be,killed,multiple,times,and,that,the,surviving,task,manager,successfully,reconnects,to,the,newly,started,job,manager,throws,exception;test,public,void,test,multiple,amkill,throws,exception,assume,true,this,test,only,works,with,the,old,actor,based,code,is,new,mode,final,int,number,killing,attempts,number,application,attempts,1,string,conf,dir,path,system,getenv,config,constants,final,configuration,configuration,global,configuration,load,configuration,testing,yarn,cluster,descriptor,flink,yarn,client,new,testing,yarn,cluster,descriptor,configuration,get,yarn,configuration,conf,dir,path,get,yarn,client,true,assert,assert,not,null,unable,to,get,yarn,client,flink,yarn,client,flink,yarn,client,set,local,jar,path,new,path,flink,uberjar,get,absolute,path,flink,yarn,client,add,ship,files,arrays,as,list,flink,lib,folder,list,files,string,fs,state,handle,path,temp,get,root,get,path,file,config,directory,new,file,conf,dir,path,global,configuration,load,configuration,config,directory,get,absolute,path,flink,yarn,client,set,dynamic,properties,encoded,recovery,mode,zookeeper,recovery,zookeeper,quorum,zk,server,get,connect,string,yarn,application,attempts,number,application,attempts,checkpointing,options,key,filesystem,checkpointing,options,fs,state,handle,path,checkpoints,high,availability,options,key,fs,state,handle,path,recovery,cluster,client,application,id,yarn,cluster,client,null,final,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,high,availability,services,high,availability,services,null,final,cluster,specification,cluster,specification,new,cluster,specification,cluster,specification,builder,set,master,memory,mb,768,set,task,manager,memory,mb,1024,set,number,task,managers,1,set,slots,per,task,manager,1,create,cluster,specification,try,yarn,cluster,client,flink,yarn,client,deploy,session,cluster,cluster,specification,high,availability,services,high,availability,services,utils,create,high,availability,services,yarn,cluster,client,get,flink,configuration,executors,direct,executor,high,availability,services,utils,address,resolution,final,high,availability,services,final,high,availability,services,high,availability,services,new,java,test,kit,actor,system,for,int,attempt,0,attempt,number,killing,attempts,attempt,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,gateway,tell,poison,pill,get,instance,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,new,within,timeout,override,protected,void,run,try,actor,gateway,gateway,leader,retrieval,utils,retrieve,leader,gateway,final,high,availability,services,get,job,manager,leader,retriever,high,availability,services,actor,system,timeout,actor,gateway,self,gateway,new,akka,actor,gateway,get,ref,gateway,leader,session,id,gateway,tell,new,testing,job,manager,messages,notify,when,at,least,num,task,manager,are,registered,1,self,gateway,expect,msg,equals,acknowledge,get,catch,exception,e,throw,new,assertion,error,could,not,complete,test,e,finally,if,yarn,cluster,client,null,log,info,shutting,down,the,flink,yarn,application,yarn,cluster,client,shut,down,cluster,yarn,cluster,client,shutdown,if,high,availability,services,null,high,availability,services,close,and,cleanup,all,data
