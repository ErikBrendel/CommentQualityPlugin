# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1516400923;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir")) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td>" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1517320744;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir")) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td>" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1518451454;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir")) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td>" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1518454513;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir")) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td>" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1518607730;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir") || option == CoreOptions.TMP_DIRS) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td>" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,option,core,options,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1518788539;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir") || option == CoreOptions.TMP_DIRS) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,option,core,options,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1523020982;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir") || option == CoreOptions.TMP_DIRS) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,option,core,options,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1523527098;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir") || option == CoreOptions.TMP_DIRS) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(defaultValueToHtml(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,option,core,options,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final ConfigOption<?> option);1524568694;Transforms option to table row.__@param option option to transform_@return row with the option description;private static String toHtmlString(final ConfigOption<?> option) {_		Object defaultValue = option.defaultValue()__		_		_		_		if (option == WebOptions.TMP_DIR || option.key().equals("python.dc.tmp.dir") || option == CoreOptions.TMP_DIRS) {_			defaultValue = null__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValueToHtml(defaultValue))) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,config,option,option,object,default,value,option,default,value,if,option,web,options,option,key,equals,python,dc,tmp,dir,option,core,options,default,value,null,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,to,html,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1516400923;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default Value</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,value,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1517320744;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1518451454;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1518454513;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1518607730;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1518788539;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption> options);1523020982;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1525267086;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue___		Documentation.OverrideDefault overrideDocumentedDefault = optionWithMetaInfo.field.getAnnotation(Documentation.OverrideDefault.class)__		if (overrideDocumentedDefault != null) {_			defaultValue = escapeCharacters(addWordBreakOpportunities(overrideDocumentedDefault.value()))__		} else {_			defaultValue = escapeCharacters(addWordBreakOpportunities(defaultValueToHtml(option.defaultValue())))__		}_		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + defaultValue + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,documentation,override,default,override,documented,default,option,with,meta,info,field,get,annotation,documentation,override,default,class,if,override,documented,default,null,default,value,escape,characters,add,word,break,opportunities,override,documented,default,value,else,default,value,escape,characters,add,word,break,opportunities,default,value,to,html,option,default,value,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1525336098;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1525933612;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1528998316;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1531303507;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1531771917;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1531771917;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + escapeCharacters(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,escape,characters,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1531914840;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + formatter.format(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,formatter,format,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1542484252;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + formatter.format(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,formatter,format,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo);1550051075;Transforms option to table row.__@param optionWithMetaInfo option to transform_@return row with the option description;private static String toHtmlString(final OptionWithMetaInfo optionWithMetaInfo) {_		ConfigOption<?> option = optionWithMetaInfo.option__		String defaultValue = stringifyDefault(optionWithMetaInfo)___		return "" +_			"        <tr>\n" +_			"            <td><h5>" + escapeCharacters(option.key()) + "</h5></td>\n" +_			"            <td style=\"word-wrap: break-word_\">" + escapeCharacters(addWordBreakOpportunities(defaultValue)) + "</td>\n" +_			"            <td>" + formatter.format(option.description()) + "</td>\n" +_			"        </tr>\n"__	};transforms,option,to,table,row,param,option,with,meta,info,option,to,transform,return,row,with,the,option,description;private,static,string,to,html,string,final,option,with,meta,info,option,with,meta,info,config,option,option,option,with,meta,info,option,string,default,value,stringify,default,option,with,meta,info,return,tr,n,td,h5,escape,characters,option,key,h5,td,n,td,style,word,wrap,break,word,escape,characters,add,word,break,opportunities,default,value,td,n,td,formatter,format,option,description,td,n,tr,n
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1525267086;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1525336098;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1525933612;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1528998316;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1531303507;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1531771917;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1531771917;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1531914840;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1542484252;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<OptionWithMetaInfo> options);1550051075;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<OptionWithMetaInfo> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (OptionWithMetaInfo option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,option,with,meta,info,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,option,with,meta,info,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption<?>> options);1523527098;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption<?>> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption<?> option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> private static String toHtmlTable(final List<ConfigOption<?>> options);1524568694;Transforms this configuration group into HTML formatted table._Options are sorted alphabetically by key.__@param options list of options to include in this group_@return string containing HTML formatted table;private static String toHtmlTable(final List<ConfigOption<?>> options) {_		StringBuilder htmlTable = new StringBuilder()__		htmlTable.append("<table class=\"table table-bordered\">\n")__		htmlTable.append("    <thead>\n")__		htmlTable.append("        <tr>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 20%\">Key</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 15%\">Default</th>\n")__		htmlTable.append("            <th class=\"text-left\" style=\"width: 65%\">Description</th>\n")__		htmlTable.append("        </tr>\n")__		htmlTable.append("    </thead>\n")__		htmlTable.append("    <tbody>\n")___		for (ConfigOption<?> option : options) {_			htmlTable.append(toHtmlString(option))__		}__		htmlTable.append("    </tbody>\n")__		htmlTable.append("</table>\n")___		return htmlTable.toString()__	};transforms,this,configuration,group,into,html,formatted,table,options,are,sorted,alphabetically,by,key,param,options,list,of,options,to,include,in,this,group,return,string,containing,html,formatted,table;private,static,string,to,html,table,final,list,config,option,options,string,builder,html,table,new,string,builder,html,table,append,table,class,table,table,bordered,n,html,table,append,thead,n,html,table,append,tr,n,html,table,append,th,class,text,left,style,width,20,key,th,n,html,table,append,th,class,text,left,style,width,15,default,th,n,html,table,append,th,class,text,left,style,width,65,description,th,n,html,table,append,tr,n,html,table,append,thead,n,html,table,append,tbody,n,for,config,option,option,options,html,table,append,to,html,string,option,html,table,append,tbody,n,html,table,append,table,n,return,html,table,to,string
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1516400923;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1517320744;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1518451454;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1518454513;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1518607730;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1518788539;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1523020982;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory_[x] module containing an *Options class_[x+1] package to the * Options.classes;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]__		for (int x = 2_ x + 1 < args.length_ x += 2) {_			createTable(rootDir, args[x], args[x + 1], outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory,x,module,containing,an,options,class,x,1,package,to,the,options,classes;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,int,x,2,x,1,args,length,x,2,create,table,root,dir,args,x,args,x,1,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1523527098;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1524568694;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1525267086;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1525336098;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1525933612;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory)__		}_	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1528998316;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1531303507;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1531771917;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1531771917;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1531914840;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1542484252;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
ConfigOptionsDocGenerator -> public static void main(String[] args) throws IOException, ClassNotFoundException;1550051075;This method generates html tables from set of classes containing {@link ConfigOption ConfigOptions}.__<p>For each class 1 or more html tables will be generated and placed into a separate file, depending on whether_the class is annotated with {@link ConfigGroups}. The tables contain the key, default value and description for_every {@link ConfigOption}.__<p>One additional table is generated containing all {@link ConfigOption ConfigOptions} that are annotated with_{@link org.apache.flink.annotation.docs.Documentation.CommonOption}.__@param args_[0] output directory for the generated files_[1] project root directory;public static void main(String[] args) throws IOException, ClassNotFoundException {_		String outputDirectory = args[0]__		String rootDir = args[1]___		for (OptionsClassLocation location : LOCATIONS) {_			createTable(rootDir, location.getModule(), location.getPackage(), outputDirectory, DEFAULT_PATH_PREFIX)__		}__		generateCommonSection(rootDir, outputDirectory, LOCATIONS, DEFAULT_PATH_PREFIX)__	};this,method,generates,html,tables,from,set,of,classes,containing,link,config,option,config,options,p,for,each,class,1,or,more,html,tables,will,be,generated,and,placed,into,a,separate,file,depending,on,whether,the,class,is,annotated,with,link,config,groups,the,tables,contain,the,key,default,value,and,description,for,every,link,config,option,p,one,additional,table,is,generated,containing,all,link,config,option,config,options,that,are,annotated,with,link,org,apache,flink,annotation,docs,documentation,common,option,param,args,0,output,directory,for,the,generated,files,1,project,root,directory;public,static,void,main,string,args,throws,ioexception,class,not,found,exception,string,output,directory,args,0,string,root,dir,args,1,for,options,class,location,location,locations,create,table,root,dir,location,get,module,location,get,package,output,directory,generate,common,section,root,dir,output,directory,locations
