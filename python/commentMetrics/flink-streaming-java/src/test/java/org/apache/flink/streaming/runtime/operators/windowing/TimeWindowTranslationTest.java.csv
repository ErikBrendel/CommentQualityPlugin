# id;timestamp;commentText;codeText;commentWords;codeWords
TimeWindowTranslationTest -> @Test 	public void testAlignedWindowDeprecation() throws Exception;1484235257;Verifies that calls to timeWindow() instantiate a regular_windowOperator instead of an aligned one.;@Test_	public void testAlignedWindowDeprecation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__	};verifies,that,calls,to,time,window,instantiate,a,regular,window,operator,instead,of,an,aligned,one;test,public,void,test,aligned,window,deprecation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator
TimeWindowTranslationTest -> @Test 	public void testAlignedWindowDeprecation() throws Exception;1495484544;Verifies that calls to timeWindow() instantiate a regular_windowOperator instead of an aligned one.;@Test_	public void testAlignedWindowDeprecation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__	};verifies,that,calls,to,time,window,instantiate,a,regular,window,operator,instead,of,an,aligned,one;test,public,void,test,aligned,window,deprecation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator
TimeWindowTranslationTest -> @Test 	public void testAlignedWindowDeprecation() throws Exception;1503598628;Verifies that calls to timeWindow() instantiate a regular_windowOperator instead of an aligned one.;@Test_	public void testAlignedWindowDeprecation() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof WindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof WindowOperator)__	};verifies,that,calls,to,time,window,instantiate,a,regular,window,operator,instead,of,an,aligned,one;test,public,void,test,aligned,window,deprecation,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1445418103;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1454527671;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,iterable,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1455703064;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,iterable,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1456528025;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1456774151;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testFastTimeWindows() throws Exception;1467726666;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.keyBy(0)_				.timeWindow(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,key,by,0,time,window,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testReduceAlignedTimeWindows() throws Exception;1484235257;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testReduceAlignedTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.window(SlidingAlignedProcessingTimeWindows.of(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,reduce,aligned,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,window,sliding,aligned,processing,time,windows,of,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testReduceAlignedTimeWindows() throws Exception;1495484544;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testReduceAlignedTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.window(SlidingAlignedProcessingTimeWindows.of(Time.of(1000, TimeUnit.MILLISECONDS), Time.of(100, TimeUnit.MILLISECONDS)))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,reduce,aligned,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,key,by,0,window,sliding,aligned,processing,time,windows,of,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testApplyAlignedTimeWindows() throws Exception;1484235257;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testApplyAlignedTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.window(TumblingAlignedProcessingTimeWindows.of(Time.of(1000, TimeUnit.MILLISECONDS)))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,apply,aligned,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window1,source,key,by,0,window,tumbling,aligned,processing,time,windows,of,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Test 	public void testApplyAlignedTimeWindows() throws Exception;1495484544;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.;@Test_	public void testApplyAlignedTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime)___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DataStream<Tuple2<String, Integer>> window1 = source_				.keyBy(0)_				.window(TumblingAlignedProcessingTimeWindows.of(Time.of(1000, TimeUnit.MILLISECONDS)))_				.apply(new WindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(Tuple tuple,_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right;test,public,void,test,apply,aligned,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,processing,time,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,data,stream,tuple2,string,integer,window1,source,key,by,0,window,tumbling,aligned,processing,time,windows,of,time,of,1000,time,unit,milliseconds,apply,new,window,function,tuple2,string,integer,tuple2,string,integer,tuple,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,tuple,tuple,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1445418103;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1454527671;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,iterable,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1455703064;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,iterable,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1456528025;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1456774151;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1467726666;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1482244974;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1484127347;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1484235257;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
TimeWindowTranslationTest -> @Ignore 	@Test 	public void testNonParallelFastTimeWindows() throws Exception;1495484544;These tests ensure that the fast aligned time windows operator is used if the_conditions are right.__<p>TODO: update once the fast aligned time windows operator is in;@Ignore_	@Test_	public void testNonParallelFastTimeWindows() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<String, Integer>> source = env.fromElements(Tuple2.of("hello", 1), Tuple2.of("hello", 2))___		DummyReducer reducer = new DummyReducer()___		DataStream<Tuple2<String, Integer>> window1 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS),_						Time.of(100, TimeUnit.MILLISECONDS))_				.reduce(reducer)___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform1 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window1.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator1 = transform1.getOperator()__		Assert.assertTrue(operator1 instanceof AggregatingProcessingTimeWindowOperator)___		DataStream<Tuple2<String, Integer>> window2 = source_				.timeWindowAll(Time.of(1000, TimeUnit.MILLISECONDS))_				.apply(new AllWindowFunction<Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow>() {_					private static final long serialVersionUID = 1L___					@Override_					public void apply(_							TimeWindow window,_							Iterable<Tuple2<String, Integer>> values,_							Collector<Tuple2<String, Integer>> out) throws Exception {__					}_				})___		OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>> transform2 = (OneInputTransformation<Tuple2<String, Integer>, Tuple2<String, Integer>>) window2.getTransformation()__		OneInputStreamOperator<Tuple2<String, Integer>, Tuple2<String, Integer>> operator2 = transform2.getOperator()__		Assert.assertTrue(operator2 instanceof AccumulatingProcessingTimeWindowOperator)__	};these,tests,ensure,that,the,fast,aligned,time,windows,operator,is,used,if,the,conditions,are,right,p,todo,update,once,the,fast,aligned,time,windows,operator,is,in;ignore,test,public,void,test,non,parallel,fast,time,windows,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,string,integer,source,env,from,elements,tuple2,of,hello,1,tuple2,of,hello,2,dummy,reducer,reducer,new,dummy,reducer,data,stream,tuple2,string,integer,window1,source,time,window,all,time,of,1000,time,unit,milliseconds,time,of,100,time,unit,milliseconds,reduce,reducer,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform1,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window1,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator1,transform1,get,operator,assert,assert,true,operator1,instanceof,aggregating,processing,time,window,operator,data,stream,tuple2,string,integer,window2,source,time,window,all,time,of,1000,time,unit,milliseconds,apply,new,all,window,function,tuple2,string,integer,tuple2,string,integer,time,window,private,static,final,long,serial,version,uid,1l,override,public,void,apply,time,window,window,iterable,tuple2,string,integer,values,collector,tuple2,string,integer,out,throws,exception,one,input,transformation,tuple2,string,integer,tuple2,string,integer,transform2,one,input,transformation,tuple2,string,integer,tuple2,string,integer,window2,get,transformation,one,input,stream,operator,tuple2,string,integer,tuple2,string,integer,operator2,transform2,get,operator,assert,assert,true,operator2,instanceof,accumulating,processing,time,window,operator
