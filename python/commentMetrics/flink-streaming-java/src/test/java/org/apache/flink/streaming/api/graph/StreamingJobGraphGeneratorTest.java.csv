# id;timestamp;commentText;codeText;commentWords;codeWords
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1476877808;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1484866640;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1489149058;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1489671806;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1489671806;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1489671807;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1489782894;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env, 1 )__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph, 1 )__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,1,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,1,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1492530130;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobSnapshottingSettings snapshottingSettings = jobGraph.getSnapshotSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,snapshotting,settings,snapshotting,settings,job,graph,get,snapshot,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1492678790;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		StreamingJobGraphGenerator jobGraphGenerator = new StreamingJobGraphGenerator(streamGraph)__		JobGraph jobGraph = jobGraphGenerator.createJobGraph()___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,streaming,job,graph,generator,job,graph,generator,new,streaming,job,graph,generator,stream,graph,job,graph,job,graph,job,graph,generator,create,job,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1492680901;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph)___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,stream,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1493195810;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph)___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,stream,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1495484544;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph)___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,stream,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1506618381;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph)___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointCoordinatorConfiguration().getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,stream,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,coordinator,configuration,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testDisabledCheckpointing() throws Exception;1513261900;Tests that disabled checkpointing sets the checkpointing interval to Long.MAX_VALUE.;@Test_	public void testDisabledCheckpointing() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		StreamGraph streamGraph = new StreamGraph(env)__		assertFalse("Checkpointing enabled", streamGraph.getCheckpointConfig().isCheckpointingEnabled())___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph)___		JobCheckpointingSettings snapshottingSettings = jobGraph.getCheckpointingSettings()__		assertEquals(Long.MAX_VALUE, snapshottingSettings.getCheckpointCoordinatorConfiguration().getCheckpointInterval())__	};tests,that,disabled,checkpointing,sets,the,checkpointing,interval,to,long;test,public,void,test,disabled,checkpointing,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,stream,graph,stream,graph,new,stream,graph,env,assert,false,checkpointing,enabled,stream,graph,get,checkpoint,config,is,checkpointing,enabled,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,stream,graph,job,checkpointing,settings,snapshotting,settings,job,graph,get,checkpointing,settings,assert,equals,long,snapshotting,settings,get,checkpoint,coordinator,configuration,get,checkpoint,interval
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1489671807;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1489782894;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph(), 1 ).createJobGraph()___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,1,create,job,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1492530130;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1492678790;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1492680901;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1493195810;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1495484544;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph.;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1506618381;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph.;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForChainedSourceSink() throws Exception;1513261900;Verifies that the resources are merged correctly for chained operators (covers source and sink cases)_when generating job graph.;@Test_	public void testResourcesForChainedSourceSink() throws Exception {_		ResourceSpec resource1 = ResourceSpec.newBuilder().setCpuCores(0.1).setHeapMemoryInMB(100).build()__		ResourceSpec resource2 = ResourceSpec.newBuilder().setCpuCores(0.2).setHeapMemoryInMB(200).build()__		ResourceSpec resource3 = ResourceSpec.newBuilder().setCpuCores(0.3).setHeapMemoryInMB(300).build()__		ResourceSpec resource4 = ResourceSpec.newBuilder().setCpuCores(0.4).setHeapMemoryInMB(400).build()__		ResourceSpec resource5 = ResourceSpec.newBuilder().setCpuCores(0.5).setHeapMemoryInMB(500).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Integer, Integer>> source = env.addSource(new ParallelSourceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void run(SourceContext<Tuple2<Integer, Integer>> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		})__		opMethod.invoke(source, resource1)___		DataStream<Tuple2<Integer, Integer>> map = source.map(new MapFunction<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> map(Tuple2<Integer, Integer> value) throws Exception {_				return value__			}_		})__		opMethod.invoke(map, resource2)___		_		DataStream<Tuple2<Integer, Integer>> filter = map.filter(new FilterFunction<Tuple2<Integer, Integer>>() {_			@Override_			public boolean filter(Tuple2<Integer, Integer> value) throws Exception {_				return false__			}_		})__		opMethod.invoke(filter, resource3)___		DataStream<Tuple2<Integer, Integer>> reduce = filter.keyBy(0).reduce(new ReduceFunction<Tuple2<Integer, Integer>>() {_			@Override_			public Tuple2<Integer, Integer> reduce(Tuple2<Integer, Integer> value1, Tuple2<Integer, Integer> value2) throws Exception {_				return new Tuple2<>(value1.f0, value1.f1 + value2.f1)__			}_		})__		opMethod.invoke(reduce, resource4)___		DataStreamSink<Tuple2<Integer, Integer>> sink = reduce.addSink(new SinkFunction<Tuple2<Integer, Integer>>() {_			@Override_			public void invoke(Tuple2<Integer, Integer> value) throws Exception {_			}_		})__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		JobVertex sourceMapFilterVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex reduceSinkVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		assertTrue(sourceMapFilterVertex.getMinResources().equals(resource1.merge(resource2).merge(resource3)))__		assertTrue(reduceSinkVertex.getPreferredResources().equals(resource4.merge(resource5)))__	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,source,and,sink,cases,when,generating,job,graph;test,public,void,test,resources,for,chained,source,sink,throws,exception,resource,spec,resource1,resource,spec,new,builder,set,cpu,cores,0,1,set,heap,memory,in,mb,100,build,resource,spec,resource2,resource,spec,new,builder,set,cpu,cores,0,2,set,heap,memory,in,mb,200,build,resource,spec,resource3,resource,spec,new,builder,set,cpu,cores,0,3,set,heap,memory,in,mb,300,build,resource,spec,resource4,resource,spec,new,builder,set,cpu,cores,0,4,set,heap,memory,in,mb,400,build,resource,spec,resource5,resource,spec,new,builder,set,cpu,cores,0,5,set,heap,memory,in,mb,500,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,integer,integer,source,env,add,source,new,parallel,source,function,tuple2,integer,integer,override,public,void,run,source,context,tuple2,integer,integer,ctx,throws,exception,override,public,void,cancel,op,method,invoke,source,resource1,data,stream,tuple2,integer,integer,map,source,map,new,map,function,tuple2,integer,integer,tuple2,integer,integer,override,public,tuple2,integer,integer,map,tuple2,integer,integer,value,throws,exception,return,value,op,method,invoke,map,resource2,data,stream,tuple2,integer,integer,filter,map,filter,new,filter,function,tuple2,integer,integer,override,public,boolean,filter,tuple2,integer,integer,value,throws,exception,return,false,op,method,invoke,filter,resource3,data,stream,tuple2,integer,integer,reduce,filter,key,by,0,reduce,new,reduce,function,tuple2,integer,integer,override,public,tuple2,integer,integer,reduce,tuple2,integer,integer,value1,tuple2,integer,integer,value2,throws,exception,return,new,tuple2,value1,f0,value1,f1,value2,f1,op,method,invoke,reduce,resource4,data,stream,sink,tuple2,integer,integer,sink,reduce,add,sink,new,sink,function,tuple2,integer,integer,override,public,void,invoke,tuple2,integer,integer,value,throws,exception,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,job,vertex,source,map,filter,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,reduce,sink,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,assert,true,source,map,filter,vertex,get,min,resources,equals,resource1,merge,resource2,merge,resource3,assert,true,reduce,sink,vertex,get,preferred,resources,equals,resource4,merge,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1489671807;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1489782894;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph(), 1 ).createJobGraph()___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,1,create,job,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1492530130;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1492678790;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1492680901;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1493195810;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1495484544;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph.;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1506618381;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph.;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = new ResourceSpec(0.1, 100)__		ResourceSpec resource2 = new ResourceSpec(0.2, 200)__		ResourceSpec resource3 = new ResourceSpec(0.3, 300)__		ResourceSpec resource4 = new ResourceSpec(0.4, 400)__		ResourceSpec resource5 = new ResourceSpec(0.5, 500)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,new,resource,spec,0,1,100,resource,spec,resource2,new,resource,spec,0,2,200,resource,spec,resource3,new,resource,spec,0,3,300,resource,spec,resource4,new,resource,spec,0,4,400,resource,spec,resource5,new,resource,spec,0,5,500,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testResourcesForIteration() throws Exception;1513261900;Verifies that the resources are merged correctly for chained operators (covers middle chaining and iteration cases)_when generating job graph.;@Test_	public void testResourcesForIteration() throws Exception {_		ResourceSpec resource1 = ResourceSpec.newBuilder().setCpuCores(0.1).setHeapMemoryInMB(100).build()__		ResourceSpec resource2 = ResourceSpec.newBuilder().setCpuCores(0.2).setHeapMemoryInMB(200).build()__		ResourceSpec resource3 = ResourceSpec.newBuilder().setCpuCores(0.3).setHeapMemoryInMB(300).build()__		ResourceSpec resource4 = ResourceSpec.newBuilder().setCpuCores(0.4).setHeapMemoryInMB(400).build()__		ResourceSpec resource5 = ResourceSpec.newBuilder().setCpuCores(0.5).setHeapMemoryInMB(500).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class)__		sinkMethod.setAccessible(true)___		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Integer> source = env.addSource(new ParallelSourceFunction<Integer>() {_			@Override_			public void run(SourceContext<Integer> ctx) throws Exception {_			}__			@Override_			public void cancel() {_			}_		}).name("test_source")__		opMethod.invoke(source, resource1)___		IterativeStream<Integer> iteration = source.iterate(3000)__		opMethod.invoke(iteration, resource2)___		DataStream<Integer> flatMap = iteration.flatMap(new FlatMapFunction<Integer, Integer>() {_			@Override_			public void flatMap(Integer value, Collector<Integer> out) throws Exception {_				out.collect(value)__			}_		}).name("test_flatMap")__		opMethod.invoke(flatMap, resource3)___		_		DataStream<Integer> increment = flatMap.filter(new FilterFunction<Integer>() {_			@Override_			public boolean filter(Integer value) throws Exception {_				return false__			}_		}).name("test_filter")__		opMethod.invoke(increment, resource4)___		DataStreamSink<Integer> sink = iteration.closeWith(increment).addSink(new SinkFunction<Integer>() {_			@Override_			public void invoke(Integer value) throws Exception {_			}_		}).disableChaining().name("test_sink")__		sinkMethod.invoke(sink, resource5)___		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		for (JobVertex jobVertex : jobGraph.getVertices()) {_			if (jobVertex.getName().contains("test_source")) {_				assertTrue(jobVertex.getMinResources().equals(resource1))__			} else if (jobVertex.getName().contains("Iteration_Source")) {_				assertTrue(jobVertex.getPreferredResources().equals(resource2))__			} else if (jobVertex.getName().contains("test_flatMap")) {_				assertTrue(jobVertex.getMinResources().equals(resource3.merge(resource4)))__			} else if (jobVertex.getName().contains("Iteration_Tail")) {_				assertTrue(jobVertex.getPreferredResources().equals(ResourceSpec.DEFAULT))__			} else if (jobVertex.getName().contains("test_sink")) {_				assertTrue(jobVertex.getMinResources().equals(resource5))__			}_		}_	};verifies,that,the,resources,are,merged,correctly,for,chained,operators,covers,middle,chaining,and,iteration,cases,when,generating,job,graph;test,public,void,test,resources,for,iteration,throws,exception,resource,spec,resource1,resource,spec,new,builder,set,cpu,cores,0,1,set,heap,memory,in,mb,100,build,resource,spec,resource2,resource,spec,new,builder,set,cpu,cores,0,2,set,heap,memory,in,mb,200,build,resource,spec,resource3,resource,spec,new,builder,set,cpu,cores,0,3,set,heap,memory,in,mb,300,build,resource,spec,resource4,resource,spec,new,builder,set,cpu,cores,0,4,set,heap,memory,in,mb,400,build,resource,spec,resource5,resource,spec,new,builder,set,cpu,cores,0,5,set,heap,memory,in,mb,500,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,sink,method,set,accessible,true,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,integer,source,env,add,source,new,parallel,source,function,integer,override,public,void,run,source,context,integer,ctx,throws,exception,override,public,void,cancel,name,op,method,invoke,source,resource1,iterative,stream,integer,iteration,source,iterate,3000,op,method,invoke,iteration,resource2,data,stream,integer,flat,map,iteration,flat,map,new,flat,map,function,integer,integer,override,public,void,flat,map,integer,value,collector,integer,out,throws,exception,out,collect,value,name,op,method,invoke,flat,map,resource3,data,stream,integer,increment,flat,map,filter,new,filter,function,integer,override,public,boolean,filter,integer,value,throws,exception,return,false,name,op,method,invoke,increment,resource4,data,stream,sink,integer,sink,iteration,close,with,increment,add,sink,new,sink,function,integer,override,public,void,invoke,integer,value,throws,exception,disable,chaining,name,sink,method,invoke,sink,resource5,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,for,job,vertex,job,vertex,job,graph,get,vertices,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource1,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource2,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource3,merge,resource4,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,preferred,resources,equals,resource,spec,default,else,if,job,vertex,get,name,contains,assert,true,job,vertex,get,min,resources,equals,resource5
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1484866640;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		JobVertex sourceVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(0)__		JobVertex mapPrintVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.get(3)___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,job,vertex,source,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,0,job,vertex,map,print,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,get,3,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1489149058;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.get(3)___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,get,3,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1489671806;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.get(3)___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,get,3,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1489671806;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.get(3)___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,get,3,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1489671807;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1489782894;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph(), 1 ).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,1,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1492530130;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1492678790;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = new StreamingJobGraphGenerator(env.getStreamGraph()).createJobGraph()___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,new,streaming,job,graph,generator,env,get,stream,graph,create,job,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1492680901;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1493195810;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1495484544;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1506618381;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
StreamingJobGraphGeneratorTest -> @Test 	public void testChainStartEndSetting() throws Exception;1513261900;Verifies that the chain start/end is correctly set.;@Test_	public void testChainStartEndSetting() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		_		env.fromElements(1, 2, 3)_			.map(new MapFunction<Integer, Integer>() {_				@Override_				public Integer map(Integer value) throws Exception {_					return value__				}_			})_			.print()__		JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(env.getStreamGraph())___		List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources()__		JobVertex sourceVertex = verticesSorted.get(0)__		JobVertex mapPrintVertex = verticesSorted.get(1)___		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType())__		assertEquals(ResultPartitionType.PIPELINED_BOUNDED, mapPrintVertex.getInputs().get(0).getSource().getResultType())___		StreamConfig sourceConfig = new StreamConfig(sourceVertex.getConfiguration())__		StreamConfig mapConfig = new StreamConfig(mapPrintVertex.getConfiguration())__		Map<Integer, StreamConfig> chainedConfigs = mapConfig.getTransitiveChainedTaskConfigs(getClass().getClassLoader())__		StreamConfig printConfig = chainedConfigs.values().iterator().next()___		assertTrue(sourceConfig.isChainStart())__		assertTrue(sourceConfig.isChainEnd())___		assertTrue(mapConfig.isChainStart())__		assertFalse(mapConfig.isChainEnd())___		assertFalse(printConfig.isChainStart())__		assertTrue(printConfig.isChainEnd())__	};verifies,that,the,chain,start,end,is,correctly,set;test,public,void,test,chain,start,end,setting,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,from,elements,1,2,3,map,new,map,function,integer,integer,override,public,integer,map,integer,value,throws,exception,return,value,print,job,graph,job,graph,streaming,job,graph,generator,create,job,graph,env,get,stream,graph,list,job,vertex,vertices,sorted,job,graph,get,vertices,sorted,topologically,from,sources,job,vertex,source,vertex,vertices,sorted,get,0,job,vertex,map,print,vertex,vertices,sorted,get,1,assert,equals,result,partition,type,source,vertex,get,produced,data,sets,get,0,get,result,type,assert,equals,result,partition,type,map,print,vertex,get,inputs,get,0,get,source,get,result,type,stream,config,source,config,new,stream,config,source,vertex,get,configuration,stream,config,map,config,new,stream,config,map,print,vertex,get,configuration,map,integer,stream,config,chained,configs,map,config,get,transitive,chained,task,configs,get,class,get,class,loader,stream,config,print,config,chained,configs,values,iterator,next,assert,true,source,config,is,chain,start,assert,true,source,config,is,chain,end,assert,true,map,config,is,chain,start,assert,false,map,config,is,chain,end,assert,false,print,config,is,chain,start,assert,true,print,config,is,chain,end
