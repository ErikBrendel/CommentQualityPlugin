# id;timestamp;commentText;codeText;commentWords;codeWords
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1518008956;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,keyed,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1520351570;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,keyed,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1520354103;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,keyed,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1523545470;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1534492343;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnNonKeyed();1547196539;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new KeyedBroadcastProcessFunction<String, Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1488799576;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1489165080;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1489671807;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1493195810;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1495484544;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1513261900;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1515177485;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1515481551;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1518008865;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1518008896;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1518008932;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedProcessTranslation();1518008956;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	@Deprecated 	public void testKeyedStreamProcessTranslation();1520351570;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	@Deprecated_	public void testKeyedStreamProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof LegacyKeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,deprecated,public,void,test,keyed,stream,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,legacy,keyed,process,operator
DataStreamTest -> @Test 	@Deprecated 	public void testKeyedStreamProcessTranslation();1520354103;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	@Deprecated_	public void testKeyedStreamProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof LegacyKeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,deprecated,public,void,test,keyed,stream,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,legacy,keyed,process,operator
DataStreamTest -> @Test 	@Deprecated 	public void testKeyedStreamProcessTranslation();1523545470;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	@Deprecated_	public void testKeyedStreamProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof LegacyKeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,deprecated,public,void,test,keyed,stream,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,legacy,keyed,process,operator
DataStreamTest -> @Test 	@Deprecated 	public void testKeyedStreamProcessTranslation();1534492343;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	@Deprecated_	public void testKeyedStreamProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof LegacyKeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,deprecated,public,void,test,keyed,stream,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,legacy,keyed,process,operator
DataStreamTest -> @Test 	@Deprecated 	public void testKeyedStreamProcessTranslation();1547196539;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	@Deprecated_	public void testKeyedStreamProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof LegacyKeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,deprecated,public,void,test,keyed,stream,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,legacy,keyed,process,operator
DataStreamTest -> @Test 	public void testNaming() throws Exception;1445418103;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStreamSink<Long> connected = dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				}).name("testCoFlatMap")_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,sink,long,connected,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1449051578;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStreamSink<Long> connected = dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				}).name("testCoFlatMap")_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,sink,long,connected,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1454527671;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStreamSink<Long> connected = dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				}).name("testCoFlatMap")_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,sink,long,connected,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1454527671;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStreamSink<Long> connected = dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				}).name("testCoFlatMap")_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,sink,long,connected,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1455718153;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1456528025;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1456778239;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1467726666;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1472663071;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1478532357;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1478855879;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1480354709;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1488304750;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1488799576;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1489165080;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1489671807;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}_					_				}).name("testCoFlatMap")_				_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1493195810;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1495484544;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1513261900;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1515177485;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1515481551;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1518008865;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1518008896;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1518008932;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1518008956;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1520351570;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1520354103;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1523545470;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1534492343;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testNaming() throws Exception;1547196539;Tests {@link SingleOutputStreamOperator#name(String)} functionality.__@throws Exception;@Test_	public void testNaming() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> dataStream1 = env.generateSequence(0, 0).name("testSource1")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		DataStream<Long> dataStream2 = env.generateSequence(0, 0).name("testSource2")_				.map(new MapFunction<Long, Long>() {_					@Override_					public Long map(Long value) throws Exception {_						return null__					}_				}).name("testMap")___		dataStream1.connect(dataStream2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {__					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {}__				}).name("testCoFlatMap")__				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})_				.name("testWindowFold")_				.print()___		_		String plan = env.getExecutionPlan()___		assertTrue(plan.contains("testSource1"))__		assertTrue(plan.contains("testSource2"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testMap"))__		assertTrue(plan.contains("testCoFlatMap"))__		assertTrue(plan.contains("testWindowFold"))__	};tests,link,single,output,stream,operator,name,string,functionality,throws,exception;test,public,void,test,naming,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,data,stream1,env,generate,sequence,0,0,name,test,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream,long,data,stream2,env,generate,sequence,0,0,name,test,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,name,test,map,data,stream1,connect,data,stream2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,name,test,co,flat,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,name,test,window,fold,print,string,plan,env,get,execution,plan,assert,true,plan,contains,test,source1,assert,true,plan,contains,test,source2,assert,true,plan,contains,test,map,assert,true,plan,contains,test,map,assert,true,plan,contains,test,co,flat,map,assert,true,plan,contains,test,window,fold
DataStreamTest -> @Test 	public void testTypeInfo();1488304750;Tests whether resource gets set.;@Test_	public void testTypeInfo() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> src1 = env.generateSequence(0, 0)__		assertEquals(TypeExtractor.getForClass(Long.class), src1.getType())___		DataStream<Tuple2<Integer, String>> map = src1.map(new MapFunction<Long, Tuple2<Integer, String>>() {_			@Override_			public Tuple2<Integer, String> map(Long value) throws Exception {_				return null__			}_		})___		assertEquals(TypeExtractor.getForObject(new Tuple2<>(0, "")), map.getType())___		DataStream<String> window = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.apply(new AllWindowFunction<Tuple2<Integer, String>, String, GlobalWindow>() {_					@Override_					public void apply(GlobalWindow window,_							Iterable<Tuple2<Integer, String>> values,_							Collector<String> out) throws Exception {__					}_				})___		assertEquals(TypeExtractor.getForClass(String.class), window.getType())___		DataStream<CustomPOJO> flatten = window_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.fold(new CustomPOJO(), new FoldFunction<String, CustomPOJO>() {_					private static final long serialVersionUID = 1L___					@Override_					public CustomPOJO fold(CustomPOJO accumulator, String value) throws Exception {_						return null__					}_				})___		assertEquals(TypeExtractor.getForClass(CustomPOJO.class), flatten.getType())__	};tests,whether,resource,gets,set;test,public,void,test,type,info,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,src1,env,generate,sequence,0,0,assert,equals,type,extractor,get,for,class,long,class,src1,get,type,data,stream,tuple2,integer,string,map,src1,map,new,map,function,long,tuple2,integer,string,override,public,tuple2,integer,string,map,long,value,throws,exception,return,null,assert,equals,type,extractor,get,for,object,new,tuple2,0,map,get,type,data,stream,string,window,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,apply,new,all,window,function,tuple2,integer,string,string,global,window,override,public,void,apply,global,window,window,iterable,tuple2,integer,string,values,collector,string,out,throws,exception,assert,equals,type,extractor,get,for,class,string,class,window,get,type,data,stream,custom,pojo,flatten,window,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,fold,new,custom,pojo,new,fold,function,string,custom,pojo,private,static,final,long,serial,version,uid,1l,override,public,custom,pojo,fold,custom,pojo,accumulator,string,value,throws,exception,return,null,assert,equals,type,extractor,get,for,class,custom,pojo,class,flatten,get,type
DataStreamTest -> @Test 	public void testTypeInfo();1488799576;Tests whether resource gets set.;@Test_	public void testTypeInfo() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> src1 = env.generateSequence(0, 0)__		assertEquals(TypeExtractor.getForClass(Long.class), src1.getType())___		DataStream<Tuple2<Integer, String>> map = src1.map(new MapFunction<Long, Tuple2<Integer, String>>() {_			@Override_			public Tuple2<Integer, String> map(Long value) throws Exception {_				return null__			}_		})___		assertEquals(TypeExtractor.getForObject(new Tuple2<>(0, "")), map.getType())___		DataStream<String> window = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.apply(new AllWindowFunction<Tuple2<Integer, String>, String, GlobalWindow>() {_					@Override_					public void apply(GlobalWindow window,_							Iterable<Tuple2<Integer, String>> values,_							Collector<String> out) throws Exception {__					}_				})___		assertEquals(TypeExtractor.getForClass(String.class), window.getType())___		DataStream<CustomPOJO> flatten = window_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.fold(new CustomPOJO(), new FoldFunction<String, CustomPOJO>() {_					private static final long serialVersionUID = 1L___					@Override_					public CustomPOJO fold(CustomPOJO accumulator, String value) throws Exception {_						return null__					}_				})___		assertEquals(TypeExtractor.getForClass(CustomPOJO.class), flatten.getType())__	};tests,whether,resource,gets,set;test,public,void,test,type,info,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,src1,env,generate,sequence,0,0,assert,equals,type,extractor,get,for,class,long,class,src1,get,type,data,stream,tuple2,integer,string,map,src1,map,new,map,function,long,tuple2,integer,string,override,public,tuple2,integer,string,map,long,value,throws,exception,return,null,assert,equals,type,extractor,get,for,object,new,tuple2,0,map,get,type,data,stream,string,window,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,apply,new,all,window,function,tuple2,integer,string,string,global,window,override,public,void,apply,global,window,window,iterable,tuple2,integer,string,values,collector,string,out,throws,exception,assert,equals,type,extractor,get,for,class,string,class,window,get,type,data,stream,custom,pojo,flatten,window,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,fold,new,custom,pojo,new,fold,function,string,custom,pojo,private,static,final,long,serial,version,uid,1l,override,public,custom,pojo,fold,custom,pojo,accumulator,string,value,throws,exception,return,null,assert,equals,type,extractor,get,for,class,custom,pojo,class,flatten,get,type
DataStreamTest -> @Test 	public void testTypeInfo();1489165080;Tests whether resource gets set.;@Test_	public void testTypeInfo() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Long> src1 = env.generateSequence(0, 0)__		assertEquals(TypeExtractor.getForClass(Long.class), src1.getType())___		DataStream<Tuple2<Integer, String>> map = src1.map(new MapFunction<Long, Tuple2<Integer, String>>() {_			@Override_			public Tuple2<Integer, String> map(Long value) throws Exception {_				return null__			}_		})___		assertEquals(TypeExtractor.getForObject(new Tuple2<>(0, "")), map.getType())___		DataStream<String> window = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.apply(new AllWindowFunction<Tuple2<Integer, String>, String, GlobalWindow>() {_					@Override_					public void apply(GlobalWindow window,_							Iterable<Tuple2<Integer, String>> values,_							Collector<String> out) throws Exception {__					}_				})___		assertEquals(TypeExtractor.getForClass(String.class), window.getType())___		DataStream<CustomPOJO> flatten = window_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(5)))_				.fold(new CustomPOJO(), new FoldFunction<String, CustomPOJO>() {_					private static final long serialVersionUID = 1L___					@Override_					public CustomPOJO fold(CustomPOJO accumulator, String value) throws Exception {_						return null__					}_				})___		assertEquals(TypeExtractor.getForClass(CustomPOJO.class), flatten.getType())__	};tests,whether,resource,gets,set;test,public,void,test,type,info,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,long,src1,env,generate,sequence,0,0,assert,equals,type,extractor,get,for,class,long,class,src1,get,type,data,stream,tuple2,integer,string,map,src1,map,new,map,function,long,tuple2,integer,string,override,public,tuple2,integer,string,map,long,value,throws,exception,return,null,assert,equals,type,extractor,get,for,object,new,tuple2,0,map,get,type,data,stream,string,window,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,apply,new,all,window,function,tuple2,integer,string,string,global,window,override,public,void,apply,global,window,window,iterable,tuple2,integer,string,values,collector,string,out,throws,exception,assert,equals,type,extractor,get,for,class,string,class,window,get,type,data,stream,custom,pojo,flatten,window,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,5,fold,new,custom,pojo,new,fold,function,string,custom,pojo,private,static,final,long,serial,version,uid,1l,override,public,custom,pojo,fold,custom,pojo,accumulator,string,value,throws,exception,return,null,assert,equals,type,extractor,get,for,class,custom,pojo,class,flatten,get,type
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnKeyed();1518008865;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,long,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnKeyed();1518008896;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,long,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnKeyed();1518008932;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1518008956;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1520351570;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1520354103;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1523545470;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1534492343;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testFailedTranslationOnKeyed();1547196539;Tests that with a {@link KeyedStream} we have to provide a {@link KeyedBroadcastProcessFunction}.;@Test_	public void testFailedTranslationOnKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				}).keyBy((KeySelector<Long, Long>) value -> value)___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		BroadcastConnectedStream<Long, String> bcStream = srcOne.connect(broadcast)___		expectedException.expect(IllegalArgumentException.class)__		bcStream.process(_				new BroadcastProcessFunction<Long, String, String>() {_					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, ReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,link,keyed,stream,we,have,to,provide,a,link,keyed,broadcast,process,function;test,public,void,test,failed,translation,on,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,key,by,key,selector,long,long,value,value,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,broadcast,connected,stream,long,string,bc,stream,src,one,connect,broadcast,expected,exception,expect,illegal,argument,exception,class,bc,stream,process,new,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	public void testKeyedStreamKeyedProcessTranslation();1520351570;Verify that a {@link KeyedStream#process(KeyedProcessFunction)} call is correctly translated to an operator.;@Test_	public void testKeyedStreamKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		KeyedProcessFunction<Long, Long, Integer> keyedProcessFunction = new KeyedProcessFunction<Long, Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(Long value, Context ctx, Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(long timestamp, OnTimerContext ctx, Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(keyedProcessFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(keyedProcessFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,keyed,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,stream,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,keyed,process,function,long,long,integer,keyed,process,function,new,keyed,process,function,long,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,keyed,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,keyed,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedStreamKeyedProcessTranslation();1520354103;Verify that a {@link KeyedStream#process(KeyedProcessFunction)} call is correctly translated to an operator.;@Test_	public void testKeyedStreamKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		KeyedProcessFunction<Long, Long, Integer> keyedProcessFunction = new KeyedProcessFunction<Long, Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(Long value, Context ctx, Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(long timestamp, OnTimerContext ctx, Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(keyedProcessFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(keyedProcessFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,keyed,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,stream,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,keyed,process,function,long,long,integer,keyed,process,function,new,keyed,process,function,long,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,keyed,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,keyed,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedStreamKeyedProcessTranslation();1523545470;Verify that a {@link KeyedStream#process(KeyedProcessFunction)} call is correctly translated to an operator.;@Test_	public void testKeyedStreamKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		KeyedProcessFunction<Long, Long, Integer> keyedProcessFunction = new KeyedProcessFunction<Long, Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(Long value, Context ctx, Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(long timestamp, OnTimerContext ctx, Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(keyedProcessFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(keyedProcessFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,keyed,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,stream,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,keyed,process,function,long,long,integer,keyed,process,function,new,keyed,process,function,long,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,keyed,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,keyed,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedStreamKeyedProcessTranslation();1534492343;Verify that a {@link KeyedStream#process(KeyedProcessFunction)} call is correctly translated to an operator.;@Test_	public void testKeyedStreamKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		KeyedProcessFunction<Long, Long, Integer> keyedProcessFunction = new KeyedProcessFunction<Long, Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(Long value, Context ctx, Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(long timestamp, OnTimerContext ctx, Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(keyedProcessFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(keyedProcessFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,keyed,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,stream,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,keyed,process,function,long,long,integer,keyed,process,function,new,keyed,process,function,long,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,keyed,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,keyed,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testKeyedStreamKeyedProcessTranslation();1547196539;Verify that a {@link KeyedStream#process(KeyedProcessFunction)} call is correctly translated to an operator.;@Test_	public void testKeyedStreamKeyedProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		KeyedProcessFunction<Long, Long, Integer> keyedProcessFunction = new KeyedProcessFunction<Long, Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(Long value, Context ctx, Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(long timestamp, OnTimerContext ctx, Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(keyedProcessFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(keyedProcessFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof KeyedProcessOperator)__	};verify,that,a,link,keyed,stream,process,keyed,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,keyed,stream,keyed,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,keyed,process,function,long,long,integer,keyed,process,function,new,keyed,process,function,long,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,keyed,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,keyed,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,keyed,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1480354709;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1488304750;Verify that a {@link KeyedStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.keyBy(new IdentityKeySelector<Long>())_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,keyed,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,key,by,new,identity,key,selector,long,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1488799576;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1489165080;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1489671807;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1493195810;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1495484544;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1513261900;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1515177485;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1515481551;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1518008865;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1518008896;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1518008932;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1518008956;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to_an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1520351570;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1520354103;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1523545470;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1534492343;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test 	public void testProcessTranslation();1547196539;Verify that a {@link DataStream#process(ProcessFunction)} call is correctly translated to an operator.;@Test_	public void testProcessTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		ProcessFunction<Long, Integer> processFunction = new ProcessFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void processElement(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {_				_			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {_				_			}_		}___		DataStream<Integer> processed = src_				.process(processFunction)___		processed.addSink(new DiscardingSink<Integer>())___		assertEquals(processFunction, getFunctionForDataStream(processed))__		assertTrue(getOperatorForDataStream(processed) instanceof ProcessOperator)__	};verify,that,a,link,data,stream,process,process,function,call,is,correctly,translated,to,an,operator;test,public,void,test,process,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,process,function,long,integer,process,function,new,process,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,process,element,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,processed,src,process,process,function,processed,add,sink,new,discarding,sink,integer,assert,equals,process,function,get,function,for,data,stream,processed,assert,true,get,operator,for,data,stream,processed,instanceof,process,operator
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnNonKeyed();1518008865;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new KeyedBroadcastProcessFunction<Long, String, String>() {__					@Override_					public void processBroadcastElement(String value, Context ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,long,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,keyed,broadcast,process,function,long,string,string,override,public,void,process,broadcast,element,string,value,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnNonKeyed();1518008896;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String, Long, String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {__					@Override_					public void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,long,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,keyed,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test(expected = IllegalArgumentException.class) 	public void testFailedTranslationOnNonKeyed();1518008932;Tests that with a non-keyed stream we have to provide a {@link BroadcastProcessFunction}.;@Test(expected = IllegalArgumentException.class)_	public void testFailedTranslationOnNonKeyed() {__		final MapStateDescriptor<Long, String> descriptor = new MapStateDescriptor<>(_				"broadcast", BasicTypeInfo.LONG_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO_		)___		final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		final DataStream<Long> srcOne = env.generateSequence(0L, 5L)_				.assignTimestampsAndWatermarks(new CustomWmEmitter<Long>() {__					@Override_					public long extractTimestamp(Long element, long previousElementTimestamp) {_						return element__					}_				})___		final DataStream<String> srcTwo = env.fromElements("Test:0", "Test:1", "Test:2", "Test:3", "Test:4", "Test:5")_				.assignTimestampsAndWatermarks(new CustomWmEmitter<String>() {_					@Override_					public long extractTimestamp(String element, long previousElementTimestamp) {_						return Long.parseLong(element.split(":")[1])__					}_				})___		BroadcastStream<String> broadcast = srcTwo.broadcast(descriptor)__		srcOne.connect(broadcast)_				.process(new KeyedBroadcastProcessFunction<String, Long, String, String>() {__					@Override_					public void processBroadcastElement(String value, KeyedContext ctx, Collector<String> out) throws Exception {_						_					}__					@Override_					public void processElement(Long value, KeyedReadOnlyContext ctx, Collector<String> out) throws Exception {_						_					}_				})__	};tests,that,with,a,non,keyed,stream,we,have,to,provide,a,link,broadcast,process,function;test,expected,illegal,argument,exception,class,public,void,test,failed,translation,on,non,keyed,final,map,state,descriptor,long,string,descriptor,new,map,state,descriptor,broadcast,basic,type,info,basic,type,info,final,stream,execution,environment,env,stream,execution,environment,get,execution,environment,final,data,stream,long,src,one,env,generate,sequence,0l,5l,assign,timestamps,and,watermarks,new,custom,wm,emitter,long,override,public,long,extract,timestamp,long,element,long,previous,element,timestamp,return,element,final,data,stream,string,src,two,env,from,elements,test,0,test,1,test,2,test,3,test,4,test,5,assign,timestamps,and,watermarks,new,custom,wm,emitter,string,override,public,long,extract,timestamp,string,element,long,previous,element,timestamp,return,long,parse,long,element,split,1,broadcast,stream,string,broadcast,src,two,broadcast,descriptor,src,one,connect,broadcast,process,new,keyed,broadcast,process,function,string,long,string,string,override,public,void,process,broadcast,element,string,value,keyed,context,ctx,collector,string,out,throws,exception,override,public,void,process,element,long,value,keyed,read,only,context,ctx,collector,string,out,throws,exception
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1445418103;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionByHash} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.partitionByHash(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.partitionByHash(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.partitionByHash("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.partitionByHash(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), pid4)))___		assertFalse(isKeyed(partition1))__		assertFalse(isKeyed(partition3))__		assertFalse(isKeyed(partition2))__		assertFalse(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.partitionByHash(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.partitionByHash(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.partitionByHash("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.partitionByHash(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.partitionByHash(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdge(src2.getId(),_				connectDownStreamId5)))___		assertFalse(isKeyed(connectedPartition1))__		assertFalse(isKeyed(connectedPartition2))__		assertFalse(isKeyed(connectedPartition3))__		assertFalse(isKeyed(connectedPartition4))__		assertFalse(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,by,hash,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,partition,by,hash,0,data,stream,tuple2,long,long,partition2,src1,partition,by,hash,1,0,data,stream,tuple2,long,long,partition3,src1,partition,by,hash,f0,data,stream,tuple2,long,long,partition4,src1,partition,by,hash,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,pid4,assert,false,is,keyed,partition1,assert,false,is,keyed,partition3,assert,false,is,keyed,partition2,assert,false,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,partition,by,hash,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,partition,by,hash,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,partition,by,hash,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,partition,by,hash,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,partition,by,hash,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edge,src2,get,id,connect,down,stream,id5,assert,false,is,keyed,connected,partition1,assert,false,is,keyed,connected,partition2,assert,false,is,keyed,connected,partition3,assert,false,is,keyed,connected,partition4,assert,false,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1449051578;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionByHash} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.partitionByHash(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.partitionByHash(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.partitionByHash("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.partitionByHash(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertFalse(isKeyed(partition1))__		assertFalse(isKeyed(partition3))__		assertFalse(isKeyed(partition2))__		assertFalse(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.partitionByHash(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.partitionByHash(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.partitionByHash("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.partitionByHash(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.partitionByHash(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertFalse(isKeyed(connectedPartition1))__		assertFalse(isKeyed(connectedPartition2))__		assertFalse(isKeyed(connectedPartition3))__		assertFalse(isKeyed(connectedPartition4))__		assertFalse(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,by,hash,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,partition,by,hash,0,data,stream,tuple2,long,long,partition2,src1,partition,by,hash,1,0,data,stream,tuple2,long,long,partition3,src1,partition,by,hash,f0,data,stream,tuple2,long,long,partition4,src1,partition,by,hash,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,false,is,keyed,partition1,assert,false,is,keyed,partition3,assert,false,is,keyed,partition2,assert,false,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,partition,by,hash,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,partition,by,hash,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,partition,by,hash,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,partition,by,hash,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,partition,by,hash,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,false,is,keyed,connected,partition1,assert,false,is,keyed,connected,partition2,assert,false,is,keyed,connected,partition3,assert,false,is,keyed,connected,partition4,assert,false,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1454527671;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionByHash} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.partitionByHash(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.partitionByHash(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.partitionByHash("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.partitionByHash(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertFalse(isKeyed(partition1))__		assertFalse(isKeyed(partition3))__		assertFalse(isKeyed(partition2))__		assertFalse(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.partitionByHash(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.partitionByHash(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.partitionByHash("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.partitionByHash(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.partitionByHash(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertFalse(isKeyed(connectedPartition1))__		assertFalse(isKeyed(connectedPartition2))__		assertFalse(isKeyed(connectedPartition3))__		assertFalse(isKeyed(connectedPartition4))__		assertFalse(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,by,hash,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,partition,by,hash,0,data,stream,tuple2,long,long,partition2,src1,partition,by,hash,1,0,data,stream,tuple2,long,long,partition3,src1,partition,by,hash,f0,data,stream,tuple2,long,long,partition4,src1,partition,by,hash,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,false,is,keyed,partition1,assert,false,is,keyed,partition3,assert,false,is,keyed,partition2,assert,false,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,partition,by,hash,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,partition,by,hash,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,partition,by,hash,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,partition,by,hash,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,partition,by,hash,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,false,is,keyed,connected,partition1,assert,false,is,keyed,connected,partition2,assert,false,is,keyed,connected,partition3,assert,false,is,keyed,connected,partition4,assert,false,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1454527671;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionByHash} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.partitionByHash(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.partitionByHash(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.partitionByHash("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.partitionByHash(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertFalse(isKeyed(partition1))__		assertFalse(isKeyed(partition3))__		assertFalse(isKeyed(partition2))__		assertFalse(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.partitionByHash(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.partitionByHash(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.partitionByHash("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.partitionByHash(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.partitionByHash(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertFalse(isKeyed(connectedPartition1))__		assertFalse(isKeyed(connectedPartition2))__		assertFalse(isKeyed(connectedPartition3))__		assertFalse(isKeyed(connectedPartition4))__		assertFalse(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,by,hash,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,partition,by,hash,0,data,stream,tuple2,long,long,partition2,src1,partition,by,hash,1,0,data,stream,tuple2,long,long,partition3,src1,partition,by,hash,f0,data,stream,tuple2,long,long,partition4,src1,partition,by,hash,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,false,is,keyed,partition1,assert,false,is,keyed,partition3,assert,false,is,keyed,partition2,assert,false,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,partition,by,hash,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,partition,by,hash,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,partition,by,hash,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,partition,by,hash,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,partition,by,hash,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,false,is,keyed,connected,partition1,assert,false,is,keyed,connected,partition2,assert,false,is,keyed,connected,partition3,assert,false,is,keyed,connected,partition4,assert,false,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1455718153;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1456528025;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1456778239;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1467726666;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1472663071;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1478532357;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1478855879;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1480354709;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1488304750;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1488799576;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1489165080;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1489671807;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1493195810;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1495484544;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1513261900;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1515177485;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1515481551;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1518008865;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1518008896;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1518008932;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1518008956;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1520351570;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1520354103;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1523545470;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1534492343;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPartitioning();1547196539;Tests that {@link DataStream#keyBy} and {@link DataStream#partitionCustom(Partitioner, int)} result in_different and correct topologies. Does the some for the {@link ConnectedStreams}.;@Test_	@SuppressWarnings("unchecked")_	public void testPartitioning() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Tuple2<Long, Long>> src1 = env.fromElements(new Tuple2<>(0L, 0L))__		DataStream<Tuple2<Long, Long>> src2 = env.fromElements(new Tuple2<>(0L, 0L))__		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connected = src1.connect(src2)___		_		DataStream<Tuple2<Long, Long>> group1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> group2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> group3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> group4 = src1.keyBy(new FirstSelector())___		int id1 = createDownStreamId(group1)__		int id2 = createDownStreamId(group2)__		int id3 = createDownStreamId(group3)__		int id4 = createDownStreamId(group4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), id4)))___		assertTrue(isKeyed(group1))__		assertTrue(isKeyed(group2))__		assertTrue(isKeyed(group3))__		assertTrue(isKeyed(group4))___		_		DataStream<Tuple2<Long, Long>> partition1 = src1.keyBy(0)__		DataStream<Tuple2<Long, Long>> partition2 = src1.keyBy(1, 0)__		DataStream<Tuple2<Long, Long>> partition3 = src1.keyBy("f0")__		DataStream<Tuple2<Long, Long>> partition4 = src1.keyBy(new FirstSelector())___		int pid1 = createDownStreamId(partition1)__		int pid2 = createDownStreamId(partition2)__		int pid3 = createDownStreamId(partition3)__		int pid4 = createDownStreamId(partition4)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), pid4)))___		assertTrue(isKeyed(partition1))__		assertTrue(isKeyed(partition3))__		assertTrue(isKeyed(partition2))__		assertTrue(isKeyed(partition4))___		_		Partitioner<Long> longPartitioner = new Partitioner<Long>() {_			@Override_			public int partition(Long key, int numPartitions) {_				return 100__			}_		}___		DataStream<Tuple2<Long, Long>> customPartition1 = src1.partitionCustom(longPartitioner, 0)__		DataStream<Tuple2<Long, Long>> customPartition3 = src1.partitionCustom(longPartitioner, "f0")__		DataStream<Tuple2<Long, Long>> customPartition4 = src1.partitionCustom(longPartitioner, new FirstSelector())___		int cid1 = createDownStreamId(customPartition1)__		int cid2 = createDownStreamId(customPartition3)__		int cid3 = createDownStreamId(customPartition4)___		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid1)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid2)))__		assertTrue(isCustomPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), cid3)))___		assertFalse(isKeyed(customPartition1))__		assertFalse(isKeyed(customPartition3))__		assertFalse(isKeyed(customPartition4))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup1 = connected.keyBy(0, 0)__		Integer downStreamId1 = createDownStreamId(connectedGroup1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer downStreamId2 = createDownStreamId(connectedGroup2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup3 = connected.keyBy("f0", "f0")__		Integer downStreamId3 = createDownStreamId(connectedGroup3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer downStreamId4 = createDownStreamId(connectedGroup4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedGroup5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer downStreamId5 = createDownStreamId(connectedGroup5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(), downStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(), downStreamId5)))___		assertTrue(isKeyed(connectedGroup1))__		assertTrue(isKeyed(connectedGroup2))__		assertTrue(isKeyed(connectedGroup3))__		assertTrue(isKeyed(connectedGroup4))__		assertTrue(isKeyed(connectedGroup5))___		_		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition1 = connected.keyBy(0, 0)__		Integer connectDownStreamId1 = createDownStreamId(connectedPartition1)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition2 = connected.keyBy(new int[]{0}, new int[]{0})__		Integer connectDownStreamId2 = createDownStreamId(connectedPartition2)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition3 = connected.keyBy("f0", "f0")__		Integer connectDownStreamId3 = createDownStreamId(connectedPartition3)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition4 = connected.keyBy(new String[]{"f0"}, new String[]{"f0"})__		Integer connectDownStreamId4 = createDownStreamId(connectedPartition4)___		ConnectedStreams<Tuple2<Long, Long>, Tuple2<Long, Long>> connectedPartition5 = connected.keyBy(new FirstSelector(), new FirstSelector())__		Integer connectDownStreamId5 = createDownStreamId(connectedPartition5)___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId1)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId1)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId2)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId2)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId3)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId3)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId4)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId4)))___		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src1.getId(),_				connectDownStreamId5)))__		assertTrue(isPartitioned(env.getStreamGraph().getStreamEdges(src2.getId(),_				connectDownStreamId5)))___		assertTrue(isKeyed(connectedPartition1))__		assertTrue(isKeyed(connectedPartition2))__		assertTrue(isKeyed(connectedPartition3))__		assertTrue(isKeyed(connectedPartition4))__		assertTrue(isKeyed(connectedPartition5))__	};tests,that,link,data,stream,key,by,and,link,data,stream,partition,custom,partitioner,int,result,in,different,and,correct,topologies,does,the,some,for,the,link,connected,streams;test,suppress,warnings,unchecked,public,void,test,partitioning,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,tuple2,long,long,src1,env,from,elements,new,tuple2,0l,0l,data,stream,tuple2,long,long,src2,env,from,elements,new,tuple2,0l,0l,connected,streams,tuple2,long,long,tuple2,long,long,connected,src1,connect,src2,data,stream,tuple2,long,long,group1,src1,key,by,0,data,stream,tuple2,long,long,group2,src1,key,by,1,0,data,stream,tuple2,long,long,group3,src1,key,by,f0,data,stream,tuple2,long,long,group4,src1,key,by,new,first,selector,int,id1,create,down,stream,id,group1,int,id2,create,down,stream,id,group2,int,id3,create,down,stream,id,group3,int,id4,create,down,stream,id,group4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,id4,assert,true,is,keyed,group1,assert,true,is,keyed,group2,assert,true,is,keyed,group3,assert,true,is,keyed,group4,data,stream,tuple2,long,long,partition1,src1,key,by,0,data,stream,tuple2,long,long,partition2,src1,key,by,1,0,data,stream,tuple2,long,long,partition3,src1,key,by,f0,data,stream,tuple2,long,long,partition4,src1,key,by,new,first,selector,int,pid1,create,down,stream,id,partition1,int,pid2,create,down,stream,id,partition2,int,pid3,create,down,stream,id,partition3,int,pid4,create,down,stream,id,partition4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,pid4,assert,true,is,keyed,partition1,assert,true,is,keyed,partition3,assert,true,is,keyed,partition2,assert,true,is,keyed,partition4,partitioner,long,long,partitioner,new,partitioner,long,override,public,int,partition,long,key,int,num,partitions,return,100,data,stream,tuple2,long,long,custom,partition1,src1,partition,custom,long,partitioner,0,data,stream,tuple2,long,long,custom,partition3,src1,partition,custom,long,partitioner,f0,data,stream,tuple2,long,long,custom,partition4,src1,partition,custom,long,partitioner,new,first,selector,int,cid1,create,down,stream,id,custom,partition1,int,cid2,create,down,stream,id,custom,partition3,int,cid3,create,down,stream,id,custom,partition4,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid1,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid2,assert,true,is,custom,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,cid3,assert,false,is,keyed,custom,partition1,assert,false,is,keyed,custom,partition3,assert,false,is,keyed,custom,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group1,connected,key,by,0,0,integer,down,stream,id1,create,down,stream,id,connected,group1,connected,streams,tuple2,long,long,tuple2,long,long,connected,group2,connected,key,by,new,int,0,new,int,0,integer,down,stream,id2,create,down,stream,id,connected,group2,connected,streams,tuple2,long,long,tuple2,long,long,connected,group3,connected,key,by,f0,f0,integer,down,stream,id3,create,down,stream,id,connected,group3,connected,streams,tuple2,long,long,tuple2,long,long,connected,group4,connected,key,by,new,string,f0,new,string,f0,integer,down,stream,id4,create,down,stream,id,connected,group4,connected,streams,tuple2,long,long,tuple2,long,long,connected,group5,connected,key,by,new,first,selector,new,first,selector,integer,down,stream,id5,create,down,stream,id,connected,group5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,down,stream,id5,assert,true,is,keyed,connected,group1,assert,true,is,keyed,connected,group2,assert,true,is,keyed,connected,group3,assert,true,is,keyed,connected,group4,assert,true,is,keyed,connected,group5,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition1,connected,key,by,0,0,integer,connect,down,stream,id1,create,down,stream,id,connected,partition1,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition2,connected,key,by,new,int,0,new,int,0,integer,connect,down,stream,id2,create,down,stream,id,connected,partition2,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition3,connected,key,by,f0,f0,integer,connect,down,stream,id3,create,down,stream,id,connected,partition3,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition4,connected,key,by,new,string,f0,new,string,f0,integer,connect,down,stream,id4,create,down,stream,id,connected,partition4,connected,streams,tuple2,long,long,tuple2,long,long,connected,partition5,connected,key,by,new,first,selector,new,first,selector,integer,connect,down,stream,id5,create,down,stream,id,connected,partition5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id1,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id2,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id3,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id4,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src1,get,id,connect,down,stream,id5,assert,true,is,partitioned,env,get,stream,graph,get,stream,edges,src2,get,id,connect,down,stream,id5,assert,true,is,keyed,connected,partition1,assert,true,is,keyed,connected,partition2,assert,true,is,keyed,connected,partition3,assert,true,is,keyed,connected,partition4,assert,true,is,keyed,connected,partition5
DataStreamTest -> @Test 	public void testTimelyFlatMapTranslation();1478532357;Verify that a timely flat map call is correctly translated to an operator.;@Test_	public void testTimelyFlatMapTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		TimelyFlatMapFunction<Long, Integer> timelyFlatMapFunction = new TimelyFlatMapFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void flatMap(_					Long value,_					TimerService timerService,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					TimeDomain timeDomain,_					TimerService timerService,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> flatMapped = src_				.keyBy(new IdentityKeySelector<Long>())_				.flatMap(timelyFlatMapFunction)___		flatMapped.addSink(new DiscardingSink<Integer>())___		assertEquals(timelyFlatMapFunction, getFunctionForDataStream(flatMapped))__		assertTrue(getOperatorForDataStream(flatMapped) instanceof StreamTimelyFlatMap)__	};verify,that,a,timely,flat,map,call,is,correctly,translated,to,an,operator;test,public,void,test,timely,flat,map,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,timely,flat,map,function,long,integer,timely,flat,map,function,new,timely,flat,map,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,long,value,timer,service,timer,service,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,time,domain,time,domain,timer,service,timer,service,collector,integer,out,throws,exception,data,stream,integer,flat,mapped,src,key,by,new,identity,key,selector,long,flat,map,timely,flat,map,function,flat,mapped,add,sink,new,discarding,sink,integer,assert,equals,timely,flat,map,function,get,function,for,data,stream,flat,mapped,assert,true,get,operator,for,data,stream,flat,mapped,instanceof,stream,timely,flat,map
DataStreamTest -> @Test 	public void testTimelyFlatMapTranslation();1478855879;Verify that a timely flat map call is correctly translated to an operator.;@Test_	public void testTimelyFlatMapTranslation() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		DataStreamSource<Long> src = env.generateSequence(0, 0)___		TimelyFlatMapFunction<Long, Integer> timelyFlatMapFunction = new TimelyFlatMapFunction<Long, Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public void flatMap(_					Long value,_					Context ctx,_					Collector<Integer> out) throws Exception {__			}__			@Override_			public void onTimer(_					long timestamp,_					OnTimerContext ctx,_					Collector<Integer> out) throws Exception {__			}_		}___		DataStream<Integer> flatMapped = src_				.keyBy(new IdentityKeySelector<Long>())_				.flatMap(timelyFlatMapFunction)___		flatMapped.addSink(new DiscardingSink<Integer>())___		assertEquals(timelyFlatMapFunction, getFunctionForDataStream(flatMapped))__		assertTrue(getOperatorForDataStream(flatMapped) instanceof StreamTimelyFlatMap)__	};verify,that,a,timely,flat,map,call,is,correctly,translated,to,an,operator;test,public,void,test,timely,flat,map,translation,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,long,src,env,generate,sequence,0,0,timely,flat,map,function,long,integer,timely,flat,map,function,new,timely,flat,map,function,long,integer,private,static,final,long,serial,version,uid,1l,override,public,void,flat,map,long,value,context,ctx,collector,integer,out,throws,exception,override,public,void,on,timer,long,timestamp,on,timer,context,ctx,collector,integer,out,throws,exception,data,stream,integer,flat,mapped,src,key,by,new,identity,key,selector,long,flat,map,timely,flat,map,function,flat,mapped,add,sink,new,discarding,sink,integer,assert,equals,timely,flat,map,function,get,function,for,data,stream,flat,mapped,assert,true,get,operator,for,data,stream,flat,mapped,instanceof,stream,timely,flat,map
DataStreamTest -> @Test 	public void testResources() throws Exception;1489671807;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = new ResourceSpec(1.0, 100)__		ResourceSpec preferredResource1 = new ResourceSpec(2.0, 200)___		ResourceSpec minResource2 = new ResourceSpec(1.0, 200)__		ResourceSpec preferredResource2 = new ResourceSpec(2.0, 300)___		ResourceSpec minResource3 = new ResourceSpec(1.0, 300)__		ResourceSpec preferredResource3 = new ResourceSpec(2.0, 400)___		ResourceSpec minResource4 = new ResourceSpec(1.0, 400)__		ResourceSpec preferredResource4 = new ResourceSpec(2.0, 500)___		ResourceSpec minResource5 = new ResourceSpec(1.0, 500)__		ResourceSpec preferredResource5 = new ResourceSpec(2.0, 600)___		ResourceSpec minResource6 = new ResourceSpec(1.0, 600)__		ResourceSpec preferredResource6 = new ResourceSpec(2.0, 700)___		ResourceSpec minResource7 = new ResourceSpec(1.0, 700)__		ResourceSpec preferredResource7 = new ResourceSpec(2.0, 800)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}_					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,new,resource,spec,1,0,100,resource,spec,preferred,resource1,new,resource,spec,2,0,200,resource,spec,min,resource2,new,resource,spec,1,0,200,resource,spec,preferred,resource2,new,resource,spec,2,0,300,resource,spec,min,resource3,new,resource,spec,1,0,300,resource,spec,preferred,resource3,new,resource,spec,2,0,400,resource,spec,min,resource4,new,resource,spec,1,0,400,resource,spec,preferred,resource4,new,resource,spec,2,0,500,resource,spec,min,resource5,new,resource,spec,1,0,500,resource,spec,preferred,resource5,new,resource,spec,2,0,600,resource,spec,min,resource6,new,resource,spec,1,0,600,resource,spec,preferred,resource6,new,resource,spec,2,0,700,resource,spec,min,resource7,new,resource,spec,1,0,700,resource,spec,preferred,resource7,new,resource,spec,2,0,800,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1493195810;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = new ResourceSpec(1.0, 100)__		ResourceSpec preferredResource1 = new ResourceSpec(2.0, 200)___		ResourceSpec minResource2 = new ResourceSpec(1.0, 200)__		ResourceSpec preferredResource2 = new ResourceSpec(2.0, 300)___		ResourceSpec minResource3 = new ResourceSpec(1.0, 300)__		ResourceSpec preferredResource3 = new ResourceSpec(2.0, 400)___		ResourceSpec minResource4 = new ResourceSpec(1.0, 400)__		ResourceSpec preferredResource4 = new ResourceSpec(2.0, 500)___		ResourceSpec minResource5 = new ResourceSpec(1.0, 500)__		ResourceSpec preferredResource5 = new ResourceSpec(2.0, 600)___		ResourceSpec minResource6 = new ResourceSpec(1.0, 600)__		ResourceSpec preferredResource6 = new ResourceSpec(2.0, 700)___		ResourceSpec minResource7 = new ResourceSpec(1.0, 700)__		ResourceSpec preferredResource7 = new ResourceSpec(2.0, 800)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}_					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,new,resource,spec,1,0,100,resource,spec,preferred,resource1,new,resource,spec,2,0,200,resource,spec,min,resource2,new,resource,spec,1,0,200,resource,spec,preferred,resource2,new,resource,spec,2,0,300,resource,spec,min,resource3,new,resource,spec,1,0,300,resource,spec,preferred,resource3,new,resource,spec,2,0,400,resource,spec,min,resource4,new,resource,spec,1,0,400,resource,spec,preferred,resource4,new,resource,spec,2,0,500,resource,spec,min,resource5,new,resource,spec,1,0,500,resource,spec,preferred,resource5,new,resource,spec,2,0,600,resource,spec,min,resource6,new,resource,spec,1,0,600,resource,spec,preferred,resource6,new,resource,spec,2,0,700,resource,spec,min,resource7,new,resource,spec,1,0,700,resource,spec,preferred,resource7,new,resource,spec,2,0,800,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1495484544;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = new ResourceSpec(1.0, 100)__		ResourceSpec preferredResource1 = new ResourceSpec(2.0, 200)___		ResourceSpec minResource2 = new ResourceSpec(1.0, 200)__		ResourceSpec preferredResource2 = new ResourceSpec(2.0, 300)___		ResourceSpec minResource3 = new ResourceSpec(1.0, 300)__		ResourceSpec preferredResource3 = new ResourceSpec(2.0, 400)___		ResourceSpec minResource4 = new ResourceSpec(1.0, 400)__		ResourceSpec preferredResource4 = new ResourceSpec(2.0, 500)___		ResourceSpec minResource5 = new ResourceSpec(1.0, 500)__		ResourceSpec preferredResource5 = new ResourceSpec(2.0, 600)___		ResourceSpec minResource6 = new ResourceSpec(1.0, 600)__		ResourceSpec preferredResource6 = new ResourceSpec(2.0, 700)___		ResourceSpec minResource7 = new ResourceSpec(1.0, 700)__		ResourceSpec preferredResource7 = new ResourceSpec(2.0, 800)___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,new,resource,spec,1,0,100,resource,spec,preferred,resource1,new,resource,spec,2,0,200,resource,spec,min,resource2,new,resource,spec,1,0,200,resource,spec,preferred,resource2,new,resource,spec,2,0,300,resource,spec,min,resource3,new,resource,spec,1,0,300,resource,spec,preferred,resource3,new,resource,spec,2,0,400,resource,spec,min,resource4,new,resource,spec,1,0,400,resource,spec,preferred,resource4,new,resource,spec,2,0,500,resource,spec,min,resource5,new,resource,spec,1,0,500,resource,spec,preferred,resource5,new,resource,spec,2,0,600,resource,spec,min,resource6,new,resource,spec,1,0,600,resource,spec,preferred,resource6,new,resource,spec,2,0,700,resource,spec,min,resource7,new,resource,spec,1,0,700,resource,spec,preferred,resource7,new,resource,spec,2,0,800,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1513261900;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1515177485;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1515481551;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1518008865;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1518008896;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1518008932;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1518008956;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1520351570;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1520354103;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1523545470;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1534492343;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testResources() throws Exception;1547196539;Tests whether resources get set.;@Test_	public void testResources() throws Exception{_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		ResourceSpec minResource1 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(100).build()__		ResourceSpec preferredResource1 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(200).build()___		ResourceSpec minResource2 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(200).build()__		ResourceSpec preferredResource2 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(300).build()___		ResourceSpec minResource3 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(300).build()__		ResourceSpec preferredResource3 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(400).build()___		ResourceSpec minResource4 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(400).build()__		ResourceSpec preferredResource4 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(500).build()___		ResourceSpec minResource5 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(500).build()__		ResourceSpec preferredResource5 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(600).build()___		ResourceSpec minResource6 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(600).build()__		ResourceSpec preferredResource6 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(700).build()___		ResourceSpec minResource7 = ResourceSpec.newBuilder().setCpuCores(1.0).setHeapMemoryInMB(700).build()__		ResourceSpec preferredResource7 = ResourceSpec.newBuilder().setCpuCores(2.0).setHeapMemoryInMB(800).build()___		Method opMethod = SingleOutputStreamOperator.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		opMethod.setAccessible(true)___		Method sinkMethod = DataStreamSink.class.getDeclaredMethod("setResources", ResourceSpec.class, ResourceSpec.class)__		sinkMethod.setAccessible(true)___		DataStream<Long> source1 = env.generateSequence(0, 0)__		opMethod.invoke(source1, minResource1, preferredResource1)___		DataStream<Long> map1 = source1.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map1, minResource2, preferredResource2)___		DataStream<Long> source2 = env.generateSequence(0, 0)__		opMethod.invoke(source2, minResource3, preferredResource3)___		DataStream<Long> map2 = source2.map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})__		opMethod.invoke(map2, minResource4, preferredResource4)___		DataStream<Long> connected = map1.connect(map2)_				.flatMap(new CoFlatMapFunction<Long, Long, Long>() {_					@Override_					public void flatMap1(Long value, Collector<Long> out) throws Exception {_					}__					@Override_					public void flatMap2(Long value, Collector<Long> out) throws Exception {_					}_				})__		opMethod.invoke(connected, minResource5, preferredResource5)___		DataStream<Long> windowed = connected_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					private static final long serialVersionUID = 1L___					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})__		opMethod.invoke(windowed, minResource6, preferredResource6)___		DataStreamSink<Long> sink = windowed.print()__		sinkMethod.invoke(sink, minResource7, preferredResource7)___		assertEquals(minResource1, env.getStreamGraph().getStreamNode(source1.getId()).getMinResources())__		assertEquals(preferredResource1, env.getStreamGraph().getStreamNode(source1.getId()).getPreferredResources())___		assertEquals(minResource2, env.getStreamGraph().getStreamNode(map1.getId()).getMinResources())__		assertEquals(preferredResource2, env.getStreamGraph().getStreamNode(map1.getId()).getPreferredResources())___		assertEquals(minResource3, env.getStreamGraph().getStreamNode(source2.getId()).getMinResources())__		assertEquals(preferredResource3, env.getStreamGraph().getStreamNode(source2.getId()).getPreferredResources())___		assertEquals(minResource4, env.getStreamGraph().getStreamNode(map2.getId()).getMinResources())__		assertEquals(preferredResource4, env.getStreamGraph().getStreamNode(map2.getId()).getPreferredResources())___		assertEquals(minResource5, env.getStreamGraph().getStreamNode(connected.getId()).getMinResources())__		assertEquals(preferredResource5, env.getStreamGraph().getStreamNode(connected.getId()).getPreferredResources())___		assertEquals(minResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getMinResources())__		assertEquals(preferredResource6, env.getStreamGraph().getStreamNode(windowed.getId()).getPreferredResources())___		assertEquals(minResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getMinResources())__		assertEquals(preferredResource7, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getPreferredResources())__	};tests,whether,resources,get,set;test,public,void,test,resources,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,resource,spec,min,resource1,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,100,build,resource,spec,preferred,resource1,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,200,build,resource,spec,min,resource2,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,200,build,resource,spec,preferred,resource2,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,300,build,resource,spec,min,resource3,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,300,build,resource,spec,preferred,resource3,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,400,build,resource,spec,min,resource4,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,400,build,resource,spec,preferred,resource4,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,500,build,resource,spec,min,resource5,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,500,build,resource,spec,preferred,resource5,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,600,build,resource,spec,min,resource6,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,600,build,resource,spec,preferred,resource6,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,700,build,resource,spec,min,resource7,resource,spec,new,builder,set,cpu,cores,1,0,set,heap,memory,in,mb,700,build,resource,spec,preferred,resource7,resource,spec,new,builder,set,cpu,cores,2,0,set,heap,memory,in,mb,800,build,method,op,method,single,output,stream,operator,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,op,method,set,accessible,true,method,sink,method,data,stream,sink,class,get,declared,method,set,resources,resource,spec,class,resource,spec,class,sink,method,set,accessible,true,data,stream,long,source1,env,generate,sequence,0,0,op,method,invoke,source1,min,resource1,preferred,resource1,data,stream,long,map1,source1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map1,min,resource2,preferred,resource2,data,stream,long,source2,env,generate,sequence,0,0,op,method,invoke,source2,min,resource3,preferred,resource3,data,stream,long,map2,source2,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,op,method,invoke,map2,min,resource4,preferred,resource4,data,stream,long,connected,map1,connect,map2,flat,map,new,co,flat,map,function,long,long,long,override,public,void,flat,map1,long,value,collector,long,out,throws,exception,override,public,void,flat,map2,long,value,collector,long,out,throws,exception,op,method,invoke,connected,min,resource5,preferred,resource5,data,stream,long,windowed,connected,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,private,static,final,long,serial,version,uid,1l,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,op,method,invoke,windowed,min,resource6,preferred,resource6,data,stream,sink,long,sink,windowed,print,sink,method,invoke,sink,min,resource7,preferred,resource7,assert,equals,min,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,min,resources,assert,equals,preferred,resource1,env,get,stream,graph,get,stream,node,source1,get,id,get,preferred,resources,assert,equals,min,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,min,resources,assert,equals,preferred,resource2,env,get,stream,graph,get,stream,node,map1,get,id,get,preferred,resources,assert,equals,min,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,min,resources,assert,equals,preferred,resource3,env,get,stream,graph,get,stream,node,source2,get,id,get,preferred,resources,assert,equals,min,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,min,resources,assert,equals,preferred,resource4,env,get,stream,graph,get,stream,node,map2,get,id,get,preferred,resources,assert,equals,min,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,min,resources,assert,equals,preferred,resource5,env,get,stream,graph,get,stream,node,connected,get,id,get,preferred,resources,assert,equals,min,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,min,resources,assert,equals,preferred,resource6,env,get,stream,graph,get,stream,node,windowed,get,id,get,preferred,resources,assert,equals,min,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,min,resources,assert,equals,preferred,resource7,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,preferred,resources
DataStreamTest -> @Test 	public void testUnion() throws Exception;1449051578;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1454527671;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1454527671;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1455718153;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1456528025;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1456778239;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1467726666;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1472663071;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1478532357;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1478855879;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1480354709;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1488304750;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1488799576;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1489165080;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1489671807;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1493195810;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism= input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1495484544;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1513261900;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1515177485;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1515481551;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1518008865;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1518008896;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1518008932;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1518008956;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1520351570;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1520354103;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1523545470;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1534492343;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testUnion() throws Exception;1547196539;Tests union functionality. This ensures that self-unions and unions of streams_with differing parallelism work.__@throws Exception;@Test_	public void testUnion() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setParallelism(4)___		DataStream<Long> input1 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnion = input1.union(input1).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input6 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			})___		DataStream<Long> selfUnionDifferentPartition = input6.broadcast().union(input6).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		})___		DataStream<Long> input2 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> input3 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> unionDifferingParallelism = input2.union(input3).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		DataStream<Long> input4 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(2)___		DataStream<Long> input5 = env.generateSequence(0, 0)_			.map(new MapFunction<Long, Long>() {_				@Override_				public Long map(Long value) throws Exception {_					return null__				}_			}).setParallelism(4)___		DataStream<Long> unionDifferingPartitioning = input4.broadcast().union(input5).map(new MapFunction<Long, Long>() {_			@Override_			public Long map(Long value) throws Exception {_				return null__			}_		}).setParallelism(4)___		StreamGraph streamGraph = env.getStreamGraph()___		_		assertTrue(streamGraph.getStreamNode(selfUnion.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnion.getId()).getInEdges()) {_			assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__		}__		_		assertTrue(streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges().size() == 2)__		boolean hasForward = false__		boolean hasBroadcast = false__		for (StreamEdge edge: streamGraph.getStreamNode(selfUnionDifferentPartition.getId()).getInEdges()) {_			if (edge.getPartitioner() instanceof ForwardPartitioner) {_				hasForward = true__			}_			if (edge.getPartitioner() instanceof BroadcastPartitioner) {_				hasBroadcast = true__			}_		}_		assertTrue(hasForward && hasBroadcast)___		_		assertTrue(streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingParallelism.getId()).getInEdges()) {_			if (edge.getSourceId() == input2.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else if (edge.getSourceId() == input3.getId()) {_				assertTrue(edge.getPartitioner() instanceof RebalancePartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}__		_		assertTrue(streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges().size() == 2)__		for (StreamEdge edge: streamGraph.getStreamNode(unionDifferingPartitioning.getId()).getInEdges()) {_			if (edge.getSourceId() == input4.getId()) {_				assertTrue(edge.getPartitioner() instanceof BroadcastPartitioner)__			} else if (edge.getSourceId() == input5.getId()) {_				assertTrue(edge.getPartitioner() instanceof ForwardPartitioner)__			} else {_				fail("Wrong input edge.")__			}_		}_	};tests,union,functionality,this,ensures,that,self,unions,and,unions,of,streams,with,differing,parallelism,work,throws,exception;test,public,void,test,union,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,parallelism,4,data,stream,long,input1,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,input1,union,input1,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input6,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,self,union,different,partition,input6,broadcast,union,input6,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,data,stream,long,input2,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input3,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,union,differing,parallelism,input2,union,input3,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,input4,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,2,data,stream,long,input5,env,generate,sequence,0,0,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,data,stream,long,union,differing,partitioning,input4,broadcast,union,input5,map,new,map,function,long,long,override,public,long,map,long,value,throws,exception,return,null,set,parallelism,4,stream,graph,stream,graph,env,get,stream,graph,assert,true,stream,graph,get,stream,node,self,union,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,self,union,get,id,get,in,edges,assert,true,edge,get,partitioner,instanceof,forward,partitioner,assert,true,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,size,2,boolean,has,forward,false,boolean,has,broadcast,false,for,stream,edge,edge,stream,graph,get,stream,node,self,union,different,partition,get,id,get,in,edges,if,edge,get,partitioner,instanceof,forward,partitioner,has,forward,true,if,edge,get,partitioner,instanceof,broadcast,partitioner,has,broadcast,true,assert,true,has,forward,has,broadcast,assert,true,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,parallelism,get,id,get,in,edges,if,edge,get,source,id,input2,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,if,edge,get,source,id,input3,get,id,assert,true,edge,get,partitioner,instanceof,rebalance,partitioner,else,fail,wrong,input,edge,assert,true,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,size,2,for,stream,edge,edge,stream,graph,get,stream,node,union,differing,partitioning,get,id,get,in,edges,if,edge,get,source,id,input4,get,id,assert,true,edge,get,partitioner,instanceof,broadcast,partitioner,else,if,edge,get,source,id,input5,get,id,assert,true,edge,get,partitioner,instanceof,forward,partitioner,else,fail,wrong,input,edge
DataStreamTest -> @Test 	public void testParallelism();1445418103;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1449051578;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1454527671;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1454527671;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1455718153;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1456528025;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long, ?> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1456778239;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new NoOpSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new NoOpSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,no,op,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,no,op,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1467726666;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1472663071;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1478532357;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1478855879;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1480354709;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1488304750;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1488799576;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1489165080;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1489671807;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1493195810;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1495484544;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1513261900;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1515177485;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1515481551;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1518008865;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1518008896;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1518008932;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1518008956;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1520351570;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1520354103;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1523545470;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1534492343;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
DataStreamTest -> @Test 	public void testParallelism();1547196539;Tests whether parallelism gets set.;@Test_	public void testParallelism() {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStreamSource<Tuple2<Long, Long>> src = env.fromElements(new Tuple2<>(0L, 0L))__		env.setParallelism(10)___		SingleOutputStreamOperator<Long> map = src.map(new MapFunction<Tuple2<Long, Long>, Long>() {_			@Override_			public Long map(Tuple2<Long, Long> value) throws Exception {_				return null__			}_		}).name("MyMap")___		DataStream<Long> windowed = map_				.windowAll(GlobalWindows.create())_				.trigger(PurgingTrigger.of(CountTrigger.of(10)))_				.fold(0L, new FoldFunction<Long, Long>() {_					@Override_					public Long fold(Long accumulator, Long value) throws Exception {_						return null__					}_				})___		windowed.addSink(new DiscardingSink<Long>())___		DataStreamSink<Long> sink = map.addSink(new SinkFunction<Long>() {_			private static final long serialVersionUID = 1L___			@Override_			public void invoke(Long value) throws Exception {_			}_		})___		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10,_				env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		env.setParallelism(7)___		_		_		_		assertEquals(1, env.getStreamGraph().getStreamNode(src.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())__		assertEquals(1, env.getStreamGraph().getStreamNode(windowed.getId()).getParallelism())__		assertEquals(10, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())___		try {_			src.setParallelism(3)__			fail()__		} catch (IllegalArgumentException success) {_			_		}__		DataStreamSource<Long> parallelSource = env.generateSequence(0, 0)__		parallelSource.addSink(new DiscardingSink<Long>())__		assertEquals(7, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		parallelSource.setParallelism(3)__		assertEquals(3, env.getStreamGraph().getStreamNode(parallelSource.getId()).getParallelism())___		map.setParallelism(2)__		assertEquals(2, env.getStreamGraph().getStreamNode(map.getId()).getParallelism())___		sink.setParallelism(4)__		assertEquals(4, env.getStreamGraph().getStreamNode(sink.getTransformation().getId()).getParallelism())__	};tests,whether,parallelism,gets,set;test,public,void,test,parallelism,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,source,tuple2,long,long,src,env,from,elements,new,tuple2,0l,0l,env,set,parallelism,10,single,output,stream,operator,long,map,src,map,new,map,function,tuple2,long,long,long,override,public,long,map,tuple2,long,long,value,throws,exception,return,null,name,my,map,data,stream,long,windowed,map,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,10,fold,0l,new,fold,function,long,long,override,public,long,fold,long,accumulator,long,value,throws,exception,return,null,windowed,add,sink,new,discarding,sink,long,data,stream,sink,long,sink,map,add,sink,new,sink,function,long,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,long,value,throws,exception,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,env,set,parallelism,7,assert,equals,1,env,get,stream,graph,get,stream,node,src,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,assert,equals,1,env,get,stream,graph,get,stream,node,windowed,get,id,get,parallelism,assert,equals,10,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism,try,src,set,parallelism,3,fail,catch,illegal,argument,exception,success,data,stream,source,long,parallel,source,env,generate,sequence,0,0,parallel,source,add,sink,new,discarding,sink,long,assert,equals,7,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,parallel,source,set,parallelism,3,assert,equals,3,env,get,stream,graph,get,stream,node,parallel,source,get,id,get,parallelism,map,set,parallelism,2,assert,equals,2,env,get,stream,graph,get,stream,node,map,get,id,get,parallelism,sink,set,parallelism,4,assert,equals,4,env,get,stream,graph,get,stream,node,sink,get,transformation,get,id,get,parallelism
