# id;timestamp;commentText;codeText;commentWords;codeWords
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<NonPojoType, Integer>> inputType = new TypeHint<Tuple2<NonPojoType, Integer>>() {}.getTypeInfo()___		ReducingStateDescriptor<Tuple2<NonPojoType, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_			new SumReducer<>(),_			inputType.createSerializer(new ExecutionConfig()))___		TypeSerializer<NonPojoType> keySerializer = TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig())__		assertTrue(keySerializer instanceof KryoSerializer)___		WindowOperator<NonPojoType, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>, TimeWindow> operator = new WindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector<>(),_			keySerializer,_			stateDesc,_			new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),_			EventTimeTrigger.create(),_			0,_			null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<NonPojoType, Integer>, Tuple2<NonPojoType, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), TypeInformation.of(NonPojoType.class))___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"), 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"), 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,windows,with,kryo,serialized,keys,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,non,pojo,type,integer,input,type,new,type,hint,tuple2,non,pojo,type,integer,get,type,info,reducing,state,descriptor,tuple2,non,pojo,type,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,type,serializer,non,pojo,type,key,serializer,type,information,of,non,pojo,type,class,create,serializer,new,execution,config,assert,true,key,serializer,instanceof,kryo,serializer,window,operator,non,pojo,type,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,key,serializer,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,non,pojo,type,integer,tuple2,non,pojo,type,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,type,information,of,non,pojo,type,class,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,new,non,pojo,type,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,kryo,serialized,key,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {_		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()___	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1482244974;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1482244974;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1482244974;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1485250954;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1485250954;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1489819457;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	@SuppressWarnings("unchecked") 	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception;1493298543;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	@SuppressWarnings("unchecked")_	public void testRestoreSessionWindowsWithCountTriggerInMintConditionFromFlink11() throws Exception {__		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		__		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.initializeStateFromLegacyCheckpoint(getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink1.1-snapshot"))__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,suppress,warnings,unchecked,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,from,flink11,throws,exception,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,from,legacy,checkpoint,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink1,1,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSessionWindowsWithCountTriggerInMintConditionSnapshot() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-session-with-stateful-trigger-mint-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,session,windows,with,count,trigger,in,mint,condition,snapshot,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,session,with,stateful,trigger,mint,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyEventTimeWindowsSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,event,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeApplyProcessingTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingProcessingTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>()),_				ProcessingTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		testHarness.setProcessingTime(10)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.setProcessingTime(3010)__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 1), 2999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 2999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-apply-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,apply,processing,time,windows,snapshot,throws,exception,final,int,window,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,processing,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,processing,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,set,processing,time,10,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,set,processing,time,3010,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key3,1,expected,output,add,new,stream,record,new,tuple2,key1,1,2999,expected,output,add,new,stream,record,new,tuple2,key2,1,2999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,apply,processing,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1496852938;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1503598628;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1515177485;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1517943538;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1517943539;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorStateHandles snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,state,handles,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1519567828;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1525452496;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1534233778;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1534779482;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1547026204;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1547027809;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1547725934;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Ignore 	@Test 	public void writeReducingEventTimeWindowsSnapshot() throws Exception;1547725946;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeReducingEventTimeWindowsSnapshot() throws Exception {_		final int windowSize = 3___		ReducingStateDescriptor<Tuple2<String, Integer>> stateDesc = new ReducingStateDescriptor<>("window-contents",_				new SumReducer<>(),_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new WindowOperator<>(_				TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String, TimeWindow, Tuple2<String, Integer>>()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()__		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 3000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 1000))___		testHarness.processWatermark(new Watermark(999))__		expectedOutput.add(new Watermark(999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		testHarness.processWatermark(new Watermark(1999))__		expectedOutput.add(new Watermark(1999))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple2ResultSortComparator<>())___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0, 0)__		OperatorSnapshotUtil.writeStateHandle(_			snapshot,_			"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot")___		testHarness.close()__	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,reducing,event,time,windows,snapshot,throws,exception,final,int,window,size,3,reducing,state,descriptor,tuple2,string,integer,state,desc,new,reducing,state,descriptor,window,contents,new,sum,reducer,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,single,value,window,function,new,pass,through,window,function,string,time,window,tuple2,string,integer,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,3000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,0,test,harness,process,element,new,stream,record,new,tuple2,key1,1,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,1000,test,harness,process,watermark,new,watermark,999,expected,output,add,new,watermark,999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,test,harness,process,watermark,new,watermark,1999,expected,output,add,new,watermark,1999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple2result,sort,comparator,operator,subtask,state,snapshot,test,harness,snapshot,0,0,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,win,op,migration,test,reduce,event,time,flink,flink,generate,savepoint,version,snapshot,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1496852938;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1503598628;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1515177485;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1517943538;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1517943539;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1519567828;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1525452496;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1534233778;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1534779482;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1547026204;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1547027809;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		MigrationTestUtil.restoreFromSnapshot(_			testHarness,_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),_			testMigrateVersion)___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,migration,test,util,restore,from,snapshot,test,harness,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,migrate,version,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1547725934;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		testHarness.initializeState(_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"))___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorMigrationTest -> @Test 	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception;1547725946;This checks that we can restore from a virgin {@code WindowOperator} that has never seen_any elements.;@Test_	public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {__		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector<String>(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector<>(), BasicTypeInfo.STRING_TYPE_INFO)___		testHarness.setup()___		testHarness.initializeState(_			OperatorSnapshotUtil.getResourceFilename(_				"win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"))___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,checks,that,we,can,restore,from,a,virgin,code,window,operator,that,has,never,seen,any,elements;test,public,void,test,restore,session,windows,with,count,trigger,in,mint,condition,throws,exception,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,string,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,test,harness,setup,test,harness,initialize,state,operator,snapshot,util,get,resource,filename,win,op,migration,test,session,with,stateful,trigger,mint,flink,test,migrate,version,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
