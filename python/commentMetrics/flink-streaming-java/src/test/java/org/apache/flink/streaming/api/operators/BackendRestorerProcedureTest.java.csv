# id;timestamp;commentText;codeText;commentWords;codeWords
BackendRestorerProcedureTest -> @Test 	public void testExceptionThrownIfAllRestoresFailed() throws Exception;1519568061;Tests if there is an exception if all restore attempts are exhausted and failed.;@Test_	public void testExceptionThrownIfAllRestoresFailed() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()___		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdFailHandle)))__		Iterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator()___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry)___		try {_			restorerProcedure.createAndRestore(iterator)__			Assert.fail()__		} catch (Exception ignore) {_		}__		verify(firstFailHandle).openInputStream()__		verify(secondFailHandle).openInputStream()__		verify(thirdFailHandle).openInputStream()__		Assert.assertFalse(iterator.hasNext())__	};tests,if,there,is,an,exception,if,all,restore,attempts,are,exhausted,and,failed;test,public,void,test,exception,thrown,if,all,restores,failed,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,fail,handle,mock,operator,state,handle,class,operator,state,handle,third,fail,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,fail,handle,new,state,object,collection,collections,singleton,list,third,fail,handle,iterator,state,object,collection,operator,state,handle,iterator,sorted,restore,options,iterator,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,try,restorer,procedure,create,and,restore,iterator,assert,fail,catch,exception,ignore,verify,first,fail,handle,open,input,stream,verify,second,fail,handle,open,input,stream,verify,third,fail,handle,open,input,stream,assert,assert,false,iterator,has,next
BackendRestorerProcedureTest -> @Test 	public void testExceptionThrownIfAllRestoresFailed() throws Exception;1519741691;Tests if there is an exception if all restore attempts are exhausted and failed.;@Test_	public void testExceptionThrownIfAllRestoresFailed() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()___		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdFailHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		try {_			restorerProcedure.createAndRestore(sortedRestoreOptions)__			Assert.fail()__		} catch (Exception ignore) {_		}__		verify(firstFailHandle).openInputStream()__		verify(secondFailHandle).openInputStream()__		verify(thirdFailHandle).openInputStream()__	};tests,if,there,is,an,exception,if,all,restore,attempts,are,exhausted,and,failed;test,public,void,test,exception,thrown,if,all,restores,failed,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,fail,handle,mock,operator,state,handle,class,operator,state,handle,third,fail,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,fail,handle,new,state,object,collection,collections,singleton,list,third,fail,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,try,restorer,procedure,create,and,restore,sorted,restore,options,assert,fail,catch,exception,ignore,verify,first,fail,handle,open,input,stream,verify,second,fail,handle,open,input,stream,verify,third,fail,handle,open,input,stream
BackendRestorerProcedureTest -> @Test 	public void testExceptionThrownIfAllRestoresFailed() throws Exception;1550863001;Tests if there is an exception if all restore attempts are exhausted and failed.;@Test_	public void testExceptionThrownIfAllRestoresFailed() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()___		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle thirdFailHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdFailHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		try {_			restorerProcedure.createAndRestore(sortedRestoreOptions)__			Assert.fail()__		} catch (Exception ignore) {_		}__		verify(firstFailHandle).openInputStream()__		verify(secondFailHandle).openInputStream()__		verify(thirdFailHandle).openInputStream()__	};tests,if,there,is,an,exception,if,all,restore,attempts,are,exhausted,and,failed;test,public,void,test,exception,thrown,if,all,restores,failed,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,fail,handle,mock,operator,state,handle,class,operator,state,handle,third,fail,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,fail,handle,new,state,object,collection,collections,singleton,list,third,fail,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,try,restorer,procedure,create,and,restore,sorted,restore,options,assert,fail,catch,exception,ignore,verify,first,fail,handle,open,input,stream,verify,second,fail,handle,open,input,stream,verify,third,fail,handle,open,input,stream
BackendRestorerProcedureTest -> @Test 	public void testCanBeCanceledViaRegistry() throws Exception;1519568061;Test that the restore can be stopped via the provided closeable registry.;@Test_	public void testCanBeCanceledViaRegistry() throws Exception {_		CloseableRegistry closeableRegistry = new CloseableRegistry()__		OneShotLatch waitForBlock = new OneShotLatch()__		OneShotLatch unblock = new OneShotLatch()__		OperatorStateHandle blockingRestoreHandle = mock(OperatorStateHandle.class)__		when(blockingRestoreHandle.openInputStream()).thenReturn(new BlockingFSDataInputStream(waitForBlock, unblock))___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions =_			Collections.singletonList(new StateObjectCollection<>(Collections.singletonList(blockingRestoreHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry)___		AtomicReference<Exception> exceptionReference = new AtomicReference<>(null)__		Thread restoreThread = new Thread(() -> {_			try {_				restorerProcedure.createAndRestore(sortedRestoreOptions.iterator())__			} catch (Exception e) {_				exceptionReference.set(e)__			}_		})___		restoreThread.start()__		waitForBlock.await()__		closeableRegistry.close()__		unblock.trigger()__		restoreThread.join()___		Exception exception = exceptionReference.get()__		Assert.assertTrue(exception instanceof FlinkException)__	};test,that,the,restore,can,be,stopped,via,the,provided,closeable,registry;test,public,void,test,can,be,canceled,via,registry,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,one,shot,latch,wait,for,block,new,one,shot,latch,one,shot,latch,unblock,new,one,shot,latch,operator,state,handle,blocking,restore,handle,mock,operator,state,handle,class,when,blocking,restore,handle,open,input,stream,then,return,new,blocking,fsdata,input,stream,wait,for,block,unblock,list,state,object,collection,operator,state,handle,sorted,restore,options,collections,singleton,list,new,state,object,collection,collections,singleton,list,blocking,restore,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,atomic,reference,exception,exception,reference,new,atomic,reference,null,thread,restore,thread,new,thread,try,restorer,procedure,create,and,restore,sorted,restore,options,iterator,catch,exception,e,exception,reference,set,e,restore,thread,start,wait,for,block,await,closeable,registry,close,unblock,trigger,restore,thread,join,exception,exception,exception,reference,get,assert,assert,true,exception,instanceof,flink,exception
BackendRestorerProcedureTest -> @Test 	public void testCanBeCanceledViaRegistry() throws Exception;1519741691;Test that the restore can be stopped via the provided closeable registry.;@Test_	public void testCanBeCanceledViaRegistry() throws Exception {_		CloseableRegistry closeableRegistry = new CloseableRegistry()__		OneShotLatch waitForBlock = new OneShotLatch()__		OneShotLatch unblock = new OneShotLatch()__		OperatorStateHandle blockingRestoreHandle = mock(OperatorStateHandle.class)__		when(blockingRestoreHandle.openInputStream()).thenReturn(new BlockingFSDataInputStream(waitForBlock, unblock))___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions =_			Collections.singletonList(new StateObjectCollection<>(Collections.singletonList(blockingRestoreHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		AtomicReference<Exception> exceptionReference = new AtomicReference<>(null)__		Thread restoreThread = new Thread(() -> {_			try {_				restorerProcedure.createAndRestore(sortedRestoreOptions)__			} catch (Exception e) {_				exceptionReference.set(e)__			}_		})___		restoreThread.start()__		waitForBlock.await()__		closeableRegistry.close()__		unblock.trigger()__		restoreThread.join()___		Exception exception = exceptionReference.get()__		Assert.assertTrue(exception instanceof FlinkException)__	};test,that,the,restore,can,be,stopped,via,the,provided,closeable,registry;test,public,void,test,can,be,canceled,via,registry,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,one,shot,latch,wait,for,block,new,one,shot,latch,one,shot,latch,unblock,new,one,shot,latch,operator,state,handle,blocking,restore,handle,mock,operator,state,handle,class,when,blocking,restore,handle,open,input,stream,then,return,new,blocking,fsdata,input,stream,wait,for,block,unblock,list,state,object,collection,operator,state,handle,sorted,restore,options,collections,singleton,list,new,state,object,collection,collections,singleton,list,blocking,restore,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,atomic,reference,exception,exception,reference,new,atomic,reference,null,thread,restore,thread,new,thread,try,restorer,procedure,create,and,restore,sorted,restore,options,catch,exception,e,exception,reference,set,e,restore,thread,start,wait,for,block,await,closeable,registry,close,unblock,trigger,restore,thread,join,exception,exception,exception,reference,get,assert,assert,true,exception,instanceof,flink,exception
BackendRestorerProcedureTest -> @Test 	public void testCanBeCanceledViaRegistry() throws Exception;1550863001;Test that the restore can be stopped via the provided closeable registry.;@Test_	public void testCanBeCanceledViaRegistry() throws Exception {_		CloseableRegistry closeableRegistry = new CloseableRegistry()__		OneShotLatch waitForBlock = new OneShotLatch()__		OneShotLatch unblock = new OneShotLatch()__		OperatorStateHandle blockingRestoreHandle = mock(OperatorStateHandle.class)__		when(blockingRestoreHandle.openInputStream()).thenReturn(new BlockingFSDataInputStream(waitForBlock, unblock))___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions =_			Collections.singletonList(new StateObjectCollection<>(Collections.singletonList(blockingRestoreHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		AtomicReference<Exception> exceptionReference = new AtomicReference<>(null)__		Thread restoreThread = new Thread(() -> {_			try {_				restorerProcedure.createAndRestore(sortedRestoreOptions)__			} catch (Exception e) {_				exceptionReference.set(e)__			}_		})___		restoreThread.start()__		waitForBlock.await()__		closeableRegistry.close()__		unblock.trigger()__		restoreThread.join()___		Exception exception = exceptionReference.get()__		Assert.assertTrue(exception instanceof FlinkException)__	};test,that,the,restore,can,be,stopped,via,the,provided,closeable,registry;test,public,void,test,can,be,canceled,via,registry,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,one,shot,latch,wait,for,block,new,one,shot,latch,one,shot,latch,unblock,new,one,shot,latch,operator,state,handle,blocking,restore,handle,mock,operator,state,handle,class,when,blocking,restore,handle,open,input,stream,then,return,new,blocking,fsdata,input,stream,wait,for,block,unblock,list,state,object,collection,operator,state,handle,sorted,restore,options,collections,singleton,list,new,state,object,collection,collections,singleton,list,blocking,restore,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,atomic,reference,exception,exception,reference,new,atomic,reference,null,thread,restore,thread,new,thread,try,restorer,procedure,create,and,restore,sorted,restore,options,catch,exception,e,exception,reference,set,e,restore,thread,start,wait,for,block,await,closeable,registry,close,unblock,trigger,restore,thread,join,exception,exception,exception,reference,get,assert,assert,true,exception,instanceof,flink,exception
BackendRestorerProcedureTest -> @Test 	public void testRestoreProcedureOrderAndFailure() throws Exception;1519568061;Tests that the restore procedure follows the order of the iterator and will retries failed attempts if there are_more options.;@Test_	public void testRestoreProcedureOrderAndFailure() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()__		CheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024)___		ListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>("test-state", Integer.class)__		OperatorStateBackend originalBackend = backendSupplier.get()__		SnapshotResult<OperatorStateHandle> snapshotResult___		try {_			ListState<Integer> listState = originalBackend.getListState(stateDescriptor)___			listState.add(0)__			listState.add(1)__			listState.add(2)__			listState.add(3)___			RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =_				originalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___			snapshot.run()__			snapshotResult = snapshot.get()___		} finally {_			originalBackend.close()__			originalBackend.dispose()__		}__		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot())__		OperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)))__		Iterator<StateObjectCollection<OperatorStateHandle>> iterator = sortedRestoreOptions.iterator()___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry)___		OperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(iterator)__		Assert.assertNotNull(restoredBackend)___		try {_			Assert.assertTrue(iterator.hasNext())__			Assert.assertTrue(thirdNotUsedHandle == iterator.next().iterator().next())__			verify(firstFailHandle).openInputStream()__			verify(secondSuccessHandle).openInputStream()__			verifyZeroInteractions(thirdNotUsedHandle)__			Assert.assertFalse(iterator.hasNext())___			ListState<Integer> listState = restoredBackend.getListState(stateDescriptor)___			Iterator<Integer> stateIterator = listState.get().iterator()__			Assert.assertEquals(0, (int) stateIterator.next())__			Assert.assertEquals(1, (int) stateIterator.next())__			Assert.assertEquals(2, (int) stateIterator.next())__			Assert.assertEquals(3, (int) stateIterator.next())__			Assert.assertFalse(stateIterator.hasNext())___		} finally {_			restoredBackend.close()__			restoredBackend.dispose()__		}_	};tests,that,the,restore,procedure,follows,the,order,of,the,iterator,and,will,retries,failed,attempts,if,there,are,more,options;test,public,void,test,restore,procedure,order,and,failure,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,checkpoint,stream,factory,checkpoint,stream,factory,new,mem,checkpoint,stream,factory,1024,list,state,descriptor,integer,state,descriptor,new,list,state,descriptor,test,state,integer,class,operator,state,backend,original,backend,backend,supplier,get,snapshot,result,operator,state,handle,snapshot,result,try,list,state,integer,list,state,original,backend,get,list,state,state,descriptor,list,state,add,0,list,state,add,1,list,state,add,2,list,state,add,3,runnable,future,snapshot,result,operator,state,handle,snapshot,original,backend,snapshot,0l,0l,checkpoint,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,run,snapshot,result,snapshot,get,finally,original,backend,close,original,backend,dispose,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,success,handle,spy,snapshot,result,get,job,manager,owned,snapshot,operator,state,handle,third,not,used,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,success,handle,new,state,object,collection,collections,singleton,list,third,not,used,handle,iterator,state,object,collection,operator,state,handle,iterator,sorted,restore,options,iterator,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,operator,state,backend,restored,backend,restorer,procedure,create,and,restore,iterator,assert,assert,not,null,restored,backend,try,assert,assert,true,iterator,has,next,assert,assert,true,third,not,used,handle,iterator,next,iterator,next,verify,first,fail,handle,open,input,stream,verify,second,success,handle,open,input,stream,verify,zero,interactions,third,not,used,handle,assert,assert,false,iterator,has,next,list,state,integer,list,state,restored,backend,get,list,state,state,descriptor,iterator,integer,state,iterator,list,state,get,iterator,assert,assert,equals,0,int,state,iterator,next,assert,assert,equals,1,int,state,iterator,next,assert,assert,equals,2,int,state,iterator,next,assert,assert,equals,3,int,state,iterator,next,assert,assert,false,state,iterator,has,next,finally,restored,backend,close,restored,backend,dispose
BackendRestorerProcedureTest -> @Test 	public void testRestoreProcedureOrderAndFailure() throws Exception;1519741691;Tests that the restore procedure follows the order of the iterator and will retries failed attempts if there are_more options.;@Test_	public void testRestoreProcedureOrderAndFailure() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()__		CheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024)___		ListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>("test-state", Integer.class)__		OperatorStateBackend originalBackend = backendSupplier.get()__		SnapshotResult<OperatorStateHandle> snapshotResult___		try {_			ListState<Integer> listState = originalBackend.getListState(stateDescriptor)___			listState.add(0)__			listState.add(1)__			listState.add(2)__			listState.add(3)___			RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =_				originalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___			snapshot.run()__			snapshotResult = snapshot.get()___		} finally {_			originalBackend.close()__			originalBackend.dispose()__		}__		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot())__		OperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		OperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions)__		Assert.assertNotNull(restoredBackend)___		try {_			verify(firstFailHandle).openInputStream()__			verify(secondSuccessHandle).openInputStream()__			verifyZeroInteractions(thirdNotUsedHandle)___			ListState<Integer> listState = restoredBackend.getListState(stateDescriptor)___			Iterator<Integer> stateIterator = listState.get().iterator()__			Assert.assertEquals(0, (int) stateIterator.next())__			Assert.assertEquals(1, (int) stateIterator.next())__			Assert.assertEquals(2, (int) stateIterator.next())__			Assert.assertEquals(3, (int) stateIterator.next())__			Assert.assertFalse(stateIterator.hasNext())___		} finally {_			restoredBackend.close()__			restoredBackend.dispose()__		}_	};tests,that,the,restore,procedure,follows,the,order,of,the,iterator,and,will,retries,failed,attempts,if,there,are,more,options;test,public,void,test,restore,procedure,order,and,failure,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,checkpoint,stream,factory,checkpoint,stream,factory,new,mem,checkpoint,stream,factory,1024,list,state,descriptor,integer,state,descriptor,new,list,state,descriptor,test,state,integer,class,operator,state,backend,original,backend,backend,supplier,get,snapshot,result,operator,state,handle,snapshot,result,try,list,state,integer,list,state,original,backend,get,list,state,state,descriptor,list,state,add,0,list,state,add,1,list,state,add,2,list,state,add,3,runnable,future,snapshot,result,operator,state,handle,snapshot,original,backend,snapshot,0l,0l,checkpoint,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,run,snapshot,result,snapshot,get,finally,original,backend,close,original,backend,dispose,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,success,handle,spy,snapshot,result,get,job,manager,owned,snapshot,operator,state,handle,third,not,used,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,success,handle,new,state,object,collection,collections,singleton,list,third,not,used,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,operator,state,backend,restored,backend,restorer,procedure,create,and,restore,sorted,restore,options,assert,assert,not,null,restored,backend,try,verify,first,fail,handle,open,input,stream,verify,second,success,handle,open,input,stream,verify,zero,interactions,third,not,used,handle,list,state,integer,list,state,restored,backend,get,list,state,state,descriptor,iterator,integer,state,iterator,list,state,get,iterator,assert,assert,equals,0,int,state,iterator,next,assert,assert,equals,1,int,state,iterator,next,assert,assert,equals,2,int,state,iterator,next,assert,assert,equals,3,int,state,iterator,next,assert,assert,false,state,iterator,has,next,finally,restored,backend,close,restored,backend,dispose
BackendRestorerProcedureTest -> @Test 	public void testRestoreProcedureOrderAndFailure() throws Exception;1550863001;Tests that the restore procedure follows the order of the iterator and will retries failed attempts if there are_more options.;@Test_	public void testRestoreProcedureOrderAndFailure() throws Exception {__		CloseableRegistry closeableRegistry = new CloseableRegistry()__		CheckpointStreamFactory checkpointStreamFactory = new MemCheckpointStreamFactory(1024)___		ListStateDescriptor<Integer> stateDescriptor = new ListStateDescriptor<>("test-state", Integer.class)__		OperatorStateBackend originalBackend = backendSupplier.apply(null)__		SnapshotResult<OperatorStateHandle> snapshotResult___		try {_			ListState<Integer> listState = originalBackend.getListState(stateDescriptor)___			listState.add(0)__			listState.add(1)__			listState.add(2)__			listState.add(3)___			RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot =_				originalBackend.snapshot(0L, 0L, checkpointStreamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___			snapshot.run()__			snapshotResult = snapshot.get()___		} finally {_			originalBackend.close()__			originalBackend.dispose()__		}__		OperatorStateHandle firstFailHandle = mock(OperatorStateHandle.class)__		OperatorStateHandle secondSuccessHandle = spy(snapshotResult.getJobManagerOwnedSnapshot())__		OperatorStateHandle thirdNotUsedHandle = mock(OperatorStateHandle.class)___		List<StateObjectCollection<OperatorStateHandle>> sortedRestoreOptions = Arrays.asList(_			new StateObjectCollection<>(Collections.singletonList(firstFailHandle)),_			new StateObjectCollection<>(Collections.singletonList(secondSuccessHandle)),_			new StateObjectCollection<>(Collections.singletonList(thirdNotUsedHandle)))___		BackendRestorerProcedure<OperatorStateBackend, OperatorStateHandle> restorerProcedure =_			new BackendRestorerProcedure<>(backendSupplier, closeableRegistry, "test op state backend")___		OperatorStateBackend restoredBackend = restorerProcedure.createAndRestore(sortedRestoreOptions)__		Assert.assertNotNull(restoredBackend)___		try {_			verify(firstFailHandle).openInputStream()__			verify(secondSuccessHandle).openInputStream()__			verifyZeroInteractions(thirdNotUsedHandle)___			ListState<Integer> listState = restoredBackend.getListState(stateDescriptor)___			Iterator<Integer> stateIterator = listState.get().iterator()__			Assert.assertEquals(0, (int) stateIterator.next())__			Assert.assertEquals(1, (int) stateIterator.next())__			Assert.assertEquals(2, (int) stateIterator.next())__			Assert.assertEquals(3, (int) stateIterator.next())__			Assert.assertFalse(stateIterator.hasNext())___		} finally {_			restoredBackend.close()__			restoredBackend.dispose()__		}_	};tests,that,the,restore,procedure,follows,the,order,of,the,iterator,and,will,retries,failed,attempts,if,there,are,more,options;test,public,void,test,restore,procedure,order,and,failure,throws,exception,closeable,registry,closeable,registry,new,closeable,registry,checkpoint,stream,factory,checkpoint,stream,factory,new,mem,checkpoint,stream,factory,1024,list,state,descriptor,integer,state,descriptor,new,list,state,descriptor,test,state,integer,class,operator,state,backend,original,backend,backend,supplier,apply,null,snapshot,result,operator,state,handle,snapshot,result,try,list,state,integer,list,state,original,backend,get,list,state,state,descriptor,list,state,add,0,list,state,add,1,list,state,add,2,list,state,add,3,runnable,future,snapshot,result,operator,state,handle,snapshot,original,backend,snapshot,0l,0l,checkpoint,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,run,snapshot,result,snapshot,get,finally,original,backend,close,original,backend,dispose,operator,state,handle,first,fail,handle,mock,operator,state,handle,class,operator,state,handle,second,success,handle,spy,snapshot,result,get,job,manager,owned,snapshot,operator,state,handle,third,not,used,handle,mock,operator,state,handle,class,list,state,object,collection,operator,state,handle,sorted,restore,options,arrays,as,list,new,state,object,collection,collections,singleton,list,first,fail,handle,new,state,object,collection,collections,singleton,list,second,success,handle,new,state,object,collection,collections,singleton,list,third,not,used,handle,backend,restorer,procedure,operator,state,backend,operator,state,handle,restorer,procedure,new,backend,restorer,procedure,backend,supplier,closeable,registry,test,op,state,backend,operator,state,backend,restored,backend,restorer,procedure,create,and,restore,sorted,restore,options,assert,assert,not,null,restored,backend,try,verify,first,fail,handle,open,input,stream,verify,second,success,handle,open,input,stream,verify,zero,interactions,third,not,used,handle,list,state,integer,list,state,restored,backend,get,list,state,state,descriptor,iterator,integer,state,iterator,list,state,get,iterator,assert,assert,equals,0,int,state,iterator,next,assert,assert,equals,1,int,state,iterator,next,assert,assert,equals,2,int,state,iterator,next,assert,assert,equals,3,int,state,iterator,next,assert,assert,false,state,iterator,has,next,finally,restored,backend,close,restored,backend,dispose
