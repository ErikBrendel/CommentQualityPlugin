# id;timestamp;commentText;codeText;commentWords;codeWords
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1445418103;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1446112342;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1456247173;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1478257462;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1480624969;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1489819457;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1493195810;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1495484544;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		this(task, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness( 			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1516626397;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(_			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {__		this(taskFactory, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,function,environment,extends,two,input,stream,task,in1,in2,out,task,factory,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,factory,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness( 			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1531381123;Creates a test harness with one input gate (that has one input channel) per input. The first_input gate is assigned to the first task input, the second input gate is assigned to the_second task input.;public TwoInputStreamTaskTestHarness(_			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {__		this(taskFactory, 2, 1, new int[] {1, 2}, inputType1, inputType2, outputType)__	};creates,a,test,harness,with,one,input,gate,that,has,one,input,channel,per,input,the,first,input,gate,is,assigned,to,the,first,task,input,the,second,input,gate,is,assigned,to,the,second,task,input;public,two,input,stream,task,test,harness,function,environment,extends,two,input,stream,task,in1,in2,out,task,factory,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,this,task,factory,2,1,new,int,1,2,input,type1,input,type2,output,type
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1445418103;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1446112342;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1456247173;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1478257462;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1480624969;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1489819457;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1493195810;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1495484544;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(TwoInputStreamTask<IN1, IN2, OUT> task,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {_		super(task, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,two,input,stream,task,in1,in2,out,task,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness( 			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1516626397;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(_			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {__		super(taskFactory, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,function,environment,extends,two,input,stream,task,in1,in2,out,task,factory,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,factory,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
TwoInputStreamTaskTestHarness -> public TwoInputStreamTaskTestHarness( 			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory, 			int numInputGates, 			int numInputChannelsPerGate, 			int[] inputGateAssignment, 			TypeInformation<IN1> inputType1, 			TypeInformation<IN2> inputType2, 			TypeInformation<OUT> outputType);1531381123;Creates a test harness with the specified number of input gates and specified number_of channels per input gate. Parameter inputGateAssignment specifies for each gate whether_it should be assigned to the first (1), or second (2) input of the task.;public TwoInputStreamTaskTestHarness(_			Function<Environment, ? extends TwoInputStreamTask<IN1, IN2, OUT>> taskFactory,_			int numInputGates,_			int numInputChannelsPerGate,_			int[] inputGateAssignment,_			TypeInformation<IN1> inputType1,_			TypeInformation<IN2> inputType2,_			TypeInformation<OUT> outputType) {__		super(taskFactory, outputType)___		this.inputType1 = inputType1__		inputSerializer1 = inputType1.createSerializer(executionConfig)___		this.inputType2 = inputType2__		inputSerializer2 = inputType2.createSerializer(executionConfig)___		this.numInputGates = numInputGates__		this.numInputChannelsPerGate = numInputChannelsPerGate__		this.inputGateAssignment = inputGateAssignment__	};creates,a,test,harness,with,the,specified,number,of,input,gates,and,specified,number,of,channels,per,input,gate,parameter,input,gate,assignment,specifies,for,each,gate,whether,it,should,be,assigned,to,the,first,1,or,second,2,input,of,the,task;public,two,input,stream,task,test,harness,function,environment,extends,two,input,stream,task,in1,in2,out,task,factory,int,num,input,gates,int,num,input,channels,per,gate,int,input,gate,assignment,type,information,in1,input,type1,type,information,in2,input,type2,type,information,out,output,type,super,task,factory,output,type,this,input,type1,input,type1,input,serializer1,input,type1,create,serializer,execution,config,this,input,type2,input,type2,input,serializer2,input,type2,create,serializer,execution,config,this,num,input,gates,num,input,gates,this,num,input,channels,per,gate,num,input,channels,per,gate,this,input,gate,assignment,input,gate,assignment
