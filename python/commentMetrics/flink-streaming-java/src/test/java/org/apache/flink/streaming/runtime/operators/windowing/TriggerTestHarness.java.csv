# id;timestamp;commentText;codeText;commentWords;codeWords
TriggerTestHarness -> public void clearTriggerState(W window) throws Exception;1485250954;Calls {@link Trigger#clear(Window, Trigger.TriggerContext)} for the given window.;public void clearTriggerState(W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.clear(window, triggerContext)__	};calls,link,trigger,clear,window,trigger,trigger,context,for,the,given,window;public,void,clear,trigger,state,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,trigger,clear,window,trigger,context
TriggerTestHarness -> public void clearTriggerState(W window) throws Exception;1489585296;Calls {@link Trigger#clear(Window, Trigger.TriggerContext)} for the given window.;public void clearTriggerState(W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.clear(window, triggerContext)__	};calls,link,trigger,clear,window,trigger,trigger,context,for,the,given,window;public,void,clear,trigger,state,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,trigger,clear,window,trigger,context
TriggerTestHarness -> public void clearTriggerState(W window) throws Exception;1495484544;Calls {@link Trigger#clear(Window, Trigger.TriggerContext)} for the given window.;public void clearTriggerState(W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.clear(window, triggerContext)__	};calls,link,trigger,clear,window,trigger,trigger,context,for,the,given,window;public,void,clear,trigger,state,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,trigger,clear,window,trigger,context
TriggerTestHarness -> public void clearTriggerState(W window) throws Exception;1522337739;Calls {@link Trigger#clear(Window, Trigger.TriggerContext)} for the given window.;public void clearTriggerState(W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.clear(window, triggerContext)__	};calls,link,trigger,clear,window,trigger,trigger,context,for,the,given,window;public,void,clear,trigger,state,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,trigger,clear,window,trigger,context
TriggerTestHarness -> public void clearTriggerState(W window) throws Exception;1533224436;Calls {@link Trigger#clear(Window, Trigger.TriggerContext)} for the given window.;public void clearTriggerState(W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.clear(window, triggerContext)__	};calls,link,trigger,clear,window,trigger,trigger,context,for,the,given,window;public,void,clear,trigger,state,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,trigger,clear,window,trigger,context
TriggerTestHarness -> public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception;1489585296;Manually invoke {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)} with_the given parameters.;public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception {_		TestInternalTimerService.Timer<Integer, W> timer =_				new TestInternalTimerService.Timer<>(timestamp, KEY, window)___		return invokeOnEventTime(timer)__	};manually,invoke,link,trigger,on,event,time,long,window,trigger,trigger,context,with,the,given,parameters;public,trigger,result,invoke,on,event,time,long,timestamp,w,window,throws,exception,test,internal,timer,service,timer,integer,w,timer,new,test,internal,timer,service,timer,timestamp,key,window,return,invoke,on,event,time,timer
TriggerTestHarness -> public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception;1495484544;Manually invoke {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)} with_the given parameters.;public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception {_		TestInternalTimerService.Timer<Integer, W> timer =_				new TestInternalTimerService.Timer<>(timestamp, KEY, window)___		return invokeOnEventTime(timer)__	};manually,invoke,link,trigger,on,event,time,long,window,trigger,trigger,context,with,the,given,parameters;public,trigger,result,invoke,on,event,time,long,timestamp,w,window,throws,exception,test,internal,timer,service,timer,integer,w,timer,new,test,internal,timer,service,timer,timestamp,key,window,return,invoke,on,event,time,timer
TriggerTestHarness -> public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception;1522337739;Manually invoke {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)} with_the given parameters.;public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception {_		TestInternalTimerService.Timer<Integer, W> timer =_				new TestInternalTimerService.Timer<>(timestamp, KEY, window)___		return invokeOnEventTime(timer)__	};manually,invoke,link,trigger,on,event,time,long,window,trigger,trigger,context,with,the,given,parameters;public,trigger,result,invoke,on,event,time,long,timestamp,w,window,throws,exception,test,internal,timer,service,timer,integer,w,timer,new,test,internal,timer,service,timer,timestamp,key,window,return,invoke,on,event,time,timer
TriggerTestHarness -> public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception;1533224436;Manually invoke {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)} with_the given parameters.;public TriggerResult invokeOnEventTime(long timestamp, W window) throws Exception {_		TestInternalTimerService.Timer<Integer, W> timer =_				new TestInternalTimerService.Timer<>(timestamp, KEY, window)___		return invokeOnEventTime(timer)__	};manually,invoke,link,trigger,on,event,time,long,window,trigger,trigger,context,with,the,given,parameters;public,trigger,result,invoke,on,event,time,long,timestamp,w,window,throws,exception,test,internal,timer,service,timer,integer,w,timer,new,test,internal,timer,service,timer,timestamp,key,window,return,invoke,on,event,time,timer
TriggerTestHarness -> public TriggerResult advanceWatermark(long time, W window) throws Exception;1485250954;Advanced the watermark and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceWatermark(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceWatermark(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,the,watermark,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,event,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,watermark,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,watermark,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceWatermark(long time, W window) throws Exception;1489585296;Advanced the watermark and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceWatermark(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceWatermark(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,the,watermark,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,event,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,watermark,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,watermark,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceWatermark(long time, W window) throws Exception;1495484544;Advanced the watermark and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceWatermark(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceWatermark(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,the,watermark,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,event,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,watermark,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,watermark,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceWatermark(long time, W window) throws Exception;1522337739;Advanced the watermark and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceWatermark(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceWatermark(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,the,watermark,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,event,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,watermark,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,watermark,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceWatermark(long time, W window) throws Exception;1533224436;Advanced the watermark and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onEventTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceWatermark(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceWatermark(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,the,watermark,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,event,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,watermark,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,watermark,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception;1485250954;Advanced the watermark and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceWatermark(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onEventTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,the,watermark,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,watermark,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,watermark,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,event,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception;1489585296;Advanced the watermark and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceWatermark(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TriggerResult triggerResult = invokeOnEventTime(timer)__			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,the,watermark,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,watermark,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,watermark,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,trigger,result,trigger,result,invoke,on,event,time,timer,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception;1495484544;Advanced the watermark and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceWatermark(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TriggerResult triggerResult = invokeOnEventTime(timer)__			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,the,watermark,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,watermark,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,watermark,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,trigger,result,trigger,result,invoke,on,event,time,timer,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception;1522337739;Advanced the watermark and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceWatermark(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TriggerResult triggerResult = invokeOnEventTime(timer)__			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,the,watermark,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,watermark,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,watermark,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,trigger,result,trigger,result,invoke,on,event,time,timer,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception;1533224436;Advanced the watermark and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceWatermark(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceWatermark(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TriggerResult triggerResult = invokeOnEventTime(timer)__			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,the,watermark,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,watermark,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,watermark,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,trigger,result,trigger,result,invoke,on,event,time,timer,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception;1485250954;Calls {@link Trigger#onMerge(Window, Trigger.OnMergeContext)} with the given_parameters. This also calls {@link Trigger#clear(Window, Trigger.TriggerContext)} on the_merged windows as does {@link WindowOperator}.;public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception {_		TestOnMergeContext<Integer, W> onMergeContext = new TestOnMergeContext<>(_				KEY,_				targetWindow,_				mergedWindows,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.onMerge(targetWindow, onMergeContext)___		for (W mergedWindow : mergedWindows) {_			clearTriggerState(mergedWindow)__		}_	};calls,link,trigger,on,merge,window,trigger,on,merge,context,with,the,given,parameters,this,also,calls,link,trigger,clear,window,trigger,trigger,context,on,the,merged,windows,as,does,link,window,operator;public,void,merge,windows,w,target,window,collection,w,merged,windows,throws,exception,test,on,merge,context,integer,w,on,merge,context,new,test,on,merge,context,key,target,window,merged,windows,internal,timer,service,state,backend,window,serializer,trigger,on,merge,target,window,on,merge,context,for,w,merged,window,merged,windows,clear,trigger,state,merged,window
TriggerTestHarness -> public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception;1489585296;Calls {@link Trigger#onMerge(Window, Trigger.OnMergeContext)} with the given_parameters. This also calls {@link Trigger#clear(Window, Trigger.TriggerContext)} on the_merged windows as does {@link WindowOperator}.;public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception {_		TestOnMergeContext<Integer, W> onMergeContext = new TestOnMergeContext<>(_				KEY,_				targetWindow,_				mergedWindows,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.onMerge(targetWindow, onMergeContext)___		for (W mergedWindow : mergedWindows) {_			clearTriggerState(mergedWindow)__		}_	};calls,link,trigger,on,merge,window,trigger,on,merge,context,with,the,given,parameters,this,also,calls,link,trigger,clear,window,trigger,trigger,context,on,the,merged,windows,as,does,link,window,operator;public,void,merge,windows,w,target,window,collection,w,merged,windows,throws,exception,test,on,merge,context,integer,w,on,merge,context,new,test,on,merge,context,key,target,window,merged,windows,internal,timer,service,state,backend,window,serializer,trigger,on,merge,target,window,on,merge,context,for,w,merged,window,merged,windows,clear,trigger,state,merged,window
TriggerTestHarness -> public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception;1495484544;Calls {@link Trigger#onMerge(Window, Trigger.OnMergeContext)} with the given_parameters. This also calls {@link Trigger#clear(Window, Trigger.TriggerContext)} on the_merged windows as does {@link WindowOperator}.;public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception {_		TestOnMergeContext<Integer, W> onMergeContext = new TestOnMergeContext<>(_				KEY,_				targetWindow,_				mergedWindows,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.onMerge(targetWindow, onMergeContext)___		for (W mergedWindow : mergedWindows) {_			clearTriggerState(mergedWindow)__		}_	};calls,link,trigger,on,merge,window,trigger,on,merge,context,with,the,given,parameters,this,also,calls,link,trigger,clear,window,trigger,trigger,context,on,the,merged,windows,as,does,link,window,operator;public,void,merge,windows,w,target,window,collection,w,merged,windows,throws,exception,test,on,merge,context,integer,w,on,merge,context,new,test,on,merge,context,key,target,window,merged,windows,internal,timer,service,state,backend,window,serializer,trigger,on,merge,target,window,on,merge,context,for,w,merged,window,merged,windows,clear,trigger,state,merged,window
TriggerTestHarness -> public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception;1522337739;Calls {@link Trigger#onMerge(Window, Trigger.OnMergeContext)} with the given_parameters. This also calls {@link Trigger#clear(Window, Trigger.TriggerContext)} on the_merged windows as does {@link WindowOperator}.;public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception {_		TestOnMergeContext<Integer, W> onMergeContext = new TestOnMergeContext<>(_				KEY,_				targetWindow,_				mergedWindows,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.onMerge(targetWindow, onMergeContext)___		for (W mergedWindow : mergedWindows) {_			clearTriggerState(mergedWindow)__		}_	};calls,link,trigger,on,merge,window,trigger,on,merge,context,with,the,given,parameters,this,also,calls,link,trigger,clear,window,trigger,trigger,context,on,the,merged,windows,as,does,link,window,operator;public,void,merge,windows,w,target,window,collection,w,merged,windows,throws,exception,test,on,merge,context,integer,w,on,merge,context,new,test,on,merge,context,key,target,window,merged,windows,internal,timer,service,state,backend,window,serializer,trigger,on,merge,target,window,on,merge,context,for,w,merged,window,merged,windows,clear,trigger,state,merged,window
TriggerTestHarness -> public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception;1533224436;Calls {@link Trigger#onMerge(Window, Trigger.OnMergeContext)} with the given_parameters. This also calls {@link Trigger#clear(Window, Trigger.TriggerContext)} on the_merged windows as does {@link WindowOperator}.;public void mergeWindows(W targetWindow, Collection<W> mergedWindows) throws Exception {_		TestOnMergeContext<Integer, W> onMergeContext = new TestOnMergeContext<>(_				KEY,_				targetWindow,_				mergedWindows,_				internalTimerService,_				stateBackend,_				windowSerializer)__		trigger.onMerge(targetWindow, onMergeContext)___		for (W mergedWindow : mergedWindows) {_			clearTriggerState(mergedWindow)__		}_	};calls,link,trigger,on,merge,window,trigger,on,merge,context,with,the,given,parameters,this,also,calls,link,trigger,clear,window,trigger,trigger,context,on,the,merged,windows,as,does,link,window,operator;public,void,merge,windows,w,target,window,collection,w,merged,windows,throws,exception,test,on,merge,context,integer,w,on,merge,context,new,test,on,merge,context,key,target,window,merged,windows,internal,timer,service,state,backend,window,serializer,trigger,on,merge,target,window,on,merge,context,for,w,merged,window,merged,windows,clear,trigger,state,merged,window
TriggerTestHarness -> public TriggerResult advanceProcessingTime(long time, W window) throws Exception;1485250954;Advanced processing time and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onProcessingTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceProcessingTime(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceProcessingTime(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,processing,time,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,processing,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,processing,time,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,processing,time,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceProcessingTime(long time, W window) throws Exception;1489585296;Advanced processing time and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onProcessingTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceProcessingTime(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceProcessingTime(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,processing,time,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,processing,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,processing,time,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,processing,time,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceProcessingTime(long time, W window) throws Exception;1495484544;Advanced processing time and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onProcessingTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceProcessingTime(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceProcessingTime(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,processing,time,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,processing,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,processing,time,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,processing,time,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceProcessingTime(long time, W window) throws Exception;1522337739;Advanced processing time and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onProcessingTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceProcessingTime(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceProcessingTime(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,processing,time,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,processing,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,processing,time,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,processing,time,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public TriggerResult advanceProcessingTime(long time, W window) throws Exception;1533224436;Advanced processing time and checks whether we have exactly one firing for the given_window. The result of {@link Trigger#onProcessingTime(long, Window, Trigger.TriggerContext)}_is returned for that firing.;public TriggerResult advanceProcessingTime(long time, W window) throws Exception {_		Collection<Tuple2<W, TriggerResult>> firings = advanceProcessingTime(time)___		if (firings.size() != 1) {_			throw new IllegalStateException("Must have exactly one timer firing. Fired timers: " + firings)__		}__		Tuple2<W, TriggerResult> firing = firings.iterator().next()___		if (!firing.f0.equals(window)) {_			throw new IllegalStateException("Trigger fired for another window.")__		}__		return firing.f1__	};advanced,processing,time,and,checks,whether,we,have,exactly,one,firing,for,the,given,window,the,result,of,link,trigger,on,processing,time,long,window,trigger,trigger,context,is,returned,for,that,firing;public,trigger,result,advance,processing,time,long,time,w,window,throws,exception,collection,tuple2,w,trigger,result,firings,advance,processing,time,time,if,firings,size,1,throw,new,illegal,state,exception,must,have,exactly,one,timer,firing,fired,timers,firings,tuple2,w,trigger,result,firing,firings,iterator,next,if,firing,f0,equals,window,throw,new,illegal,state,exception,trigger,fired,for,another,window,return,firing,f1
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception;1485250954;Advanced processing time and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceProcessingTime(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onProcessingTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,processing,time,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,processing,time,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,processing,time,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,processing,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception;1489585296;Advanced processing time and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceProcessingTime(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onProcessingTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,processing,time,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,processing,time,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,processing,time,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,processing,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception;1495484544;Advanced processing time and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceProcessingTime(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onProcessingTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,processing,time,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,processing,time,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,processing,time,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,processing,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception;1522337739;Advanced processing time and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceProcessingTime(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onProcessingTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,processing,time,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,processing,time,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,processing,time,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,processing,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception;1533224436;Advanced processing time and processes any timers that fire because of this. The_window and {@link TriggerResult} for each firing are returned.;public Collection<Tuple2<W, TriggerResult>> advanceProcessingTime(long time) throws Exception {_		Collection<TestInternalTimerService.Timer<Integer, W>> firedTimers =_				internalTimerService.advanceProcessingTime(time)___		Collection<Tuple2<W, TriggerResult>> result = new ArrayList<>()___		for (TestInternalTimerService.Timer<Integer, W> timer : firedTimers) {_			TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_					KEY,_					timer.getNamespace(),_					internalTimerService,_					stateBackend,_					windowSerializer)___			TriggerResult triggerResult =_					trigger.onProcessingTime(timer.getTimestamp(), timer.getNamespace(), triggerContext)___			result.add(new Tuple2<>(timer.getNamespace(), triggerResult))__		}__		return result__	};advanced,processing,time,and,processes,any,timers,that,fire,because,of,this,the,window,and,link,trigger,result,for,each,firing,are,returned;public,collection,tuple2,w,trigger,result,advance,processing,time,long,time,throws,exception,collection,test,internal,timer,service,timer,integer,w,fired,timers,internal,timer,service,advance,processing,time,time,collection,tuple2,w,trigger,result,result,new,array,list,for,test,internal,timer,service,timer,integer,w,timer,fired,timers,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,timer,get,namespace,internal,timer,service,state,backend,window,serializer,trigger,result,trigger,result,trigger,on,processing,time,timer,get,timestamp,timer,get,namespace,trigger,context,result,add,new,tuple2,timer,get,namespace,trigger,result,return,result
TriggerTestHarness -> public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception;1485250954;Injects one element into the trigger for the given window and returns the result of_{@link Trigger#onElement(Object, long, Window, Trigger.TriggerContext)};public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		return trigger.onElement(element.getValue(), element.getTimestamp(), window, triggerContext)__	};injects,one,element,into,the,trigger,for,the,given,window,and,returns,the,result,of,link,trigger,on,element,object,long,window,trigger,trigger,context;public,trigger,result,process,element,stream,record,t,element,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,return,trigger,on,element,element,get,value,element,get,timestamp,window,trigger,context
TriggerTestHarness -> public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception;1489585296;Injects one element into the trigger for the given window and returns the result of_{@link Trigger#onElement(Object, long, Window, Trigger.TriggerContext)};public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		return trigger.onElement(element.getValue(), element.getTimestamp(), window, triggerContext)__	};injects,one,element,into,the,trigger,for,the,given,window,and,returns,the,result,of,link,trigger,on,element,object,long,window,trigger,trigger,context;public,trigger,result,process,element,stream,record,t,element,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,return,trigger,on,element,element,get,value,element,get,timestamp,window,trigger,context
TriggerTestHarness -> public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception;1495484544;Injects one element into the trigger for the given window and returns the result of_{@link Trigger#onElement(Object, long, Window, Trigger.TriggerContext)}.;public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		return trigger.onElement(element.getValue(), element.getTimestamp(), window, triggerContext)__	};injects,one,element,into,the,trigger,for,the,given,window,and,returns,the,result,of,link,trigger,on,element,object,long,window,trigger,trigger,context;public,trigger,result,process,element,stream,record,t,element,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,return,trigger,on,element,element,get,value,element,get,timestamp,window,trigger,context
TriggerTestHarness -> public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception;1522337739;Injects one element into the trigger for the given window and returns the result of_{@link Trigger#onElement(Object, long, Window, Trigger.TriggerContext)}.;public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		return trigger.onElement(element.getValue(), element.getTimestamp(), window, triggerContext)__	};injects,one,element,into,the,trigger,for,the,given,window,and,returns,the,result,of,link,trigger,on,element,object,long,window,trigger,trigger,context;public,trigger,result,process,element,stream,record,t,element,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,return,trigger,on,element,element,get,value,element,get,timestamp,window,trigger,context
TriggerTestHarness -> public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception;1533224436;Injects one element into the trigger for the given window and returns the result of_{@link Trigger#onElement(Object, long, Window, Trigger.TriggerContext)}.;public TriggerResult processElement(StreamRecord<T> element, W window) throws Exception {_		TestTriggerContext<Integer, W> triggerContext = new TestTriggerContext<>(_				KEY,_				window,_				internalTimerService,_				stateBackend,_				windowSerializer)__		return trigger.onElement(element.getValue(), element.getTimestamp(), window, triggerContext)__	};injects,one,element,into,the,trigger,for,the,given,window,and,returns,the,result,of,link,trigger,on,element,object,long,window,trigger,trigger,context;public,trigger,result,process,element,stream,record,t,element,w,window,throws,exception,test,trigger,context,integer,w,trigger,context,new,test,trigger,context,key,window,internal,timer,service,state,backend,window,serializer,return,trigger,on,element,element,get,value,element,get,timestamp,window,trigger,context
